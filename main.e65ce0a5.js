this.wordle = this.wordle || {}, this.wordle.bundle = function (e) {
  "use strict"; function a(e) { return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(e) } function s(e, a) { if (!(e instanceof a)) throw new TypeError("Cannot call a class as a function") } function t(e, a) { for (var s = 0; s < a.length; s++) { var t = a[s]; t.enumerable = t.enumerable || !1, t.configurable = !0, "value" in t && (t.writable = !0), Object.defineProperty(e, t.key, t) } } function o(e, a, s) { return a && t(e.prototype, a), s && t(e, s), e } function n(e, a, s) { return a in e ? Object.defineProperty(e, a, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : e[a] = s, e } function r(e, a) { if ("function" != typeof a && null !== a) throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(a && a.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), a && l(e, a) } function i(e) { return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } function l(e, a) { return (l = Object.setPrototypeOf || function (e, a) { return e.__proto__ = a, e })(e, a) } function d() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (e) { return !1 } } function u(e, a, s) { return (u = d() ? Reflect.construct : function (e, a, s) { var t = [null]; t.push.apply(t, a); var o = new (Function.bind.apply(e, t)); return s && l(o, s.prototype), o }).apply(null, arguments) } function c(e) { var a = "function" == typeof Map ? new Map : void 0; return (c = function (e) { if (null === e || (s = e, -1 === Function.toString.call(s).indexOf("[native code]"))) return e; var s; if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== a) { if (a.has(e)) return a.get(e); a.set(e, t) } function t() { return u(e, arguments, i(this).constructor) } return t.prototype = Object.create(e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), l(t, e) })(e) } function p(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function m(e, a) { return !a || "object" != typeof a && "function" != typeof a ? p(e) : a } function h(e) { var a = d(); return function () { var s, t = i(e); if (a) { var o = i(this).constructor; s = Reflect.construct(t, arguments, o) } else s = t.apply(this, arguments); return m(this, s) } } function y(e, a) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, a) { var s = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]; if (null == s) return; var t, o, n = [], r = !0, i = !1; try { for (s = s.call(e); !(r = (t = s.next()).done) && (n.push(t.value), !a || n.length !== a); r = !0); } catch (e) { i = !0, o = e } finally { try { r || null == s.return || s.return() } finally { if (i) throw o } } return n }(e, a) || b(e, a) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function g(e) { return function (e) { if (Array.isArray(e)) return f(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || b(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function b(e, a) { if (e) { if ("string" == typeof e) return f(e, a); var s = Object.prototype.toString.call(e).slice(8, -1); return "Object" === s && e.constructor && (s = e.constructor.name), "Map" === s || "Set" === s ? Array.from(e) : "Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s) ? f(e, a) : void 0 } } function f(e, a) { (null == a || a > e.length) && (a = e.length); for (var s = 0, t = new Array(a); s < a; s++)t[s] = e[s]; return t } var k = document.createElement("template"); k.innerHTML = "\n<style>\n  :host {\n    display: inline-block;\n  }\n  .tile {\n    border-radius: 10px;\n    width: 100%;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 2rem;\n    line-height: 2rem;\n    font-weight: bold;\n    vertical-align: middle;\n    box-sizing: border-box;\n    color: var(--tile-text-color);\n    text-transform: uppercase;\n    user-select: none;\n  }\n  .tile::before {\n    content: '';\n    display: inline-block;\n    padding-bottom: 100%;\n  }\n\n  /* Allow tiles to be smaller on small screens */\n  @media (max-height: 600px) {\n    .tile {\n      font-size: 1em;\n      line-height: 1em;\n    }\n  }\n\n  .tile[data-state='empty'] {\n    border: 2px solid var(--color-tone-4);\n  }\n  .tile[data-state='tbd'] {\n    background-color: var(--color-tone-7);\n    border: 2px solid var(--color-tone-3);\n    color: var(--color-tone-1);\n  }\n  .tile[data-state='correct'] {\n    background-color: var(--color-correct);\n  }\n  .tile[data-state='present'] {\n    background-color: var(--color-present);\n  }\n  .tile[data-state='absent'] {\n    background-color: var(--color-absent);\n  }\n\n  .tile[data-animation='pop'] {\n    animation-name: PopIn;\n    animation-duration: 100ms;\n  }\n\n  @keyframes PopIn {\n    from {\n      transform: scale(0.8);\n      opacity: 0;\n    }\n\n    40% {\n      transform: scale(1.1);\n      opacity: 1;\n    }\n  }\n  .tile[data-animation='flip-in'] {\n    animation-name: FlipIn;\n    animation-duration: 250ms;\n    animation-timing-function: ease-in;\n  }\n  @keyframes FlipIn {\n    0% {\n      transform: rotateX(0);\n    }\n    100% {\n      transform: rotateX(-90deg);\n    }\n  }\n  .tile[data-animation='flip-out'] {\n    animation-name: FlipOut;\n    animation-duration: 250ms;\n    animation-timing-function: ease-in;\n  }\n  @keyframes FlipOut {\n    0% {\n      transform: rotateX(-90deg);\n    }\n    100% {\n      transform: rotateX(0);\n    }\n  }\n</style>\n<div class=\"tile\" data-state=\"empty\" data-animation=\"idle\"></div>\n"; var v = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), n(p(e = a.call(this)), "_letter", ""), n(p(e), "_state", "empty"), n(p(e), "_animation", "idle"), n(p(e), "_last", !1), n(p(e), "_reveal", !1), e.attachShadow({ mode: "open" }), e } return o(t, [{ key: "last", set: function (e) { this._last = e } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(k.content.cloneNode(!0)), this.$tile = this.shadowRoot.querySelector(".tile"), this.$tile.addEventListener("animationend", (function (a) { "PopIn" === a.animationName && (e._animation = "idle"), "FlipIn" === a.animationName && (e.$tile.dataset.state = e._state, e._animation = "flip-out"), "FlipOut" === a.animationName && (e._animation = "idle", e._last && e.dispatchEvent(new CustomEvent("game-last-tile-revealed-in-row", { bubbles: !0, composed: !0 }))), e._render() })), this._render() } }, { key: "attributeChangedCallback", value: function (e, a, s) { switch (e) { case "letter": if (s === a) break; var t = "null" === s ? "" : s; this._letter = t, this._state = t ? "tbd" : "empty", this._animation = t ? "pop" : "idle"; break; case "evaluation": if (!s) break; this._state = s; break; case "reveal": this._animation = "flip-in", this._reveal = !0 }this._render() } }, { key: "_render", value: function () { this.$tile && (this.$tile.textContent = this._letter, ["empty", "tbd"].includes(this._state) && (this.$tile.dataset.state = this._state), (["empty", "tbd"].includes(this._state) || this._reveal) && this.$tile.dataset.animation != this._animation && (this.$tile.dataset.animation = this._animation)) } }], [{ key: "observedAttributes", get: function () { return ["letter", "evaluation", "reveal"] } }]), t }(c(HTMLElement)); customElements.define("game-tile", v); var w = document.createElement("template"); w.innerHTML = '\n  <style>\n    :host {\n      display: block;\n    }\n    :host([invalid]){\n      animation-name: Shake;\n      animation-duration: 600ms;\n    }\n    .row {\n      display: grid;\n      grid-template-columns: repeat(5, 1fr);\n      grid-gap: 5px;\n    }\n    .win {\n      animation-name: Bounce;\n      animation-duration: 1000ms;\n    }\n\n    @keyframes Bounce {\n      0%, 20% {\n        transform: translateY(0);\n      }\n      40% {\n        transform: translateY(-30px);\n      }\n      50% {\n        transform: translateY(5px);\n      }\n      60% {\n        transform: translateY(-15px);\n      }\n      80% {\n        transform: translateY(2px);\n      }\n      100% {\n        transform: translateY(0);\n      }\n    }\n\n    @keyframes Shake {\n      10%,\n      90% {\n        transform: translateX(-1px);\n      }\n\n      20%,\n      80% {\n        transform: translateX(2px);\n      }\n\n      30%,\n      50%,\n      70% {\n        transform: translateX(-4px);\n      }\n\n      40%,\n      60% {\n        transform: translateX(4px);\n      }\n    }\n  </style>\n  <div class="row"></div>\n'; var x = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e._letters = "", e._evaluation = [], e._length, e } return o(t, [{ key: "evaluation", get: function () { return this._evaluation }, set: function (e) { var a = this; this._evaluation = e, this.$tiles && this.$tiles.forEach((function (e, s) { e.setAttribute("evaluation", a._evaluation[s]), setTimeout((function () { e.setAttribute("reveal", "") }), 300 * s) })) } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(w.content.cloneNode(!0)), this.$row = this.shadowRoot.querySelector(".row"); for (var a = function (a) { var s = document.createElement("game-tile"), t = e._letters[a]; (t && s.setAttribute("letter", t), e._evaluation[a]) && (s.setAttribute("evaluation", e._evaluation[a]), setTimeout((function () { s.setAttribute("reveal", "") }), 100 * a)); a === e._length - 1 && (s.last = !0), e.$row.appendChild(s) }, s = 0; s < this._length; s++)a(s); this.$tiles = this.shadowRoot.querySelectorAll("game-tile"), this.addEventListener("animationend", (function (a) { "Shake" === a.animationName && e.removeAttribute("invalid") })) } }, { key: "attributeChangedCallback", value: function (e, a, s) { switch (e) { case "letters": this._letters = s || ""; break; case "length": this._length = parseInt(s, 10); break; case "win": if (null === s) { this.$tiles.forEach((function (e) { e.classList.remove("win") })); break } this.$tiles.forEach((function (e, a) { e.classList.add("win"), e.style.animationDelay = "".concat(100 * a, "ms") })) }this._render() } }, { key: "_render", value: function () { var e = this; this.$row && this.$tiles.forEach((function (a, s) { var t = e._letters[s]; t ? a.setAttribute("letter", t) : a.removeAttribute("letter") })) } }], [{ key: "observedAttributes", get: function () { return ["letters", "length", "invalid", "win"] } }]), t }(c(HTMLElement)); customElements.define("game-row", x); var z = document.createElement("template"); z.innerHTML = "\n  <slot></slot>\n"; var j = "darkTheme", S = "colorBlindTheme", _ = function (e) { r(t, e); var a = h(t); function t() { var e; s(this, t), n(p(e = a.call(this)), "isDarkTheme", !1), n(p(e), "isColorBlindTheme", !1), e.attachShadow({ mode: "open" }); var o = JSON.parse(window.localStorage.getItem(j)), r = window.matchMedia("(prefers-color-scheme: dark)").matches, i = JSON.parse(window.localStorage.getItem(S)); return !0 === o || !1 === o ? e.setDarkTheme(o) : r && e.setDarkTheme(!0), !0 !== i && !1 !== i || e.setColorBlindTheme(i), e } return o(t, [{ key: "setDarkTheme", value: function (e) { var a = document.querySelector("body"); e && !a.classList.contains("nightmode") ? a.classList.add("nightmode") : a.classList.remove("nightmode"), this.isDarkTheme = e, window.localStorage.setItem(j, JSON.stringify(e)) } }, { key: "setColorBlindTheme", value: function (e) { var a = document.querySelector("body"); e && !a.classList.contains("colorblind") ? a.classList.add("colorblind") : a.classList.remove("colorblind"), this.isColorBlindTheme = e, window.localStorage.setItem(S, JSON.stringify(e)) } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(z.content.cloneNode(!0)), this.shadowRoot.addEventListener("game-setting-change", (function (a) { var s = a.detail, t = s.name, o = s.checked; switch (t) { case "dark-theme": return void e.setDarkTheme(o); case "color-blind-theme": return void e.setColorBlindTheme(o) } })) } }]), t }(c(HTMLElement)); function q(e, a) { return e === a || e != e && a != a } function E(e, a) { for (var s = e.length; s--;)if (q(e[s][0], a)) return s; return -1 } customElements.define("game-theme-manager", _); var A = Array.prototype.splice; function C(e) { var a = -1, s = null == e ? 0 : e.length; for (this.clear(); ++a < s;) { var t = e[a]; this.set(t[0], t[1]) } } C.prototype.clear = function () { this.__data__ = [], this.size = 0 }, C.prototype.delete = function (e) { var a = this.__data__, s = E(a, e); return !(s < 0) && (s == a.length - 1 ? a.pop() : A.call(a, s, 1), --this.size, !0) }, C.prototype.get = function (e) { var a = this.__data__, s = E(a, e); return s < 0 ? void 0 : a[s][1] }, C.prototype.has = function (e) { return E(this.__data__, e) > -1 }, C.prototype.set = function (e, a) { var s = this.__data__, t = E(s, e); return t < 0 ? (++this.size, s.push([e, a])) : s[t][1] = a, this }; var L = "object" == ("undefined" == typeof global ? "undefined" : a(global)) && global && global.Object === Object && global, T = "object" == ("undefined" == typeof self ? "undefined" : a(self)) && self && self.Object === Object && self, I = L || T || Function("return this")(), M = I.Symbol, O = Object.prototype, R = O.hasOwnProperty, P = O.toString, $ = M ? M.toStringTag : void 0; var H = Object.prototype.toString; var N = M ? M.toStringTag : void 0; function D(e) { return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : N && N in Object(e) ? function (e) { var a = R.call(e, $), s = e[$]; try { e[$] = void 0; var t = !0 } catch (e) { } var o = P.call(e); return t && (a ? e[$] = s : delete e[$]), o }(e) : function (e) { return H.call(e) }(e) } function G(e) { var s = a(e); return null != e && ("object" == s || "function" == s) } function B(e) { if (!G(e)) return !1; var a = D(e); return "[object Function]" == a || "[object GeneratorFunction]" == a || "[object AsyncFunction]" == a || "[object Proxy]" == a } var F, W = I["__core-js_shared__"], Y = (F = /[^.]+$/.exec(W && W.keys && W.keys.IE_PROTO || "")) ? "Symbol(src)_1." + F : ""; var J = Function.prototype.toString; var U = /^\[object .+?Constructor\]$/, X = Function.prototype, V = Object.prototype, K = X.toString, Q = V.hasOwnProperty, Z = RegExp("^" + K.call(Q).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"); function ee(e) { return !(!G(e) || (a = e, Y && Y in a)) && (B(e) ? Z : U).test(function (e) { if (null != e) { try { return J.call(e) } catch (e) { } try { return e + "" } catch (e) { } } return "" }(e)); var a } function ae(e, a) { var s = function (e, a) { return null == e ? void 0 : e[a] }(e, a); return ee(s) ? s : void 0 } var se = ae(I, "Map"), te = ae(Object, "create"); var oe = Object.prototype.hasOwnProperty; var ne = Object.prototype.hasOwnProperty; function re(e) { var a = -1, s = null == e ? 0 : e.length; for (this.clear(); ++a < s;) { var t = e[a]; this.set(t[0], t[1]) } } function ie(e, s) { var t, o, n = e.__data__; return ("string" == (o = a(t = s)) || "number" == o || "symbol" == o || "boolean" == o ? "__proto__" !== t : null === t) ? n["string" == typeof s ? "string" : "hash"] : n.map } function le(e) { var a = -1, s = null == e ? 0 : e.length; for (this.clear(); ++a < s;) { var t = e[a]; this.set(t[0], t[1]) } } re.prototype.clear = function () { this.__data__ = te ? te(null) : {}, this.size = 0 }, re.prototype.delete = function (e) { var a = this.has(e) && delete this.__data__[e]; return this.size -= a ? 1 : 0, a }, re.prototype.get = function (e) { var a = this.__data__; if (te) { var s = a[e]; return "__lodash_hash_undefined__" === s ? void 0 : s } return oe.call(a, e) ? a[e] : void 0 }, re.prototype.has = function (e) { var a = this.__data__; return te ? void 0 !== a[e] : ne.call(a, e) }, re.prototype.set = function (e, a) { var s = this.__data__; return this.size += this.has(e) ? 0 : 1, s[e] = te && void 0 === a ? "__lodash_hash_undefined__" : a, this }, le.prototype.clear = function () { this.size = 0, this.__data__ = { hash: new re, map: new (se || C), string: new re } }, le.prototype.delete = function (e) { var a = ie(this, e).delete(e); return this.size -= a ? 1 : 0, a }, le.prototype.get = function (e) { return ie(this, e).get(e) }, le.prototype.has = function (e) { return ie(this, e).has(e) }, le.prototype.set = function (e, a) { var s = ie(this, e), t = s.size; return s.set(e, a), this.size += s.size == t ? 0 : 1, this }; function de(e) { var a = this.__data__ = new C(e); this.size = a.size } de.prototype.clear = function () { this.__data__ = new C, this.size = 0 }, de.prototype.delete = function (e) { var a = this.__data__, s = a.delete(e); return this.size = a.size, s }, de.prototype.get = function (e) { return this.__data__.get(e) }, de.prototype.has = function (e) { return this.__data__.has(e) }, de.prototype.set = function (e, a) { var s = this.__data__; if (s instanceof C) { var t = s.__data__; if (!se || t.length < 199) return t.push([e, a]), this.size = ++s.size, this; s = this.__data__ = new le(t) } return s.set(e, a), this.size = s.size, this }; var ue = function () { try { var e = ae(Object, "defineProperty"); return e({}, "", {}), e } catch (e) { } }(); function ce(e, a, s) { "__proto__" == a && ue ? ue(e, a, { configurable: !0, enumerable: !0, value: s, writable: !0 }) : e[a] = s } function pe(e, a, s) { (void 0 !== s && !q(e[a], s) || void 0 === s && !(a in e)) && ce(e, a, s) } var me, he = function (e, a, s) { for (var t = -1, o = Object(e), n = s(e), r = n.length; r--;) { var i = n[me ? r : ++t]; if (!1 === a(o[i], i, o)) break } return e }, ye = "object" == (void 0 === e ? "undefined" : a(e)) && e && !e.nodeType && e, ge = ye && "object" == ("undefined" == typeof module ? "undefined" : a(module)) && module && !module.nodeType && module, be = ge && ge.exports === ye ? I.Buffer : void 0, fe = be ? be.allocUnsafe : void 0; var ke = I.Uint8Array; function ve(e, a) { var s, t, o = a ? (s = e.buffer, t = new s.constructor(s.byteLength), new ke(t).set(new ke(s)), t) : e.buffer; return new e.constructor(o, e.byteOffset, e.length) } var we = Object.create, xe = function () { function e() { } return function (a) { if (!G(a)) return {}; if (we) return we(a); e.prototype = a; var s = new e; return e.prototype = void 0, s } }(); var ze, je, Se = (ze = Object.getPrototypeOf, je = Object, function (e) { return ze(je(e)) }), _e = Object.prototype; function qe(e) { var a = e && e.constructor; return e === ("function" == typeof a && a.prototype || _e) } function Ee(e) { return null != e && "object" == a(e) } function Ae(e) { return Ee(e) && "[object Arguments]" == D(e) } var Ce = Object.prototype, Le = Ce.hasOwnProperty, Te = Ce.propertyIsEnumerable, Ie = Ae(function () { return arguments }()) ? Ae : function (e) { return Ee(e) && Le.call(e, "callee") && !Te.call(e, "callee") }, Me = Array.isArray; function Oe(e) { return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991 } function Re(e) { return null != e && Oe(e.length) && !B(e) } var Pe = "object" == (void 0 === e ? "undefined" : a(e)) && e && !e.nodeType && e, $e = Pe && "object" == ("undefined" == typeof module ? "undefined" : a(module)) && module && !module.nodeType && module, He = $e && $e.exports === Pe ? I.Buffer : void 0, Ne = (He ? He.isBuffer : void 0) || function () { return !1 }, De = Function.prototype, Ge = Object.prototype, Be = De.toString, Fe = Ge.hasOwnProperty, We = Be.call(Object); var Ye = {}; Ye["[object Float32Array]"] = Ye["[object Float64Array]"] = Ye["[object Int8Array]"] = Ye["[object Int16Array]"] = Ye["[object Int32Array]"] = Ye["[object Uint8Array]"] = Ye["[object Uint8ClampedArray]"] = Ye["[object Uint16Array]"] = Ye["[object Uint32Array]"] = !0, Ye["[object Arguments]"] = Ye["[object Array]"] = Ye["[object ArrayBuffer]"] = Ye["[object Boolean]"] = Ye["[object DataView]"] = Ye["[object Date]"] = Ye["[object Error]"] = Ye["[object Function]"] = Ye["[object Map]"] = Ye["[object Number]"] = Ye["[object Object]"] = Ye["[object RegExp]"] = Ye["[object Set]"] = Ye["[object String]"] = Ye["[object WeakMap]"] = !1; var Je = "object" == (void 0 === e ? "undefined" : a(e)) && e && !e.nodeType && e, Ue = Je && "object" == ("undefined" == typeof module ? "undefined" : a(module)) && module && !module.nodeType && module, Xe = Ue && Ue.exports === Je && L.process, Ve = function () { try { var e = Ue && Ue.require && Ue.require("util").types; return e || Xe && Xe.binding && Xe.binding("util") } catch (e) { } }(), Ke = Ve && Ve.isTypedArray, Qe = Ke ? function (e) { return function (a) { return e(a) } }(Ke) : function (e) { return Ee(e) && Oe(e.length) && !!Ye[D(e)] }; function Ze(e, a) { if (("constructor" !== a || "function" != typeof e[a]) && "__proto__" != a) return e[a] } var ea = Object.prototype.hasOwnProperty; function aa(e, a, s) { var t = e[a]; ea.call(e, a) && q(t, s) && (void 0 !== s || a in e) || ce(e, a, s) } var sa = /^(?:0|[1-9]\d*)$/; function ta(e, s) { var t = a(e); return !!(s = null == s ? 9007199254740991 : s) && ("number" == t || "symbol" != t && sa.test(e)) && e > -1 && e % 1 == 0 && e < s } var oa = Object.prototype.hasOwnProperty; function na(e, a) { var s = Me(e), t = !s && Ie(e), o = !s && !t && Ne(e), n = !s && !t && !o && Qe(e), r = s || t || o || n, i = r ? function (e, a) { for (var s = -1, t = Array(e); ++s < e;)t[s] = a(s); return t }(e.length, String) : [], l = i.length; for (var d in e) !a && !oa.call(e, d) || r && ("length" == d || o && ("offset" == d || "parent" == d) || n && ("buffer" == d || "byteLength" == d || "byteOffset" == d) || ta(d, l)) || i.push(d); return i } var ra = Object.prototype.hasOwnProperty; function ia(e) { if (!G(e)) return function (e) { var a = []; if (null != e) for (var s in Object(e)) a.push(s); return a }(e); var a = qe(e), s = []; for (var t in e) ("constructor" != t || !a && ra.call(e, t)) && s.push(t); return s } function la(e) { return Re(e) ? na(e, !0) : ia(e) } function da(e) { return function (e, a, s, t) { var o = !s; s || (s = {}); for (var n = -1, r = a.length; ++n < r;) { var i = a[n], l = t ? t(s[i], e[i], i, s, e) : void 0; void 0 === l && (l = e[i]), o ? ce(s, i, l) : aa(s, i, l) } return s }(e, la(e)) } function ua(e, a, s, t, o, n, r) { var i = Ze(e, s), l = Ze(a, s), d = r.get(l); if (d) pe(e, s, d); else { var u, c = n ? n(i, l, s + "", e, a, r) : void 0, p = void 0 === c; if (p) { var m = Me(l), h = !m && Ne(l), y = !m && !h && Qe(l); c = l, m || h || y ? Me(i) ? c = i : Ee(u = i) && Re(u) ? c = function (e, a) { var s = -1, t = e.length; for (a || (a = Array(t)); ++s < t;)a[s] = e[s]; return a }(i) : h ? (p = !1, c = function (e, a) { if (a) return e.slice(); var s = e.length, t = fe ? fe(s) : new e.constructor(s); return e.copy(t), t }(l, !0)) : y ? (p = !1, c = ve(l, !0)) : c = [] : function (e) { if (!Ee(e) || "[object Object]" != D(e)) return !1; var a = Se(e); if (null === a) return !0; var s = Fe.call(a, "constructor") && a.constructor; return "function" == typeof s && s instanceof s && Be.call(s) == We }(l) || Ie(l) ? (c = i, Ie(i) ? c = da(i) : G(i) && !B(i) || (c = function (e) { return "function" != typeof e.constructor || qe(e) ? {} : xe(Se(e)) }(l))) : p = !1 } p && (r.set(l, c), o(c, l, t, n, r), r.delete(l)), pe(e, s, c) } } function ca(e, a, s, t, o) { e !== a && he(a, (function (n, r) { if (o || (o = new de), G(n)) ua(e, a, r, s, ca, t, o); else { var i = t ? t(Ze(e, r), n, r + "", e, a, o) : void 0; void 0 === i && (i = n), pe(e, r, i) } }), la) } function pa(e) { return e } function ma(e, a, s) { switch (s.length) { case 0: return e.call(a); case 1: return e.call(a, s[0]); case 2: return e.call(a, s[0], s[1]); case 3: return e.call(a, s[0], s[1], s[2]) }return e.apply(a, s) } var ha = Math.max; var ya = ue ? function (e, a) { return ue(e, "toString", { configurable: !0, enumerable: !1, value: (s = a, function () { return s }), writable: !0 }); var s } : pa, ga = Date.now; var ba = function (e) { var a = 0, s = 0; return function () { var t = ga(), o = 16 - (t - s); if (s = t, o > 0) { if (++a >= 800) return arguments[0] } else a = 0; return e.apply(void 0, arguments) } }(ya); function fa(e, a) { return ba(function (e, a, s) { return a = ha(void 0 === a ? e.length - 1 : a, 0), function () { for (var t = arguments, o = -1, n = ha(t.length - a, 0), r = Array(n); ++o < n;)r[o] = t[a + o]; o = -1; for (var i = Array(a + 1); ++o < a;)i[o] = t[o]; return i[a] = s(r), ma(e, this, i) } }(e, a, pa), e + "") } var ka, va = (ka = function (e, a, s) { ca(e, a, s) }, fa((function (e, s) { var t = -1, o = s.length, n = o > 1 ? s[o - 1] : void 0, r = o > 2 ? s[2] : void 0; for (n = ka.length > 3 && "function" == typeof n ? (o--, n) : void 0, r && function (e, s, t) { if (!G(t)) return !1; var o = a(s); return !!("number" == o ? Re(t) && ta(s, t.length) : "string" == o && s in t) && q(t[s], e) }(s[0], s[1], r) && (n = o < 3 ? void 0 : n, o = 1), e = Object(e); ++t < o;) { var i = s[t]; i && ka(e, i, t, n) } return e }))), wa = "gameState", xa = { boardState: null, evaluations: null, rowIndex: null, solution: null, gameStatus: null, lastPlayedTs: null, lastCompletedTs: null, restoringFromLocalStorage: null, hardMode: !1 }; function za() { var e = window.localStorage.getItem(wa) || JSON.stringify(xa); return JSON.parse(e) } function ja(e) { var a = za(); !function (e) { window.localStorage.setItem(wa, JSON.stringify(e)) }(va(a, e)) } var Sa = document.createElement("template"); Sa.innerHTML = '\n  <style>\n  .setting {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid var(--color-tone-4);\n    padding: 16px 0;\n  }\n\n  a, a:visited {\n    color: var(--color-tone-2);\n  }\n\n  .title {\n    font-size: 18px;\n  }\n  .text {\n    padding-right: 8px;\n  }\n  .description {\n    font-size: 12px;\n    color: var(--color-tone-2);\n  }\n\n  #footnote {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    padding: 16px;\n    color: var(--color-tone-2);\n    font-size: 12px;\n    text-align: right;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n\n  #privacy-policy,\n  #copyright {\n    text-align: left;\n  }\n\n  @media only screen and (min-device-width : 320px) and (max-device-width : 480px) {\n    .setting {\n      padding: 16px;\n    }\n  }\n\n  </style>\n  <div class="sections">\n    <section>\n      <div class="setting">\n        <div class="text">\n          <div class="title">Hard Mode</div>\n          <div class="description">Any revealed hints must be used in subsequent guesses</div>\n        </div>\n        <div class="control">\n          <game-switch id="hard-mode" name="hard-mode"></game-switch>\n        </div>\n      </div>\n      <div class="setting">\n        <div class="text">\n          <div class="title">Dark Theme</div>\n        </div>\n        <div class="control">\n          <game-switch id="dark-theme" name="dark-theme"></game-switch>\n        </div>\n      </div>\n      <div class="setting">\n        <div class="text">\n          <div class="title">Color Blind Mode</div>\n          <div class="description">High contrast colors</div>\n        </div>\n        <div class="control">\n          <game-switch id="color-blind-theme" name="color-blind-theme"></game-switch>\n        </div>\n      </div>\n    </section>\n\n    \n  </div>\n  <div id="footnote">\n    <div>\n      <a>Code editing by <a href="https://github.com/ymfyw/">ymfyw</a></a><br><a>Words and idea by <a href="https://www.reddit.com/user/rainitay/">u/rainitay</a></a></div>\n    <div>\n      <div id="puzzle-number"></div>\n    </div>\n  </div>\n'; var _a = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), n(p(e = a.call(this)), "gameApp", void 0), e.attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { var e, a = this; this.shadowRoot.appendChild(Sa.content.cloneNode(!0)), this.shadowRoot.querySelector("#puzzle-number").textContent = "#".concat(this.gameApp.dayOffset), this.shadowRoot.addEventListener("game-switch-change", (function (e) { e.stopPropagation(); var s = e.detail, t = s.name, o = s.checked, n = s.disabled; a.dispatchEvent(new CustomEvent("game-setting-change", { bubbles: !0, composed: !0, detail: { name: t, checked: o, disabled: n } })), a.render() })), this.render() } }, { key: "render", value: function () { var e = document.querySelector("body"); e.classList.contains("nightmode") && this.shadowRoot.querySelector("#dark-theme").setAttribute("checked", ""), e.classList.contains("colorblind") && this.shadowRoot.querySelector("#color-blind-theme").setAttribute("checked", ""); var a = za(); a.hardMode && this.shadowRoot.querySelector("#hard-mode").setAttribute("checked", ""), a.hardMode || "IN_PROGRESS" !== a.gameStatus || 0 === a.rowIndex || (this.shadowRoot.querySelector("#hard-mode").removeAttribute("checked"), this.shadowRoot.querySelector("#hard-mode").setAttribute("disabled", "")) } }]), t }(c(HTMLElement)); customElements.define("game-settings", _a); var qa = document.createElement("template"); qa.innerHTML = '\n  <style>\n    .toast {\n      position: relative;\n      margin: 16px;\n      background-color: var(--color-tone-1);\n      color: var(--color-tone-7);\n      padding: 16px;\n      border: none;\n      border-radius: 4px;\n      opacity: 1;\n      transition: opacity 300ms cubic-bezier(0.645, 0.045, 0.355, 1);\n      font-weight: 700;\n    }\n    .win {\n      background-color: var(--color-correct);\n      color: var(--tile-text-color);\n    }\n    .fade {\n      opacity: 0;\n    }\n  </style>\n  <div class="toast"></div>\n'; var Ea, Aa = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), n(p(e = a.call(this)), "_duration", void 0), e.attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(qa.content.cloneNode(!0)); var a = this.shadowRoot.querySelector(".toast"); a.textContent = this.getAttribute("text"), this._duration = this.getAttribute("duration") || 1e3, "Infinity" !== this._duration && setTimeout((function () { a.classList.add("fade") }), this._duration), a.addEventListener("transitionend", (function (a) { e.parentNode.removeChild(e) })) } }]), t }(c(HTMLElement)); function Ca() { dataLayer.push(arguments) } customElements.define("game-toast", Aa), window.dataLayer = window.dataLayer || [], Ca("js", new Date); Ca("config", "G-2SSGMHY3NP", { app_version: null === (Ea = window.wordle) || void 0 === Ea ? void 0 : Ea.hash, debug_mode: !1 }); var La = ['ABACA', 'ABACE', 'ABALE', 'ABATA', 'ABATE', 'ABATI', 'ABATU', 'ABAUA', 'ABCES', 'ABDIC', 'ABILA', 'ABILE', 'ABILI', 'ABJUR', 'ABNEG', 'ABOLI', 'ABONA', 'ABRAC', 'ABRAS', 'ABROG', 'ABTIE', 'ABTII', 'ABTIN', 'ABTIU', 'ABURC', 'ABURI', 'ABUZA', 'ACAJU', 'ACANA', 'ACANI', 'ACANT', 'ACARE', 'ACARI', 'ACASA', 'ACATA', 'ACATE', 'ACATI', 'ACCED', 'ACCES', 'ACCIZ', 'ACEEA', 'ACEIA', 'ACELA', 'ACELE', 'ACERA', 'ACERB', 'ACERE', 'ACERI', 'ACEST', 'ACHII', 'ACHIT', 'ACHIU', 'ACIDA', 'ACIDE', 'ACILA', 'ACILI', 'ACINE', 'ACIRA', 'ACIRE', 'ACIRI', 'ACIUA', 'ACIUI', 'ACIZI', 'ACLAM', 'ACNEE', 'ACOLO', 'ACONT', 'ACORD', 'ACQUA', 'ACREA', 'ACREI', 'ACRIA', 'ACRIE', 'ACRII', 'ACRIM', 'ACRIS', 'ACRIT', 'ACRIU', 'ACRUL', 'ACRUT', 'ACTIV', 'ACTOR', 'ACTUL', 'ACUMA', 'ACUSA', 'ACUSI', 'ACUTA', 'ACUTE', 'ACUTI', 'ACUZA', 'ACUZE', 'ACUZI', 'ADANC', 'ADAOG', 'ADAOS', 'ADAPA', 'ADAPE', 'ADAPI', 'ADAST', 'ADAUG', 'ADAUS', 'ADECA', 'ADEPT', 'ADERA', 'ADERE', 'ADERI', 'ADESE', 'ADIAI', 'ADIAM', 'ADIAT', 'ADIAU', 'ADICA', 'ADIEM', 'ADINS', 'ADMIR', 'ADMIS', 'ADMIT', 'ADNAT', 'ADOPT', 'ADORA', 'ADORE', 'ADORI', 'ADORM', 'ADUCA', 'ADUCE', 'ADUCI', 'ADUCT', 'ADULA', 'ADULT', 'ADUNA', 'ADUNE', 'ADUNI', 'ADUSA', 'ADUSE', 'ADUSI', 'ADVON', 'AEDUL', 'AEQUO', 'AERAI', 'AERAJ', 'AERAM', 'AERAT', 'AERAU', 'AEREZ', 'AEROB', 'AEROS', 'AERUL', 'AEZII', 'AFANA', 'AFARA', 'AFECT', 'AFGAN', 'AFIDA', 'AFIDE', 'AFIFA', 'AFIFE', 'AFIFI', 'AFINA', 'AFINE', 'AFINI', 'AFION', 'AFIPT', 'AFIRM', 'AFISA', 'AFISE', 'AFIXE', 'AFLAI', 'AFLAM', 'AFLAT', 'AFLAU', 'AFLUI', 'AFLUX', 'AFONA', 'AFONE', 'AFONI', 'AFTEI', 'AFTOR', 'AFTOS', 'AFUMA', 'AFUME', 'AFUMI', 'AFUND', 'AFURC', 'AGALE', 'AGAPA', 'AGAPE', 'AGASA', 'AGATA', 'AGATE', 'AGATI', 'AGAUA', 'AGAVA', 'AGAVE', 'AGENT', 'AGERA', 'AGERE', 'AGERI', 'AGEST', 'AGHII', 'AGIEI', 'AGILA', 'AGILE', 'AGILI', 'AGITA', 'AGITE', 'AGITI', 'AGIUL', 'AGNAT', 'AGNET', 'AGONA', 'AGONE', 'AGORA', 'AGORE', 'AGRAI', 'AGRAR', 'AGREA', 'AGRIS', 'AGUDA', 'AGUDE', 'AGUZI', 'AHEII', 'AHEUL', 'AHTIA', 'AHTIE', 'AHTUL', 'AHURI', 'AICEA', 'AIDAM', 'AIDEM', 'AIEPT', 'AIEST', 'AIEVE', 'AILOR', 'AIORI', 'AISOR', 'AISTA', 'AISTE', 'AISTI', 'AIURA', 'AIURE', 'AIURI', 'AJUNA', 'AJUNG', 'AJUNS', 'AJURA', 'AJUTA', 'AJUTE', 'AJUTI', 'AKANI', 'ALACE', 'ALAIT', 'ALAMA', 'ALAME', 'ALAMI', 'ALANA', 'ALANE', 'ALANI', 'ALAUN', 'ALBEA', 'ALBEI', 'ALBET', 'ALBIA', 'ALBIE', 'ALBII', 'ALBIM', 'ALBIT', 'ALBIU', 'ALBUI', 'ALBUL', 'ALBUM', 'ALBUS', 'ALBUT', 'ALCAN', 'ALCOV', 'ALDAN', 'ALDIN', 'ALDOL', 'ALDUI', 'ALEAN', 'ALEEA', 'ALEGA', 'ALEGE', 'ALEGI', 'ALEIA', 'ALEII', 'ALELA', 'ALELE', 'ALENA', 'ALENE', 'ALERG', 'ALERT', 'ALESE', 'ALESI', 'ALEZA', 'ALEZE', 'ALGEI', 'ALGIA', 'ALGID', 'ALGIE', 'ALGII', 'ALGOL', 'ALIAI', 'ALIAJ', 'ALIAM', 'ALIAS', 'ALIAT', 'ALIAU', 'ALIBI', 'ALICA', 'ALICE', 'ALICI', 'ALIEM', 'ALIEZ', 'ALINA', 'ALINE', 'ALINI', 'ALINT', 'ALIOR', 'ALIPI', 'ALMAR', 'ALMEE', 'ALMEI', 'ALOCA', 'ALOCE', 'ALOCI', 'ALOEA', 'ALOEI', 'ALORA', 'ALOUL', 'ALPIN', 'ALTAR', 'ALTEI', 'ALTER', 'ALTII', 'ALTOI', 'ALTOR', 'ALTUI', 'ALTUL', 'ALUAT', 'ALUIA', 'ALUNA', 'ALUNE', 'ALUNG', 'ALUNI', 'ALURA', 'ALURI', 'AMAGI', 'AMANA', 'AMANE', 'AMANI', 'AMANT', 'AMARA', 'AMARE', 'AMARI', 'AMBAR', 'AMBII', 'AMBRA', 'AMBRE', 'AMENT', 'AMETI', 'AMHAR', 'AMIAZ', 'AMIBA', 'AMIBE', 'AMICA', 'AMICE', 'AMICI', 'AMIDA', 'AMIDE', 'AMIEZ', 'AMILI', 'AMINA', 'AMINE', 'AMINO', 'AMNAR', 'AMORF', 'AMPER', 'AMPEX', 'AMPLA', 'AMPLE', 'AMPLI', 'AMPLU', 'AMURG', 'AMUSA', 'AMUSE', 'AMUSI', 'AMUTA', 'AMUTE', 'AMUTI', 'AMUZA', 'AMUZE', 'AMUZI', 'AMVON', 'ANALA', 'ANALE', 'ANALI', 'ANAUA', 'ANCIA', 'ANCIE', 'ANCII', 'ANDIN', 'ANEXA', 'ANEXE', 'ANGLI', 'ANGOR', 'ANGRO', 'ANIMA', 'ANIME', 'ANIMI', 'ANINA', 'ANINE', 'ANINI', 'ANION', 'ANOST', 'ANOZI', 'ANSEI', 'ANSOA', 'ANTAL', 'ANTEI', 'ANTET', 'ANTIC', 'ANTUM', 'ANUAL', 'ANUAR', 'ANULA', 'ANUME', 'ANUNT', 'ANURA', 'ANURE', 'AOLEO', 'AOLEU', 'AORTA', 'AORTE', 'APARA', 'APARE', 'APARI', 'APARU', 'APASA', 'APASI', 'APELA', 'APELE', 'APERE', 'APERI', 'APESE', 'APESI', 'APIDA', 'APIDE', 'APIOL', 'APLEC', 'APLIC', 'APLIT', 'APNEE', 'APODA', 'APODE', 'APOLO', 'APORT', 'APOSI', 'APOZI', 'APRET', 'APRIG', 'APRIL', 'APROB', 'APROD', 'APTEI', 'APTER', 'APTII', 'APTUL', 'APUCA', 'APUCE', 'APUCI', 'APUIE', 'APULI', 'APUNA', 'APUNE', 'APUPA', 'APUPE', 'APUSA', 'APUSE', 'APUSI', 'ARABA', 'ARABE', 'ARABI', 'ARACI', 'ARAMA', 'ARAME', 'ARAMI', 'ARAND', 'ARAPI', 'ARARA', 'ARARE', 'ARARI', 'ARASE', 'ARASI', 'ARATA', 'ARATE', 'ARATI', 'ARBIE', 'ARBIU', 'ARBOR', 'ARBUZ', 'ARCAN', 'ARCAS', 'ARCAT', 'ARCEI', 'ARCER', 'ARCUI', 'ARCUL', 'ARCUS', 'ARDEA', 'ARDEI', 'ARDEM', 'ARDIC', 'ARDIL', 'AREAL', 'ARECI', 'AREIC', 'ARENA', 'ARENE', 'AREST', 'ARETA', 'ARETE', 'ARETI', 'ARFEI', 'ARGAT', 'ARGEA', 'ARGON', 'ARGOS', 'ARGOU', 'ARGUS', 'ARHAR', 'ARHON', 'ARIAN', 'ARICI', 'ARIDA', 'ARIDE', 'ARIEI', 'ARILE', 'ARILI', 'ARIMA', 'ARINA', 'ARINE', 'ARINI', 'ARIPA', 'ARIPI', 'ARIZI', 'ARMAI', 'ARMAM', 'ARMAN', 'ARMAR', 'ARMAS', 'ARMAT', 'ARMAU', 'ARMEI', 'ARMEZ', 'ARMIA', 'ARMIE', 'ARMII', 'ARMUL', 'ARNEU', 'AROGA', 'AROGE', 'AROGI', 'AROMA', 'AROME', 'AROMI', 'ARPEI', 'ARSEI', 'ARSEN', 'ARSIC', 'ARSII', 'ARSIN', 'ARSUL', 'ARTAG', 'ARTAR', 'ARTEI', 'ARTEL', 'ARTOS', 'ARUNC', 'ARZOI', 'ARZOS', 'ARZUL', 'ASABI', 'ASALT', 'ASANA', 'ASARA', 'ASASI', 'ASAZA', 'ASCEI', 'ASCET', 'ASCUT', 'ASECA', 'ASECE', 'ASECI', 'ASEZA', 'ASEZE', 'ASEZI', 'ASIAT', 'ASINI', 'ASIST', 'ASIZA', 'ASIZE', 'ASMUT', 'ASPIC', 'ASPIR', 'ASPRA', 'ASPRE', 'ASPRI', 'ASPRU', 'ASSAI', 'ASTEA', 'ASTEI', 'ASTIA', 'ASTMA', 'ASTME', 'ASTOR', 'ASTRE', 'ASTRI', 'ASTRU', 'ASTUI', 'ASTUP', 'ASUDA', 'ASUDE', 'ASUMA', 'ASUME', 'ASUMI', 'ASUZI', 'ATACA', 'ATACE', 'ATACI', 'ATALE', 'ATARE', 'ATARI', 'ATARN', 'ATASA', 'ATASE', 'ATATA', 'ATATE', 'ATATI', 'ATAUA', 'ATEEA', 'ATEEI', 'ATEII', 'ATELA', 'ATELE', 'ATENT', 'ATEST', 'ATEUL', 'ATICA', 'ATICE', 'ATICI', 'ATINA', 'ATINE', 'ATING', 'ATINS', 'ATINU', 'ATIPI', 'ATITA', 'ATITE', 'ATITI', 'ATLAS', 'ATLAZ', 'ATLET', 'ATOLI', 'ATOMA', 'ATOME', 'ATOMI', 'ATONA', 'ATONE', 'ATONI', 'ATOSI', 'ATRAG', 'ATRAS', 'ATRII', 'ATRIU', 'ATUUL', 'AUDIA', 'AUDIE', 'AUDIO', 'AUDIT', 'AUGUR', 'AUIAI', 'AUIAM', 'AUIAU', 'AUIND', 'AUIRA', 'AUIRE', 'AUIRI', 'AUISE', 'AUISI', 'AUITI', 'AULEI', 'AULEU', 'AULIC', 'AULUL', 'AURAR', 'AUREA', 'AUREI', 'AUREL', 'AURIA', 'AURIE', 'AURII', 'AURIM', 'AURIT', 'AURIU', 'AUROS', 'AURUL', 'AUSEI', 'AUSEL', 'AUTOR', 'AUTUL', 'AUZEA', 'AUZII', 'AUZIM', 'AUZIT', 'AUZUL', 'AVAET', 'AVAMA', 'AVAME', 'AVAMI', 'AVANA', 'AVAND', 'AVANE', 'AVANI', 'AVANS', 'AVANT', 'AVARA', 'AVARE', 'AVARI', 'AVATI', 'AVEAI', 'AVEAM', 'AVEAU', 'AVELE', 'AVENA', 'AVENE', 'AVERE', 'AVERI', 'AVERS', 'AVETI', 'AVIAR', 'AVIDA', 'AVIDE', 'AVION', 'AVIVA', 'AVIZA', 'AVIZE', 'AVIZI', 'AVIZO', 'AVLIA', 'AVLIE', 'AVLII', 'AVORT', 'AVRAM', 'AVURA', 'AVUSE', 'AVUSI', 'AVUTA', 'AVUTE', 'AVUTI', 'AXAND', 'AXARA', 'AXARE', 'AXARI', 'AXASE', 'AXASI', 'AXATA', 'AXATE', 'AXATI', 'AXELE', 'AXEZE', 'AXEZI', 'AXIAL', 'AXILA', 'AXILE', 'AXION', 'AXONI', 'AXURI', 'AZERA', 'AZERE', 'AZERI', 'AZIDA', 'AZIDE', 'AZIMA', 'AZIME', 'AZOIC', 'AZTEC', 'AZURA', 'AZURI', 'BABAC', 'BABAN', 'BABAR', 'BABAU', 'BABEI', 'BABOI', 'BACAI', 'BACAL', 'BACAN', 'BACAU', 'BACEI', 'BACII', 'BACIL', 'BACIT', 'BACON', 'BACUL', 'BADEA', 'BADEI', 'BADIA', 'BADIC', 'BADIE', 'BADII', 'BAFTA', 'BAFTE', 'BAGAI', 'BAGAJ', 'BAGAM', 'BAGAT', 'BAGAU', 'BAGEA', 'BAHIC', 'BAHLA', 'BAHLE', 'BAHLI', 'BAHNA', 'BAHNE', 'BAHTI', 'BAIAI', 'BAIAM', 'BAIAN', 'BAIAS', 'BAIAT', 'BAIAU', 'BAIER', 'BAIES', 'BAIET', 'BAILE', 'BAIND', 'BAIRA', 'BAIRE', 'BAIRI', 'BAISE', 'BAISI', 'BAITA', 'BAITE', 'BAITI', 'BAIUL', 'BALAC', 'BALAI', 'BALAN', 'BALAS', 'BALCI', 'BALEI', 'BALET', 'BALIA', 'BALIC', 'BALIE', 'BALII', 'BALON', 'BALOS', 'BALOT', 'BALSA', 'BALSE', 'BALTA', 'BALTI', 'BALUL', 'BALUT', 'BAMEI', 'BANAL', 'BANAN', 'BANAT', 'BANCA', 'BANCI', 'BANCO', 'BANDA', 'BANDE', 'BANEA', 'BANEI', 'BANET', 'BANIA', 'BANIE', 'BANII', 'BANIM', 'BANIT', 'BANJO', 'BANOS', 'BANTA', 'BANTU', 'BANUI', 'BANUL', 'BANUT', 'BARAI', 'BARAJ', 'BARAM', 'BARAT', 'BARAU', 'BARBA', 'BARBI', 'BARCA', 'BARCI', 'BARDA', 'BAREI', 'BAREJ', 'BAREM', 'BAREZ', 'BARFA', 'BARFE', 'BARFI', 'BARIA', 'BARIC', 'BARIE', 'BARII', 'BARIL', 'BARIM', 'BARIS', 'BARIU', 'BARIZ', 'BARJA', 'BARJE', 'BARNA', 'BARNE', 'BARNI', 'BAROC', 'BARON', 'BAROS', 'BAROU', 'BARSA', 'BARSE', 'BARUL', 'BARZA', 'BARZI', 'BASCA', 'BASCE', 'BASCI', 'BASET', 'BASIC', 'BASII', 'BASMA', 'BASME', 'BASNA', 'BASNE', 'BASNI', 'BASON', 'BASTA', 'BASTE', 'BASTI', 'BASUL', 'BATAI', 'BATAJ', 'BATAL', 'BATAN', 'BATAR', 'BATAT', 'BATAV', 'BATCA', 'BATCE', 'BATCI', 'BATEA', 'BATEI', 'BATEL', 'BATEM', 'BATIC', 'BATII', 'BATIR', 'BATIU', 'BATOC', 'BATOG', 'BATON', 'BATOS', 'BATUI', 'BATUL', 'BATUT', 'BAUNE', 'BAUNI', 'BAURA', 'BAUSE', 'BAUSI', 'BAUTA', 'BAUTE', 'BAUTI', 'BAUZI', 'BAVEI', 'BAXUL', 'BAZAI', 'BAZAL', 'BAZAM', 'BAZAR', 'BAZAT', 'BAZAU', 'BAZEI', 'BAZEZ', 'BAZIC', 'BAZIN', 'BAZOI', 'BAZON', 'BAZZZ', 'BEATA', 'BEATI', 'BECAR', 'BECER', 'BECHI', 'BECII', 'BECUL', 'BEDEI', 'BEHAI', 'BEICA', 'BEICI', 'BEIUL', 'BEJUL', 'BELEA', 'BELGI', 'BELII', 'BELIM', 'BELIS', 'BELIT', 'BELUL', 'BEMOL', 'BENEI', 'BENGA', 'BENIS', 'BENTE', 'BENTI', 'BENZI', 'BERAR', 'BERAT', 'BERCE', 'BERCI', 'BEREA', 'BERET', 'BERII', 'BERIL', 'BERMA', 'BERME', 'BERNA', 'BERNE', 'BERTA', 'BERTE', 'BERZE', 'BESIC', 'BESSI', 'BETEI', 'BETEL', 'BETIA', 'BETIE', 'BETII', 'BETIV', 'BETON', 'BEUCA', 'BEUCI', 'BEUTA', 'BEUTE', 'BEZEA', 'BEZNA', 'BEZNE', 'BIATA', 'BIBAN', 'BIBER', 'BIBIC', 'BIBIL', 'BICAS', 'BIDEU', 'BIDON', 'BIELA', 'BIELE', 'BIETE', 'BIETI', 'BIEUL', 'BIFAI', 'BIFAM', 'BIFAT', 'BIFAU', 'BIFEI', 'BIFEZ', 'BIFID', 'BIFOR', 'BIGAM', 'BIGEI', 'BIGII', 'BIGOT', 'BIGUL', 'BIHUN', 'BIJOI', 'BIKER', 'BILEI', 'BILET', 'BILON', 'BIMAN', 'BINAR', 'BINIS', 'BINOM', 'BINTA', 'BINTE', 'BIOTI', 'BIPED', 'BIPUL', 'BIRAI', 'BIRAR', 'BIRAU', 'BIRIS', 'BIRJA', 'BIRJE', 'BIROU', 'BIRUI', 'BIRUL', 'BISAI', 'BISAM', 'BISAT', 'BISAU', 'BISEL', 'BISEZ', 'BISUL', 'BITEI', 'BITER', 'BITII', 'BITUL', 'BITUM', 'BIUTA', 'BIUTE', 'BIVOL', 'BIZAM', 'BIZAR', 'BIZET', 'BIZON', 'BIZUI', 'BLAGA', 'BLAGI', 'BLAMA', 'BLANA', 'BLANC', 'BLAND', 'BLANI', 'BLAZA', 'BLAZE', 'BLEAH', 'BLEAU', 'BLEAV', 'BLEGE', 'BLEGI', 'BLEOT', 'BLIDE', 'BLIMP', 'BLITZ', 'BLOCA', 'BLOND', 'BLUCA', 'BLUCI', 'BLUES', 'BLUFF', 'BLUGI', 'BLUZA', 'BLUZE', 'BOABA', 'BOABE', 'BOACA', 'BOALA', 'BOALE', 'BOARD', 'BOARE', 'BOARI', 'BOASE', 'BOATA', 'BOATE', 'BOBEA', 'BOBER', 'BOBII', 'BOBIM', 'BOBIT', 'BOBOC', 'BOBOT', 'BOBUL', 'BOCAL', 'BOCAN', 'BOCEA', 'BOCET', 'BOCII', 'BOCIM', 'BOCIT', 'BOCNA', 'BOCSA', 'BOCSE', 'BOCSI', 'BOCUL', 'BOEMA', 'BOEME', 'BOEMI', 'BOEUF', 'BOGAT', 'BOGZA', 'BOGZE', 'BOIAI', 'BOIAM', 'BOIAU', 'BOIER', 'BOIND', 'BOIRA', 'BOIRE', 'BOIRI', 'BOISE', 'BOISI', 'BOITA', 'BOITE', 'BOITI', 'BOIUL', 'BOJII', 'BOJOC', 'BOJOG', 'BOLDI', 'BOLDO', 'BOLEA', 'BOLFA', 'BOLFE', 'BOLID', 'BOLII', 'BOLIM', 'BOLIT', 'BOLTA', 'BOLTI', 'BOLUL', 'BOLUS', 'BOMBA', 'BOMBE', 'BONCA', 'BONCI', 'BONEI', 'BONOM', 'BONTI', 'BONUL', 'BONUS', 'BONZI', 'BORAI', 'BORAM', 'BORAN', 'BORAT', 'BORAU', 'BORAX', 'BORDO', 'BORIC', 'BORII', 'BORNA', 'BORNE', 'BOROD', 'BORSI', 'BORTA', 'BORTE', 'BORTI', 'BORUL', 'BORZA', 'BORZE', 'BOSAJ', 'BOSAR', 'BOSEI', 'BOSII', 'BOSMA', 'BOSON', 'BOSUL', 'BOTAU', 'BOTCA', 'BOTCE', 'BOTEA', 'BOTEI', 'BOTEZ', 'BOTII', 'BOTIM', 'BOTIT', 'BOTOG', 'BOTOS', 'BOTUL', 'BOUAR', 'BOURI', 'BOUTI', 'BOVID', 'BOVIN', 'BOXAI', 'BOXAM', 'BOXAT', 'BOXAU', 'BOXEI', 'BOXER', 'BOXEZ', 'BOXUL', 'BOYUL', 'BOZIA', 'BOZIE', 'BOZII', 'BOZUL', 'BRACA', 'BRACI', 'BRADT', 'BRAGA', 'BRAGI', 'BRAHA', 'BRAHE', 'BRAIE', 'BRAIN', 'BRAMA', 'BRAME', 'BRANA', 'BRAND', 'BRANE', 'BRANT', 'BRATE', 'BRAUL', 'BRAVA', 'BRAVE', 'BRAVI', 'BRAVO', 'BRAZI', 'BREAK', 'BREAZ', 'BREBI', 'BREII', 'BREJI', 'BRESA', 'BRESE', 'BREVA', 'BREVE', 'BREZA', 'BREZE', 'BRIAI', 'BRIAM', 'BRIAT', 'BRIAU', 'BRICE', 'BRICI', 'BRIDA', 'BRIDE', 'BRIEI', 'BRIEM', 'BRIEZ', 'BRIND', 'BRIZA', 'BRIZE', 'BRODA', 'BRODI', 'BRONZ', 'BROSA', 'BROSE', 'BRUFT', 'BRUIA', 'BRUIE', 'BRUMA', 'BRUME', 'BRUNA', 'BRUNE', 'BRUNI', 'BRUSC', 'BRUSI', 'BRUTA', 'BRUTE', 'BRUTI', 'BRUTO', 'BUBAL', 'BUBAT', 'BUBEI', 'BUBOI', 'BUBON', 'BUBOS', 'BUBUI', 'BUCAL', 'BUCAR', 'BUCEA', 'BUCHE', 'BUCHI', 'BUCII', 'BUCIN', 'BUCLA', 'BUCLE', 'BUCSA', 'BUCSE', 'BUCSI', 'BUCUL', 'BUCUR', 'BUDAC', 'BUDAI', 'BUDAM', 'BUDAT', 'BUDAU', 'BUDEI', 'BUDEZ', 'BUDUI', 'BUDUR', 'BUFAN', 'BUFEI', 'BUFET', 'BUFEU', 'BUFII', 'BUFNA', 'BUFNE', 'BUFNI', 'BUFON', 'BUFUL', 'BUGED', 'BUGET', 'BUGLA', 'BUGLE', 'BUHAI', 'BUHAS', 'BUHAV', 'BUHEI', 'BUHNA', 'BUHNE', 'BUHOS', 'BUHUL', 'BUHUR', 'BUIAC', 'BUIAI', 'BUIAM', 'BUIAU', 'BUICI', 'BUIND', 'BUIRA', 'BUIRE', 'BUIRI', 'BUISE', 'BUISI', 'BUITI', 'BUJDA', 'BUJDE', 'BUJDI', 'BUJIA', 'BUJIE', 'BUJII', 'BUJOR', 'BULAT', 'BULBI', 'BULCA', 'BULCI', 'BULEI', 'BULET', 'BULIN', 'BULON', 'BULUC', 'BULZI', 'BUMBI', 'BUMUL', 'BUNDA', 'BUNDE', 'BUNEI', 'BUNEL', 'BUNIC', 'BUNII', 'BUNUL', 'BUNUT', 'BURAI', 'BURAJ', 'BURAM', 'BURAT', 'BURAU', 'BURBA', 'BURBE', 'BURCA', 'BURCI', 'BUREI', 'BURET', 'BUREZ', 'BURIC', 'BURIE', 'BURII', 'BURIU', 'BURSA', 'BURSE', 'BURTA', 'BURTI', 'BURUL', 'BUSEA', 'BUSEI', 'BUSEL', 'BUSEU', 'BUSII', 'BUSIM', 'BUSIT', 'BUSON', 'BUSTA', 'BUSUL', 'BUTAC', 'BUTAN', 'BUTAR', 'BUTAS', 'BUTCA', 'BUTCI', 'BUTEA', 'BUTIA', 'BUTIC', 'BUTIE', 'BUTII', 'BUTIL', 'BUTOI', 'BUTON', 'BUTUC', 'BUTUL', 'BUTUR', 'BUZAR', 'BUZAT', 'BUZAU', 'BUZEI', 'BUZER', 'BUZII', 'BUZNA', 'BUZNI', 'BUZOI', 'BYTII', 'BYTUL', 'CABAZ', 'CABLA', 'CABLU', 'CABRA', 'CABUL', 'CACAO', 'CACIC', 'CACOM', 'CADEA', 'CADEM', 'CADET', 'CADII', 'CADIM', 'CADIT', 'CADIU', 'CADOU', 'CADRA', 'CADRE', 'CADRU', 'CADUC', 'CADUS', 'CAFAS', 'CAFEA', 'CAFER', 'CAFRI', 'CAFRU', 'CAFTI', 'CAHLA', 'CAHLE', 'CAIAC', 'CAIAI', 'CAIAM', 'CAIAU', 'CAICE', 'CAIER', 'CAIET', 'CAILE', 'CAINA', 'CAIND', 'CAINE', 'CAINI', 'CAIRA', 'CAIRE', 'CAIRI', 'CAISA', 'CAISE', 'CAISI', 'CAITA', 'CAITE', 'CAITI', 'CAIZI', 'CALAI', 'CALAJ', 'CALAM', 'CALAO', 'CALAT', 'CALAU', 'CALCA', 'CALCE', 'CALCI', 'CALDA', 'CALDE', 'CALEA', 'CALEI', 'CALEM', 'CALEZ', 'CALFA', 'CALFE', 'CALIC', 'CALIF', 'CALII', 'CALIM', 'CALIN', 'CALIT', 'CALMA', 'CALME', 'CALMI', 'CALOS', 'CALPA', 'CALPE', 'CALPI', 'CALTI', 'CALUL', 'CALUP', 'CALUS', 'CALUT', 'CALZI', 'CAMEE', 'CAMEI', 'CAMIN', 'CAMPA', 'CAMPI', 'CANAF', 'CANAL', 'CANAR', 'CANAT', 'CANCI', 'CANEA', 'CANEI', 'CANER', 'CANGE', 'CANGI', 'CANID', 'CANII', 'CANIM', 'CANIN', 'CANIS', 'CANIT', 'CANOE', 'CANON', 'CANTA', 'CANTE', 'CANTI', 'CANTO', 'CAPAC', 'CAPAI', 'CAPAN', 'CAPAT', 'CAPAU', 'CAPEI', 'CAPER', 'CAPES', 'CAPIA', 'CAPIE', 'CAPII', 'CAPIU', 'CAPOC', 'CAPON', 'CAPOS', 'CAPOT', 'CAPRA', 'CAPRE', 'CAPSA', 'CAPSE', 'CAPTA', 'CAPUI', 'CAPUL', 'CAPUS', 'CARAB', 'CARAI', 'CARAM', 'CARAS', 'CARAT', 'CARAU', 'CARCA', 'CARDA', 'CARDE', 'CAREA', 'CAREI', 'CARET', 'CAREU', 'CARIA', 'CARIB', 'CARIC', 'CARIE', 'CARII', 'CARJA', 'CARJE', 'CARJI', 'CARMA', 'CARME', 'CARMI', 'CARNA', 'CARNE', 'CARNI', 'CAROR', 'CAROU', 'CARPA', 'CARPE', 'CARPI', 'CARST', 'CARTA', 'CARTE', 'CARTI', 'CARUB', 'CARUI', 'CARUL', 'CARUS', 'CARUT', 'CASAI', 'CASAM', 'CASAP', 'CASAT', 'CASAU', 'CASCA', 'CASEI', 'CASET', 'CASEU', 'CASEZ', 'CASII', 'CASIU', 'CASLA', 'CASLE', 'CASOI', 'CASTA', 'CASTE', 'CASTI', 'CASUL', 'CASUT', 'CATAI', 'CATAM', 'CATAR', 'CATAT', 'CATAU', 'CATCH', 'CATEA', 'CATEI', 'CATEL', 'CATIA', 'CATIE', 'CATII', 'CATOD', 'CATOR', 'CATRA', 'CATRE', 'CATUI', 'CATUL', 'CATUN', 'CATUR', 'CATVA', 'CAUCE', 'CAUEI', 'CAULA', 'CAULE', 'CAUNI', 'CAUSA', 'CAUSE', 'CAUTA', 'CAUTE', 'CAUTI', 'CAUZA', 'CAUZE', 'CAVAF', 'CAVAL', 'CAVAS', 'CAVEI', 'CAVII', 'CAVOU', 'CAVUL', 'CAZAC', 'CAZAI', 'CAZAM', 'CAZAN', 'CAZAT', 'CAZAU', 'CAZEZ', 'CAZIC', 'CAZII', 'CAZMA', 'CAZNA', 'CAZNE', 'CAZNI', 'CAZON', 'CAZUI', 'CAZUL', 'CAZUT', 'CEAFA', 'CEAIR', 'CEALA', 'CEAPA', 'CEARA', 'CEATA', 'CEAUN', 'CEAUS', 'CECAL', 'CECEN', 'CECUL', 'CECUM', 'CEDAI', 'CEDAM', 'CEDAT', 'CEDAU', 'CEDEZ', 'CEDRI', 'CEDRU', 'CEFAR', 'CEFEI', 'CEGAI', 'CEGII', 'CEHAI', 'CEHEI', 'CEHII', 'CEHUL', 'CELAR', 'CELEA', 'CELEI', 'CELLA', 'CELLE', 'CELLO', 'CELOM', 'CELOR', 'CELTA', 'CELTE', 'CELTI', 'CELUI', 'CENTI', 'CENUR', 'CEPAI', 'CEPCI', 'CEPEI', 'CEPSE', 'CEPTE', 'CEPUI', 'CEPUL', 'CERAT', 'CERBI', 'CERCA', 'CERCE', 'CERCI', 'CEREA', 'CEREM', 'CERGA', 'CERGI', 'CERII', 'CERIT', 'CERIU', 'CERNE', 'CERNI', 'CERNU', 'CEROS', 'CERSI', 'CERTA', 'CERTE', 'CERTI', 'CERUI', 'CERUL', 'CERUT', 'CERVU', 'CESIU', 'CESTA', 'CESTE', 'CESTI', 'CETAS', 'CETEA', 'CETEI', 'CETER', 'CETET', 'CETII', 'CETIM', 'CETIT', 'CETOS', 'CEUCA', 'CEUCE', 'CEUCI', 'CEZAR', 'CHEAG', 'CHEIA', 'CHEIE', 'CHEII', 'CHELE', 'CHELI', 'CHEMA', 'CHEME', 'CHEMI', 'CHERA', 'CHERE', 'CHETA', 'CHETE', 'CHEUL', 'CHIAR', 'CHIAU', 'CHIBZ', 'CHICA', 'CHICI', 'CHIDA', 'CHIDE', 'CHILA', 'CHILE', 'CHIOR', 'CHIOT', 'CHIPS', 'CHIRA', 'CHIRE', 'CHIST', 'CHITA', 'CHITE', 'CHITI', 'CHIUI', 'CHIUL', 'CHIUP', 'CHULO', 'CICAR', 'CICLI', 'CICLU', 'CIDRU', 'CIFRA', 'CIFRE', 'CIFRU', 'CIGEI', 'CIHAI', 'CILEN', 'CILII', 'CILUL', 'CIMEI', 'CIMEN', 'CINAI', 'CINAM', 'CINAS', 'CINAT', 'CINAU', 'CINCI', 'CINEI', 'CINEL', 'CINEZ', 'CINIC', 'CINUL', 'CIOBI', 'CIOMP', 'CIONC', 'CIONT', 'CIORI', 'CIORT', 'CIPCA', 'CIPCI', 'CIPIC', 'CIPUL', 'CIRAC', 'CIRCA', 'CIRCE', 'CIRCI', 'CIRES', 'CIRII', 'CIRIP', 'CIRIS', 'CIRTA', 'CIRTE', 'CIRUL', 'CIRUS', 'CISLA', 'CISLE', 'CISTA', 'CISTE', 'CITAI', 'CITAM', 'CITAT', 'CITAU', 'CITEA', 'CITET', 'CITEZ', 'CITII', 'CITIM', 'CITIT', 'CITRO', 'CITUL', 'CIUCI', 'CIUDA', 'CIUDE', 'CIUDI', 'CIUFI', 'CIUIN', 'CIULA', 'CIULE', 'CIULI', 'CIUMA', 'CIUME', 'CIUMP', 'CIUNG', 'CIUNT', 'CIUPA', 'CIUPE', 'CIUPI', 'CIUTA', 'CIUTE', 'CIUTI', 'CIVIC', 'CIVIL', 'CIVIT', 'CIZMA', 'CIZME', 'CLACA', 'CLACI', 'CLADA', 'CLADE', 'CLADI', 'CLAIA', 'CLAIE', 'CLAII', 'CLAIM', 'CLAIT', 'CLAMA', 'CLAME', 'CLAMP', 'CLANC', 'CLANT', 'CLAPA', 'CLAPC', 'CLAPE', 'CLARA', 'CLARE', 'CLARI', 'CLASA', 'CLASE', 'CLATI', 'CLAUN', 'CLAZI', 'CLEAN', 'CLEMA', 'CLEME', 'CLENI', 'CLICA', 'CLICI', 'CLIMA', 'CLIME', 'CLINA', 'CLINC', 'CLINE', 'CLING', 'CLINI', 'CLINT', 'CLIPA', 'CLIPE', 'CLIPI', 'CLIPS', 'CLISA', 'CLISE', 'CLIVA', 'CLOCA', 'CLOCI', 'CLOMB', 'CLONA', 'CLONC', 'CLONE', 'CLONT', 'CLOTA', 'CLOTE', 'CLOVN', 'CLOWN', 'CLUPA', 'CLUPE', 'CLUUL', 'CNEAZ', 'CNEJI', 'CNEZI', 'COACA', 'COACE', 'COADA', 'COADE', 'COAFA', 'COAFE', 'COAJA', 'COALA', 'COALE', 'COAMA', 'COAME', 'COANA', 'COANE', 'COASA', 'COASE', 'COATE', 'COBAI', 'COBEA', 'COBEI', 'COBII', 'COBIM', 'COBIT', 'COBOL', 'COBOR', 'COBRA', 'COBRE', 'COBUR', 'COBUZ', 'COBZA', 'COBZE', 'COCAI', 'COCEA', 'COCIA', 'COCIE', 'COCII', 'COCIS', 'COCLI', 'COCON', 'COCOR', 'COCOS', 'COCOT', 'COCUL', 'CODAI', 'CODAJ', 'CODAL', 'CODAM', 'CODAN', 'CODAS', 'CODAT', 'CODAU', 'CODEA', 'CODEI', 'CODEX', 'CODEZ', 'CODIA', 'CODIE', 'CODII', 'CODIM', 'CODIT', 'CODOS', 'CODRI', 'CODRU', 'CODUL', 'COFEI', 'COFRA', 'COIOT', 'COJEA', 'COJII', 'COJIM', 'COJIT', 'COJOC', 'COLAC', 'COLAI', 'COLAJ', 'COLAM', 'COLAN', 'COLAT', 'COLAU', 'COLEA', 'COLEG', 'COLEI', 'COLET', 'COLEZ', 'COLIA', 'COLIC', 'COLIE', 'COLII', 'COLIN', 'COLIR', 'COLNA', 'COLNE', 'COLON', 'COLOR', 'COLOS', 'COLTI', 'COLUL', 'COLUN', 'COMAT', 'COMBI', 'COMBO', 'COMEI', 'COMET', 'COMIC', 'COMIS', 'COMIT', 'COMOD', 'COMOR', 'COMUN', 'COMUT', 'CONAC', 'CONAS', 'CONCA', 'CONCI', 'CONDU', 'CONET', 'CONEX', 'CONGA', 'CONIC', 'CONTA', 'CONTE', 'CONTI', 'CONUL', 'COPAC', 'COPAI', 'COPAL', 'COPAN', 'COPCA', 'COPCE', 'COPCI', 'COPIA', 'COPIE', 'COPII', 'COPIL', 'COPOI', 'COPRA', 'COPRE', 'COPTA', 'COPTE', 'COPTI', 'COPUL', 'CORAC', 'CORAI', 'CORAJ', 'CORAL', 'CORAN', 'CORBI', 'CORCI', 'COREE', 'COREI', 'CORET', 'COREU', 'CORFA', 'CORFE', 'CORII', 'CORLA', 'CORLE', 'CORLI', 'CORNI', 'COROI', 'CORPI', 'CORSO', 'CORUL', 'CORUP', 'CORZI', 'COSAC', 'COSAR', 'COSAS', 'COSEA', 'COSEI', 'COSII', 'COSIM', 'COSIT', 'COSOI', 'COSOR', 'COSTA', 'COSTE', 'COSUL', 'COTAI', 'COTAM', 'COTAR', 'COTAT', 'COTAU', 'COTCA', 'COTCE', 'COTCI', 'COTEA', 'COTEI', 'COTET', 'COTEZ', 'COTII', 'COTIL', 'COTIM', 'COTIS', 'COTIT', 'COTOC', 'COTOI', 'COTON', 'COTOR', 'COTUL', 'COVIT', 'COVOR', 'COVRU', 'COXAL', 'COXEI', 'COZII', 'COZUL', 'CRABI', 'CRACA', 'CRACI', 'CRAIA', 'CRAIE', 'CRAII', 'CRAMA', 'CRAME', 'CRANE', 'CRANG', 'CRANT', 'CRAPA', 'CRAPE', 'CRAPI', 'CRASA', 'CRASC', 'CRASE', 'CRASI', 'CRAUL', 'CRAUN', 'CRAZA', 'CRAZE', 'CREAI', 'CREAM', 'CREAT', 'CREAU', 'CREDE', 'CREDO', 'CREEK', 'CREEZ', 'CREMA', 'CREME', 'CREOL', 'CREPS', 'CRESA', 'CRESC', 'CRESE', 'CRETA', 'CRETE', 'CRETI', 'CREZI', 'CREZU', 'CRIDA', 'CRIDE', 'CRIER', 'CRILA', 'CRILE', 'CRIMA', 'CRIME', 'CRINI', 'CRITA', 'CRITE', 'CRIZA', 'CRIZE', 'CROAT', 'CROIA', 'CROII', 'CROIM', 'CROIT', 'CROMA', 'CROMO', 'CRONC', 'CROSA', 'CROSE', 'CROWN', 'CRUCE', 'CRUCI', 'CRUDA', 'CRUDE', 'CRUNT', 'CRUPA', 'CRUPE', 'CRUSI', 'CRUTA', 'CRUTE', 'CRUTI', 'CRUZI', 'CUAGA', 'CUART', 'CUBAI', 'CUBAJ', 'CUBAM', 'CUBAN', 'CUBAT', 'CUBAU', 'CUBEB', 'CUBEZ', 'CUBIC', 'CUBII', 'CUBUL', 'CUCAI', 'CUCII', 'CUCON', 'CUCOR', 'CUCOS', 'CUCUI', 'CUCUL', 'CUCUT', 'CUFAR', 'CUGET', 'CUHNE', 'CUHNI', 'CUIBA', 'CUIER', 'CUINA', 'CUINE', 'CUINI', 'CUIUL', 'CUIUT', 'CUIVA', 'CUJBA', 'CUJBE', 'CULAC', 'CULCA', 'CULCE', 'CULCI', 'CULEE', 'CULEG', 'CULEI', 'CULES', 'CULIC', 'CULII', 'CULMA', 'CULME', 'CULMI', 'CULOT', 'CULPA', 'CULPE', 'CULTA', 'CULTE', 'CULTI', 'CUMAN', 'CUMAS', 'CUMEN', 'CUMIS', 'CUMUL', 'CUMVA', 'CUNUN', 'CUPAJ', 'CUPAR', 'CUPEA', 'CUPEI', 'CUPET', 'CUPEU', 'CUPID', 'CUPIT', 'CUPIU', 'CUPLA', 'CUPLE', 'CUPLU', 'CUPON', 'CUPRA', 'CUPRU', 'CURAI', 'CURAJ', 'CURAM', 'CURAT', 'CURAU', 'CURBA', 'CURBE', 'CURBI', 'CURCA', 'CURCI', 'CUREA', 'CUREI', 'CUREZ', 'CURGA', 'CURGE', 'CURIA', 'CURIE', 'CURII', 'CURIU', 'CURMA', 'CURME', 'CURMI', 'CURRY', 'CURSA', 'CURSE', 'CURTA', 'CURTE', 'CURTI', 'CURUL', 'CURUT', 'CURVA', 'CURVE', 'CURVI', 'CUSAC', 'CUSCA', 'CUSER', 'CUSMA', 'CUSME', 'CUSTI', 'CUSUI', 'CUSUR', 'CUSUT', 'CUTAI', 'CUTAM', 'CUTAT', 'CUTAU', 'CUTEA', 'CUTEI', 'CUTER', 'CUTEZ', 'CUTIA', 'CUTIE', 'CUTII', 'CUTIT', 'CUTRA', 'CUTRE', 'CUVEI', 'CUVIE', 'CUVIN', 'CVART', 'CVASI', 'DACEI', 'DACIC', 'DACII', 'DACIT', 'DACUL', 'DADEA', 'DADEI', 'DADUI', 'DAFIA', 'DAFIE', 'DAFII', 'DAFIN', 'DAGII', 'DAIAC', 'DAICA', 'DAICI', 'DAINA', 'DAIRA', 'DALAC', 'DALAJ', 'DALBA', 'DALBE', 'DALBI', 'DALEI', 'DALIA', 'DALIE', 'DALII', 'DALMA', 'DALME', 'DALTA', 'DALTI', 'DAMEI', 'DAMII', 'DAMNA', 'DAMUL', 'DANAC', 'DANCE', 'DANCI', 'DANDI', 'DANDY', 'DANEI', 'DANEZ', 'DANGA', 'DANIA', 'DANIE', 'DANII', 'DANOS', 'DANSA', 'DANTA', 'DANUI', 'DANUL', 'DAOLI', 'DAPAR', 'DARAB', 'DARAC', 'DARAI', 'DARAM', 'DARAT', 'DARAU', 'DARDA', 'DARDE', 'DAREA', 'DAREI', 'DAREZ', 'DARIA', 'DARIE', 'DARII', 'DARJE', 'DARJI', 'DARMA', 'DARME', 'DARMI', 'DARUI', 'DARUL', 'DARZA', 'DARZE', 'DARZI', 'DASEM', 'DASIA', 'DASIE', 'DASII', 'DATAI', 'DATAM', 'DATAT', 'DATAU', 'DATEI', 'DATEZ', 'DATII', 'DATIV', 'DATOR', 'DATUL', 'DAULA', 'DAULI', 'DAUNA', 'DAUNE', 'DAYAC', 'DEASA', 'DEBIL', 'DEBIT', 'DEBUT', 'DEBYE', 'DECAD', 'DECAN', 'DECAR', 'DECAT', 'DECES', 'DECID', 'DECIS', 'DECOR', 'DECUL', 'DEDAI', 'DEDAL', 'DEDAM', 'DEDAT', 'DEDAU', 'DEDEA', 'DEDEI', 'DEDIC', 'DEDOI', 'DEDUC', 'DEDUS', 'DEFEL', 'DEFER', 'DEGAJ', 'DEGER', 'DEGET', 'DEISM', 'DEIST', 'DEJEI', 'DEJOC', 'DEJUG', 'DEJUN', 'DELAS', 'DELCO', 'DELEG', 'DELEI', 'DELIA', 'DELIE', 'DELII', 'DELIR', 'DELIU', 'DELOC', 'DELTA', 'DELTE', 'DELUT', 'DEMEI', 'DEMIS', 'DEMIT', 'DEMIU', 'DEMNA', 'DEMNE', 'DEMNI', 'DEMON', 'DEMOS', 'DENAR', 'DENEG', 'DENIA', 'DENIE', 'DENII', 'DENSA', 'DENSE', 'DENSI', 'DEPAN', 'DEPAR', 'DEPOU', 'DEPUI', 'DEPUN', 'DEPUS', 'DERBI', 'DERBY', 'DEREA', 'DEREG', 'DERES', 'DERIV', 'DERMA', 'DERME', 'DEROG', 'DESAG', 'DESCA', 'DESCE', 'DESEC', 'DESEI', 'DESEL', 'DESEN', 'DESET', 'DESEU', 'DESFA', 'DESII', 'DESIR', 'DESIS', 'DESTE', 'DESTI', 'DESUL', 'DESZI', 'DETEI', 'DETIE', 'DETII', 'DETIN', 'DETIU', 'DETUN', 'DEVER', 'DEVIA', 'DEVIE', 'DEVII', 'DEVIN', 'DEVIU', 'DEVIZ', 'DEVLA', 'DEVLE', 'DEVON', 'DEVOT', 'DEZIC', 'DEZIS', 'DIACE', 'DIATA', 'DIATE', 'DIBLA', 'DIBLE', 'DIBLU', 'DIBOL', 'DIBUI', 'DICTA', 'DICTU', 'DIECI', 'DIENA', 'DIENE', 'DIETA', 'DIETE', 'DIEZA', 'DIEZI', 'DIFER', 'DIFUZ', 'DIGER', 'DIGIT', 'DIGUL', 'DIHAI', 'DIHOC', 'DIHOR', 'DIJMA', 'DIJME', 'DILAT', 'DILEA', 'DILIA', 'DILIE', 'DILII', 'DILIM', 'DILIT', 'DILIU', 'DILUA', 'DIMER', 'DIMIA', 'DIMIE', 'DIMII', 'DIMON', 'DINAM', 'DINAR', 'DINEE', 'DINEI', 'DINEU', 'DINGO', 'DINTA', 'DINTE', 'DINTI', 'DIODA', 'DIODE', 'DIOIC', 'DIPOD', 'DIPOL', 'DIREG', 'DIRES', 'DIRIG', 'DISCO', 'DISEC', 'DITAI', 'DIURN', 'DIVAN', 'DIVEI', 'DIVID', 'DIVIN', 'DIXIE', 'DOAGA', 'DOAGE', 'DOAPA', 'DOAPE', 'DOARA', 'DOARE', 'DOBAS', 'DOBEI', 'DOBOR', 'DOBOS', 'DOBRU', 'DOCAR', 'DOCIL', 'DOCTA', 'DOCTE', 'DOCTI', 'DOCUL', 'DODEA', 'DODEI', 'DODII', 'DODIM', 'DODIT', 'DOGAR', 'DOGEA', 'DOGII', 'DOGIM', 'DOGIT', 'DOGMA', 'DOGME', 'DOGUL', 'DOHOT', 'DOICA', 'DOICI', 'DOIME', 'DOIMI', 'DOINA', 'DOINE', 'DOINI', 'DOIUL', 'DOLAR', 'DOLBY', 'DOLCE', 'DOLIA', 'DOLIE', 'DOLII', 'DOLIU', 'DOLLY', 'DOLUL', 'DOMEI', 'DOMIN', 'DOMNI', 'DOMNU', 'DOMOL', 'DOMRA', 'DOMRE', 'DOMUL', 'DONAI', 'DONAM', 'DONAT', 'DONAU', 'DONEZ', 'DONOR', 'DOPAI', 'DOPAJ', 'DOPAM', 'DOPAT', 'DOPAU', 'DOPEZ', 'DOPUL', 'DOREA', 'DORIC', 'DORII', 'DORIM', 'DORIT', 'DORMI', 'DORNA', 'DORNE', 'DORUL', 'DORUT', 'DOSAR', 'DOSEA', 'DOSII', 'DOSIM', 'DOSIT', 'DOSPI', 'DOSUL', 'DOTAI', 'DOTAL', 'DOTAM', 'DOTAT', 'DOTAU', 'DOTEI', 'DOTEZ', 'DOXEI', 'DOZAI', 'DOZAJ', 'DOZAM', 'DOZAT', 'DOZAU', 'DOZEI', 'DOZEZ', 'DRACI', 'DRACU', 'DRAGA', 'DRAGE', 'DRAGI', 'DRAIN', 'DRAIV', 'DRAMA', 'DRAME', 'DRANG', 'DRAPA', 'DREGE', 'DREGI', 'DRELA', 'DRELE', 'DRENA', 'DRENE', 'DREPT', 'DRESA', 'DRESE', 'DRESI', 'DRETE', 'DREVE', 'DRINK', 'DRIPI', 'DRIVE', 'DROBI', 'DROGA', 'DROPS', 'DROTA', 'DRUGA', 'DRUGI', 'DRUID', 'DRUPA', 'DRUPE', 'DRUSA', 'DRUSE', 'DRUZA', 'DRUZE', 'DUALE', 'DUANT', 'DUBAS', 'DUBEA', 'DUBEI', 'DUBII', 'DUBIM', 'DUBIT', 'DUBIU', 'DUBLA', 'DUBLE', 'DUBLI', 'DUBLU', 'DUCAI', 'DUCAL', 'DUCAT', 'DUCEA', 'DUCEM', 'DUCII', 'DUDAU', 'DUDEI', 'DUDUI', 'DUDUL', 'DUELA', 'DUETE', 'DUHAN', 'DUHNI', 'DUHUL', 'DUIOS', 'DUIUM', 'DULAI', 'DULAP', 'DULAU', 'DULCE', 'DULCI', 'DULIA', 'DULIE', 'DULII', 'DUMEI', 'DUMIC', 'DUNEI', 'DUNGA', 'DUNGI', 'DUNIT', 'DUOUL', 'DUPAC', 'DUPAI', 'DUPCA', 'DUPCE', 'DUPII', 'DUPRE', 'DUPUL', 'DURAI', 'DURAM', 'DURAN', 'DURAT', 'DURAU', 'DURDA', 'DURDE', 'DUREA', 'DUREI', 'DUREZ', 'DURIG', 'DURII', 'DURIT', 'DURMI', 'DUROS', 'DURUI', 'DURUL', 'DURUT', 'DURZI', 'DUSCA', 'DUSEI', 'DUSII', 'DUSTE', 'DUSTI', 'DUSUL', 'DUTCA', 'DUTCE', 'DUZEI', 'DUZII', 'DVORI', 'DZELO', 'EBOSA', 'EBOSE', 'ECART', 'ECHEA', 'ECHEI', 'ECHER', 'ECLER', 'ECOUL', 'ECRAN', 'ECVIN', 'EDEME', 'EDICT', 'EDILI', 'EDITA', 'EDUCA', 'EDUCE', 'EDUCI', 'EFEBI', 'EFECT', 'EFETI', 'EFILA', 'EFLUX', 'EFORI', 'EFORT', 'EGALA', 'EGALE', 'EGALI', 'EGIDA', 'EGIDE', 'ELANI', 'ELEAT', 'ELENA', 'ELENE', 'ELENI', 'ELEVA', 'ELEVE', 'ELEVI', 'ELFII', 'ELFUL', 'ELICE', 'ELIDA', 'ELINA', 'ELINE', 'ELINI', 'ELITA', 'ELITE', 'ELUDA', 'EMAIL', 'EMANA', 'EMANE', 'EMANI', 'EMBOL', 'EMDEN', 'EMERG', 'EMERI', 'EMERS', 'EMIRI', 'EMISA', 'EMISE', 'EMISI', 'EMITA', 'EMITE', 'EMITI', 'EMULI', 'EMUUL', 'ENORM', 'ENOTI', 'ENUNT', 'EOCEN', 'EOLIT', 'EONII', 'EONUL', 'EPATA', 'EPAVA', 'EPAVE', 'EPICA', 'EPICE', 'EPICI', 'EPILA', 'EPIUL', 'EPOCA', 'EPOCI', 'EPODA', 'EPODE', 'EPOHA', 'EPOHE', 'EPONJ', 'EPURA', 'EPURE', 'EQUUS', 'ERATA', 'ERATE', 'ERATI', 'ERBIU', 'ERECT', 'EREDE', 'ERELE', 'ERETE', 'ERETI', 'EREZI', 'ERGAN', 'ERGII', 'ERGUL', 'ERHEI', 'ERIJA', 'ERMIT', 'ERODA', 'EROIC', 'EROII', 'ERORI', 'EROUL', 'ERUPA', 'ERUPE', 'ERUPI', 'ERUPT', 'ERZAT', 'ESEUL', 'ESPUI', 'ESPUN', 'ESPUS', 'ESTAZ', 'ESTER', 'ESTET', 'ESTIC', 'ESTIV', 'ESTON', 'ESTRE', 'ESTRU', 'ESTUL', 'ESUAI', 'ESUAM', 'ESUAT', 'ESUAU', 'ESUEZ', 'ETAJA', 'ETAJE', 'ETALA', 'ETANS', 'ETAPA', 'ETAPE', 'ETATE', 'ETATI', 'ETENA', 'ETENE', 'ETERI', 'ETERN', 'ETHOS', 'ETIAJ', 'ETICA', 'ETICE', 'ETICI', 'ETILA', 'ETILI', 'ETIRA', 'ETNIA', 'ETNIC', 'ETNIE', 'ETNII', 'ETOLA', 'ETOLE', 'ETUFA', 'ETUVA', 'ETUVE', 'EULUI', 'EUNUC', 'EURIP', 'EVADA', 'EVAZA', 'EVING', 'EVINS', 'EVITA', 'EVITE', 'EVITI', 'EVOCA', 'EVOCE', 'EVOCI', 'EVREI', 'EVREU', 'EVURI', 'EXACT', 'EXALA', 'EXALE', 'EXALI', 'EXALT', 'EXARH', 'EXCES', 'EXCIT', 'EXERT', 'EXHIB', 'EXIGA', 'EXIGE', 'EXIGI', 'EXILA', 'EXINA', 'EXINE', 'EXIST', 'EXPIA', 'EXPIE', 'EXPIR', 'EXPRE', 'EXPUI', 'EXPUN', 'EXPUS', 'EXTAZ', 'EXTRA', 'EXULT', 'EZITA', 'EZITE', 'EZITI', 'FACAU', 'FACEA', 'FACEM', 'FACIL', 'FACLA', 'FACLE', 'FACTO', 'FACUI', 'FACUT', 'FADEI', 'FADUL', 'FAGAS', 'FAGET', 'FAGII', 'FAGOT', 'FAGUL', 'FAGUR', 'FAIMA', 'FAIME', 'FAINA', 'FAINE', 'FAINI', 'FAIUL', 'FALCA', 'FALCE', 'FALCI', 'FALEA', 'FALEI', 'FALET', 'FALIA', 'FALIE', 'FALII', 'FALIM', 'FALIT', 'FALOS', 'FALSA', 'FALSE', 'FALSI', 'FALUN', 'FALUS', 'FAMAT', 'FAMEN', 'FANAI', 'FANAL', 'FANAM', 'FANAR', 'FANAT', 'FANAU', 'FANDA', 'FANEZ', 'FANII', 'FANON', 'FANTA', 'FANTE', 'FANTI', 'FANUL', 'FAPTA', 'FAPTE', 'FAPTI', 'FARAD', 'FARAM', 'FARAS', 'FARBA', 'FARBE', 'FARBI', 'FARDA', 'FARIN', 'FARMA', 'FARME', 'FARMI', 'FARSA', 'FARSE', 'FARTA', 'FARTE', 'FARUL', 'FASAI', 'FASEI', 'FASIA', 'FASIE', 'FASII', 'FASON', 'FASTA', 'FASTE', 'FASTI', 'FASUI', 'FASUL', 'FATAI', 'FATAL', 'FATAT', 'FATAU', 'FATEI', 'FATIS', 'FATOI', 'FATOS', 'FATUI', 'FATUL', 'FATUM', 'FAULT', 'FAUNA', 'FAUNE', 'FAUNI', 'FAURI', 'FAVOR', 'FAVUS', 'FAXUL', 'FAZAN', 'FAZEI', 'FAZII', 'FEBRA', 'FEBRE', 'FECAL', 'FEDER', 'FEELE', 'FELAH', 'FELEA', 'FELEI', 'FELIA', 'FELIE', 'FELII', 'FELIN', 'FELON', 'FELUL', 'FEMEI', 'FEMEL', 'FEMUR', 'FENEC', 'FENIC', 'FENIL', 'FENIX', 'FENOL', 'FENTA', 'FENTE', 'FERAT', 'FERDU', 'FEREA', 'FEREC', 'FERIC', 'FERII', 'FERIM', 'FERIT', 'FERMA', 'FERME', 'FERMI', 'FEROS', 'FERTA', 'FERTE', 'FERUL', 'FESEI', 'FESII', 'FESTA', 'FESTE', 'FESUL', 'FETAL', 'FETEA', 'FETEI', 'FETIA', 'FETID', 'FETIE', 'FETII', 'FETIM', 'FETIS', 'FETIT', 'FETRU', 'FETUS', 'FEUDA', 'FEUDE', 'FIALA', 'FIALE', 'FIARA', 'FIARE', 'FIBRA', 'FIBRE', 'FICAT', 'FICSI', 'FICUS', 'FIDEA', 'FIDEL', 'FIDER', 'FIECE', 'FIERB', 'FIERE', 'FIERI', 'FIERT', 'FIESC', 'FIFUL', 'FIICA', 'FIICE', 'FIIND', 'FILAI', 'FILAM', 'FILAT', 'FILAU', 'FILEE', 'FILEI', 'FILER', 'FILET', 'FILEU', 'FILEZ', 'FILIT', 'FILMA', 'FILME', 'FILON', 'FINAL', 'FINEA', 'FINEI', 'FINET', 'FINII', 'FINIM', 'FINIS', 'FINIT', 'FINUL', 'FIOLA', 'FIOLE', 'FIONC', 'FIONG', 'FIORD', 'FIORI', 'FIRAV', 'FIREA', 'FIRET', 'FIREZ', 'FIRII', 'FIRIZ', 'FIRMA', 'FIRME', 'FIROS', 'FIRUL', 'FIRUT', 'FISAI', 'FISAM', 'FISAT', 'FISAU', 'FISCA', 'FISEI', 'FISET', 'FISEZ', 'FISIC', 'FISIU', 'FISTI', 'FISUL', 'FITEI', 'FITIL', 'FITUI', 'FIUTI', 'FIXAI', 'FIXAJ', 'FIXAM', 'FIXAT', 'FIXAU', 'FIXEI', 'FIXEZ', 'FIXUL', 'FIZIC', 'FLAMA', 'FLAME', 'FLANA', 'FLANC', 'FLANE', 'FLASC', 'FLASH', 'FLATA', 'FLAUT', 'FLEAC', 'FLEOS', 'FLESA', 'FLESE', 'FLETE', 'FLETI', 'FLINT', 'FLIRT', 'FLOCI', 'FLORA', 'FLORE', 'FLORI', 'FLOTA', 'FLOTE', 'FLUAJ', 'FLUDA', 'FLUDE', 'FLUID', 'FLUOR', 'FLUUL', 'FOACI', 'FOAIA', 'FOAIE', 'FOALE', 'FOAME', 'FOBIA', 'FOBIE', 'FOBII', 'FOCAL', 'FOCAR', 'FOCII', 'FOCOS', 'FOCSI', 'FOCUL', 'FODRA', 'FODRE', 'FOEHN', 'FOENE', 'FOHNE', 'FOIAI', 'FOIAM', 'FOIAU', 'FOILE', 'FOIND', 'FOIOS', 'FOIRA', 'FOIRE', 'FOIRI', 'FOISE', 'FOISI', 'FOITA', 'FOITE', 'FOITI', 'FOIUL', 'FOLIA', 'FOLIE', 'FOLII', 'FOLIO', 'FOLIU', 'FOLOS', 'FONDA', 'FONDU', 'FONEM', 'FONFI', 'FONIA', 'FONIC', 'FONIE', 'FONII', 'FONON', 'FONTA', 'FONTE', 'FONUL', 'FORAI', 'FORAJ', 'FORAM', 'FORAS', 'FORAT', 'FORAU', 'FOREZ', 'FORJA', 'FORJE', 'FORMA', 'FORME', 'FORTA', 'FORTE', 'FORUL', 'FORUM', 'FOSAI', 'FOSEI', 'FOSIL', 'FOSNI', 'FOSTA', 'FOSTE', 'FOSTI', 'FOTEI', 'FOTEL', 'FOTII', 'FOTON', 'FOTUL', 'FOXUL', 'FRAGA', 'FRAGI', 'FRAHT', 'FRAIE', 'FRANA', 'FRANC', 'FRANE', 'FRANG', 'FRANJ', 'FRANS', 'FRANT', 'FRAPA', 'FRATE', 'FRATI', 'FRAUL', 'FRAZA', 'FRAZE', 'FRECA', 'FRECE', 'FRECI', 'FREON', 'FRETA', 'FRETE', 'FREZA', 'FREZE', 'FRICA', 'FRICI', 'FRIGA', 'FRIGE', 'FRIGI', 'FRIPT', 'FRIZA', 'FRIZE', 'FRONT', 'FROTA', 'FRUCT', 'FRUPT', 'FRUST', 'FTORI', 'FUCUS', 'FUDUL', 'FUFEI', 'FUGAR', 'FUGEA', 'FUGII', 'FUGIM', 'FUGIT', 'FUGOS', 'FUGUI', 'FUIOR', 'FULAR', 'FULAT', 'FULAU', 'FULEE', 'FULEU', 'FULGI', 'FULIA', 'FULIE', 'FULII', 'FULUL', 'FUMAI', 'FUMAM', 'FUMAR', 'FUMAT', 'FUMAU', 'FUMEZ', 'FUMUI', 'FUMUL', 'FUNDA', 'FUNDE', 'FUNGA', 'FUNGI', 'FUNIA', 'FUNIE', 'FUNII', 'FUNTI', 'FUNZI', 'FUOCO', 'FURAI', 'FURAJ', 'FURAM', 'FURAN', 'FURAT', 'FURAU', 'FURCA', 'FURCI', 'FURDA', 'FURIA', 'FURIE', 'FURII', 'FURIS', 'FUROU', 'FURUL', 'FUSAR', 'FUSEI', 'FUSTA', 'FUSTE', 'FUSTI', 'FUSUL', 'FUTIL', 'FUXUL', 'FUZEE', 'FUZEL', 'FUZEN', 'FUZIT', 'GABIA', 'GABIE', 'GABII', 'GABJA', 'GABJE', 'GABJI', 'GABRO', 'GABUI', 'GACEA', 'GACII', 'GACIM', 'GACIT', 'GADEA', 'GADEI', 'GADIL', 'GAELI', 'GAFAI', 'GAFAM', 'GAFAT', 'GAFAU', 'GAFEI', 'GAFEZ', 'GAGAI', 'GAGAT', 'GAGIC', 'GAGII', 'GAGIU', 'GAGUL', 'GAIAC', 'GAIAL', 'GAIBE', 'GAICA', 'GAICI', 'GAIDA', 'GAIDE', 'GAILE', 'GAINA', 'GAINI', 'GAITA', 'GAITE', 'GAIZA', 'GAIZE', 'GAJAI', 'GAJUL', 'GALBA', 'GALBE', 'GALCA', 'GALCI', 'GALEI', 'GALES', 'GALET', 'GALEZ', 'GALIC', 'GALII', 'GALIS', 'GALIU', 'GALMA', 'GALME', 'GALON', 'GALOP', 'GALOS', 'GALUL', 'GAMAN', 'GAMBA', 'GAMBE', 'GAMEI', 'GAMET', 'GANAS', 'GANDI', 'GANGA', 'GANGE', 'GANJI', 'GAOCI', 'GARAI', 'GARAJ', 'GARAM', 'GARAT', 'GARAU', 'GARDA', 'GAREZ', 'GARII', 'GARLA', 'GARLE', 'GAROU', 'GARZI', 'GASCA', 'GASEA', 'GASEI', 'GASII', 'GASIM', 'GASIT', 'GASTE', 'GASTI', 'GASUL', 'GATAI', 'GATAM', 'GATAR', 'GATAT', 'GATAU', 'GATEA', 'GATEI', 'GATEJ', 'GATER', 'GATEZ', 'GATII', 'GATIM', 'GATIT', 'GATOS', 'GATUI', 'GATUL', 'GAUNA', 'GAUNI', 'GAURA', 'GAURI', 'GAUSI', 'GAUSS', 'GAVAJ', 'GAVAN', 'GAZAI', 'GAZAM', 'GAZAR', 'GAZAT', 'GAZAU', 'GAZDA', 'GAZDE', 'GAZEI', 'GAZEL', 'GAZEU', 'GAZEZ', 'GAZII', 'GAZON', 'GAZOS', 'GAZUL', 'GEABA', 'GEACA', 'GEALA', 'GEALE', 'GEAMA', 'GEANA', 'GEBEA', 'GECII', 'GECKO', 'GELEP', 'GELIV', 'GELOS', 'GELUI', 'GELUL', 'GEMAT', 'GEMEA', 'GEMEI', 'GEMEM', 'GEMEN', 'GEMET', 'GEMIN', 'GEMUI', 'GEMUL', 'GEMUT', 'GENAT', 'GENEI', 'GENIC', 'GENII', 'GENIU', 'GENOL', 'GENOM', 'GENTI', 'GENUL', 'GEODA', 'GEODE', 'GEOID', 'GEPID', 'GERAH', 'GERAI', 'GERAM', 'GERAR', 'GERAT', 'GERAU', 'GERET', 'GEREZ', 'GERID', 'GEROS', 'GERUI', 'GERUL', 'GETEI', 'GETIC', 'GETII', 'GETUL', 'GHEBA', 'GHEBE', 'GHEME', 'GHETE', 'GHETI', 'GHETO', 'GHICI', 'GHIDA', 'GHIDE', 'GHIDI', 'GHILI', 'GHINT', 'GHIOB', 'GHIOC', 'GHIOL', 'GHIOS', 'GHIPS', 'GHIUJ', 'GHIUL', 'GHIZD', 'GHIZI', 'GIACA', 'GIACE', 'GIBON', 'GIGAI', 'GIGEA', 'GIGUL', 'GIMIA', 'GIMIE', 'GIMII', 'GINEA', 'GINII', 'GINIM', 'GINIT', 'GINTA', 'GINTE', 'GINTI', 'GINUL', 'GIRAI', 'GIRAM', 'GIRAT', 'GIRAU', 'GIREZ', 'GIRUL', 'GIRUS', 'GITAN', 'GLAJA', 'GLAJI', 'GLAND', 'GLANT', 'GLASA', 'GLENC', 'GLIEI', 'GLIOM', 'GLISA', 'GLOBI', 'GLODI', 'GLONT', 'GLOSA', 'GLOSE', 'GLOTA', 'GLOTE', 'GLUGA', 'GLUGI', 'GLUMA', 'GLUME', 'GLUMI', 'GNAIS', 'GNOMI', 'GNUUL', 'GOALA', 'GOALE', 'GOANA', 'GOANE', 'GOBAI', 'GODAC', 'GODEN', 'GODEU', 'GODIA', 'GODIE', 'GODII', 'GODIN', 'GOFRA', 'GOGEA', 'GOGII', 'GOGIM', 'GOGIT', 'GOGON', 'GOGUL', 'GOLAN', 'GOLAS', 'GOLEA', 'GOLII', 'GOLIM', 'GOLIT', 'GOLUL', 'GOLUT', 'GOMAJ', 'GOMEI', 'GOMOS', 'GONAS', 'GONEA', 'GONII', 'GONIM', 'GONIO', 'GONIT', 'GOPAC', 'GORUN', 'GOTCA', 'GOTCE', 'GOTIC', 'GOTII', 'GOTUL', 'GOZUL', 'GRABA', 'GRABE', 'GRABI', 'GRADA', 'GRADE', 'GRAFE', 'GRAFI', 'GRAIA', 'GRAIE', 'GRAII', 'GRAIM', 'GRAIT', 'GRAJD', 'GRAME', 'GRANE', 'GRAPA', 'GRAPE', 'GRASA', 'GRASE', 'GRASI', 'GRATA', 'GRAUL', 'GRAUR', 'GRAVA', 'GRAVE', 'GRAVI', 'GREAI', 'GREAM', 'GREAT', 'GREAU', 'GRECE', 'GRECI', 'GREEZ', 'GREFA', 'GREFE', 'GREFI', 'GREII', 'GRELE', 'GRENA', 'GREOI', 'GRESA', 'GRESI', 'GRETE', 'GRETI', 'GREUL', 'GREVA', 'GREVE', 'GRIER', 'GRIFA', 'GRIFE', 'GRIJA', 'GRIJI', 'GRILA', 'GRILE', 'GRILL', 'GRIMA', 'GRIME', 'GRIND', 'GRIPA', 'GRIPE', 'GRIUL', 'GRIVA', 'GRIVE', 'GRIVI', 'GRIZA', 'GRIZU', 'GROBA', 'GROBE', 'GROBI', 'GROFI', 'GROMI', 'GROOM', 'GROPI', 'GROSI', 'GROTA', 'GROTE', 'GRUIA', 'GRUIE', 'GRUND', 'GRUNZ', 'GRUPA', 'GRUPE', 'GUANO', 'GUARD', 'GUASA', 'GUASE', 'GUBAV', 'GUBEI', 'GUDUR', 'GUELF', 'GUITA', 'GUITE', 'GUJON', 'GULAG', 'GULAS', 'GULER', 'GULIA', 'GULIE', 'GULII', 'GUMAI', 'GUMAJ', 'GUMAM', 'GUMAT', 'GUMAU', 'GUMEI', 'GUMEZ', 'GUNOI', 'GUPEI', 'GURAI', 'GURES', 'GURII', 'GURMA', 'GURME', 'GURNA', 'GURNE', 'GURUI', 'GURUL', 'GURUT', 'GUSAT', 'GUSEU', 'GUSII', 'GUSTA', 'GUSTE', 'GUSTI', 'GUTEI', 'GUTOS', 'GUTUI', 'GUVID', 'GUZII', 'GUZLA', 'GUZLE', 'GUZUL', 'HABAN', 'HABAR', 'HABUC', 'HACAI', 'HACUI', 'HACUL', 'HADEI', 'HADES', 'HADUL', 'HAGII', 'HAGIU', 'HAHAM', 'HAIAI', 'HAIAM', 'HAIAU', 'HAIDA', 'HAIDE', 'HAIKU', 'HAINA', 'HAIND', 'HAINE', 'HAINI', 'HAIOS', 'HAIRA', 'HAIRE', 'HAIRI', 'HAISA', 'HAISE', 'HAISI', 'HAITA', 'HAITE', 'HAITI', 'HAIUL', 'HALAJ', 'HALAL', 'HALAT', 'HALAU', 'HALBA', 'HALBE', 'HALCA', 'HALCI', 'HALDA', 'HALDE', 'HALEA', 'HALEI', 'HALFI', 'HALII', 'HALIM', 'HALIT', 'HALON', 'HALOR', 'HALOU', 'HALTA', 'HALTE', 'HALUL', 'HALVA', 'HAMAC', 'HAMAI', 'HAMAL', 'HAMEI', 'HAMIS', 'HAMIT', 'HAMUI', 'HAMUL', 'HAMUT', 'HANAP', 'HANAT', 'HANII', 'HANSA', 'HANSE', 'HANTA', 'HANTE', 'HANUL', 'HAPAI', 'HAPAX', 'HAPCA', 'HAPCI', 'HAPLE', 'HAPUL', 'HARAC', 'HARAG', 'HARAI', 'HARAM', 'HARAP', 'HARAU', 'HARCA', 'HARCI', 'HAREI', 'HAREM', 'HARES', 'HARFA', 'HARFE', 'HARPA', 'HARPE', 'HARSA', 'HARSI', 'HARTA', 'HARTE', 'HARTI', 'HARUL', 'HASAI', 'HASCA', 'HASEU', 'HASIS', 'HASMA', 'HASME', 'HASTI', 'HATAI', 'HATAN', 'HATAR', 'HATAS', 'HATEA', 'HATIA', 'HATIE', 'HATII', 'HATIM', 'HATIS', 'HATIT', 'HATRA', 'HATRE', 'HATRI', 'HATRU', 'HATUI', 'HATUL', 'HAUIA', 'HAUIE', 'HAUII', 'HAUIM', 'HAUIT', 'HAULI', 'HAURI', 'HAVAI', 'HAVAJ', 'HAVAM', 'HAVAN', 'HAVAT', 'HAVAU', 'HAVEZ', 'HAVRA', 'HAVRE', 'HAVUZ', 'HAZEA', 'HAZII', 'HAZIM', 'HAZIT', 'HAZNA', 'HAZNE', 'HAZUL', 'HEAVY', 'HECHT', 'HEDER', 'HEHEI', 'HEIUL', 'HELGE', 'HELGI', 'HELII', 'HELIO', 'HELIU', 'HELUL', 'HEMUL', 'HENDS', 'HENRI', 'HENRY', 'HEPAR', 'HERMA', 'HERME', 'HERSA', 'HERSE', 'HERTZ', 'HERUL', 'HEVEA', 'HEXAN', 'HIADA', 'HIADE', 'HIBEI', 'HICAI', 'HIDOS', 'HIDRA', 'HIDRE', 'HIDRO', 'HIENA', 'HIENE', 'HIERB', 'HIFEI', 'HILAR', 'HILEA', 'HILER', 'HILOT', 'HILUL', 'HIMEN', 'HINDI', 'HIOID', 'HIOLA', 'HIPER', 'HIPIC', 'HIPPY', 'HIRTA', 'HIRTE', 'HITIT', 'HITUL', 'HLEAB', 'HLIZI', 'HOATA', 'HOATE', 'HOBAC', 'HOBAI', 'HOBAN', 'HOBBY', 'HOBOT', 'HODEI', 'HOGAS', 'HOGEA', 'HOGEI', 'HOGII', 'HOHER', 'HOHOT', 'HOJMA', 'HOLBA', 'HOLCA', 'HOLCI', 'HOLDA', 'HOLDE', 'HOLEI', 'HOLIA', 'HOLIE', 'HOLII', 'HOLUL', 'HOMAR', 'HONUI', 'HONUL', 'HOPAI', 'HOPUL', 'HORAI', 'HORAM', 'HORAT', 'HORAU', 'HORDA', 'HORDE', 'HOREA', 'HOREI', 'HORET', 'HORII', 'HORIM', 'HORIT', 'HORST', 'HORUL', 'HOTAR', 'HOTEA', 'HOTEI', 'HOTEL', 'HOTIA', 'HOTIE', 'HOTII', 'HOTIM', 'HOTIS', 'HOTIT', 'HOTUL', 'HOUSE', 'HRANA', 'HRANE', 'HRANI', 'HRAPI', 'HREAN', 'HRIBI', 'HRUBA', 'HRUBE', 'HUCII', 'HUCUL', 'HUDEI', 'HUHUR', 'HUIAU', 'HUIET', 'HUILA', 'HUILE', 'HUIND', 'HUIRA', 'HUIRE', 'HUIRI', 'HUISE', 'HUITA', 'HUITE', 'HUITI', 'HUIUM', 'HULEA', 'HULEI', 'HULII', 'HULIM', 'HULIT', 'HULPE', 'HULPI', 'HULUB', 'HULUI', 'HUMEI', 'HUMIC', 'HUMOR', 'HUMOS', 'HUMUI', 'HUMUS', 'HUNII', 'HUNUL', 'HURAL', 'HURCA', 'HURCI', 'HUREZ', 'HURIA', 'HURIE', 'HURII', 'HURON', 'HURTA', 'HURTE', 'HURUI', 'HUSAR', 'HUSAS', 'HUSCA', 'HUSEI', 'HUSIT', 'HUSOS', 'HUSTE', 'HUSTI', 'HUTAN', 'HUTUL', 'HUTUT', 'HUZUR', 'IACEI', 'IACII', 'IACUL', 'IADES', 'IADUL', 'IAMBI', 'IARBA', 'IARNA', 'IARTA', 'IARZI', 'IASCA', 'IASTA', 'IASTE', 'IATAC', 'IAURT', 'IAVAS', 'IAZIG', 'IAZMA', 'IAZUL', 'IBISI', 'IBRIC', 'ICNEA', 'ICNET', 'ICNII', 'ICNIM', 'ICNIT', 'ICOSE', 'ICREI', 'ICTER', 'ICTUS', 'ICURI', 'IDEAI', 'IDEAL', 'IDEAM', 'IDEAT', 'IDEAU', 'IDEEA', 'IDEEZ', 'IDEII', 'IDELE', 'IDILA', 'IDILE', 'IDIOM', 'IDIOT', 'IDOLI', 'IDOUL', 'IDREI', 'IEDEI', 'IEDUL', 'IEDUT', 'IEPEI', 'IERBI', 'IEREC', 'IEREI', 'IEREU', 'IERHA', 'IERHE', 'IERNA', 'IERNI', 'IERTA', 'IERTE', 'IERTI', 'IERUL', 'IESEA', 'IESII', 'IESIM', 'IESIT', 'IESLE', 'IESTA', 'IESTE', 'IESTI', 'IETAC', 'IEZEA', 'IEZER', 'IEZII', 'IEZIM', 'IEZIT', 'IEZME', 'IFOSE', 'IGNAM', 'IGNAR', 'IGNAT', 'IGNEE', 'IGNEI', 'IGNEU', 'IGNOR', 'IILOR', 'IJELE', 'ILAIE', 'ILARA', 'ILARE', 'ILARI', 'ILAUL', 'ILEIE', 'ILENE', 'ILEON', 'ILEUL', 'ILEUS', 'ILIAC', 'ILICE', 'ILION', 'ILIRA', 'ILIRE', 'ILIRI', 'ILOTI', 'IMAGO', 'IMALA', 'IMALE', 'IMAMI', 'IMANI', 'IMBAT', 'IMBIA', 'IMBIB', 'IMBIE', 'IMBII', 'IMBIN', 'IMBLA', 'IMBLE', 'IMBLI', 'IMBLU', 'IMBUC', 'IMBUN', 'IMENS', 'IMERG', 'IMERS', 'IMITA', 'IMITE', 'IMITI', 'IMNIC', 'IMNUL', 'IMOLA', 'IMOSI', 'IMPAC', 'IMPAR', 'IMPAS', 'IMPIA', 'IMPIE', 'IMPII', 'IMPIU', 'IMPLE', 'IMPLI', 'IMPLU', 'IMPUI', 'IMPUN', 'IMPUR', 'IMPUS', 'IMPUT', 'IMUNA', 'IMUND', 'IMUNE', 'IMUNI', 'IMURI', 'INALT', 'INAPT', 'INARI', 'INCAI', 'INCAP', 'INCAS', 'INCAT', 'INCEP', 'INCET', 'INCHI', 'INCIT', 'INCOA', 'INCOT', 'INCUB', 'INCUI', 'INCUL', 'INCUR', 'INDAN', 'INDES', 'INDEX', 'INDIC', 'INDIU', 'INDOI', 'INDOL', 'INDOP', 'INDUC', 'INDUR', 'INDUS', 'INECA', 'INECE', 'INECI', 'INELE', 'INEMA', 'INEME', 'INEMI', 'INEPT', 'INERM', 'INERT', 'INETE', 'INFAM', 'INFAS', 'INFAT', 'INFIA', 'INFIE', 'INFIG', 'INFIM', 'INFIR', 'INFIX', 'INFOC', 'INFOI', 'INFRA', 'INFUZ', 'INGAN', 'INGER', 'INHAM', 'INHAP', 'INHAT', 'INHIB', 'INICA', 'INICE', 'INICI', 'INIEI', 'INIMA', 'INIME', 'INIMI', 'INION', 'INITA', 'INITE', 'INJUG', 'INJUR', 'INMIA', 'INMII', 'INMOI', 'INNOD', 'INNOI', 'INOTA', 'INOTI', 'INOVA', 'INPUT', 'INRAI', 'INSAM', 'INSEI', 'INSEL', 'INSEM', 'INSII', 'INSIR', 'INSOR', 'INSUL', 'INTAI', 'INTEP', 'INTER', 'INTES', 'INTIM', 'INTIN', 'INTRA', 'INTRE', 'INTRI', 'INTRU', 'INTUI', 'INUND', 'INURI', 'INVAR', 'INVAT', 'INVIA', 'INVIE', 'INVII', 'INVIT', 'INVOC', 'INVOI', 'IOBAG', 'IODAT', 'IODIC', 'IODUL', 'IOFCA', 'IOLEI', 'IONIC', 'IONII', 'IONIT', 'IONIU', 'IONUL', 'IOSAG', 'IOTEI', 'IOTUL', 'IOVEI', 'IOVII', 'IOVUL', 'IPECA', 'IPSOS', 'IRACA', 'IRATO', 'IRBIS', 'IREAL', 'IRIGA', 'IRIGE', 'IRIGI', 'IRISI', 'IRITA', 'IRITE', 'IRITI', 'IRIZA', 'IRMOS', 'IROSI', 'IROZI', 'IRUGA', 'IRUGI', 'IRUMP', 'IRUMT', 'IRUPA', 'IRUPE', 'IRUPI', 'IRUPT', 'IRURI', 'ISALA', 'ISCAI', 'ISCAM', 'ISCAT', 'ISCAU', 'ISLAM', 'ISLAZ', 'ISLIC', 'ISNAF', 'ISOPI', 'ISPAS', 'ISPOL', 'ISTEA', 'ISTEI', 'ISTET', 'ISTIA', 'ISTOR', 'ISTOV', 'ISTUI', 'ITANI', 'ITARE', 'ITARI', 'ITEAI', 'ITEAM', 'ITEAU', 'ITELE', 'ITEME', 'ITEMI', 'ITESC', 'ITIIU', 'ITIND', 'ITIRA', 'ITIRE', 'ITIRI', 'ITISE', 'ITISI', 'ITITA', 'ITITE', 'ITITI', 'IUBEA', 'IUBET', 'IUBII', 'IUBIM', 'IUBIT', 'IUDEI', 'IUDEU', 'IUGAR', 'IUIAI', 'IUIAM', 'IUIAU', 'IUIND', 'IUIRA', 'IUIRE', 'IUIRI', 'IUISE', 'IUISI', 'IUITI', 'IULIE', 'IUNIE', 'IURAS', 'IURES', 'IURTA', 'IURTE', 'IURUS', 'IUSCA', 'IUSNI', 'IUSTI', 'IUSUL', 'IUTAR', 'IUTEA', 'IUTEI', 'IUTII', 'IUTIM', 'IUTIT', 'IUXTA', 'IUXTE', 'IVARE', 'IVEAI', 'IVEAM', 'IVEAU', 'IVELI', 'IVERE', 'IVESC', 'IVIND', 'IVIRA', 'IVIRE', 'IVIRI', 'IVISE', 'IVISI', 'IVITA', 'IVITE', 'IVITI', 'IVRIT', 'IZBEA', 'IZBEI', 'IZBII', 'IZBIM', 'IZBIT', 'IZBUC', 'IZDAT', 'IZINA', 'IZINE', 'IZINI', 'IZLAZ', 'IZMEI', 'IZOLA', 'IZURI', 'IZVOD', 'IZVOR', 'JABIA', 'JABIE', 'JABII', 'JABOU', 'JABRA', 'JABRE', 'JABUL', 'JACAI', 'JACAS', 'JACII', 'JACUL', 'JADUL', 'JAFUL', 'JAIUL', 'JALBA', 'JALBE', 'JALBI', 'JALEA', 'JALEI', 'JALEO', 'JALES', 'JALET', 'JALON', 'JAMBA', 'JAMBE', 'JAMBU', 'JAMEI', 'JAMNA', 'JAMNE', 'JANTA', 'JANTE', 'JAPCA', 'JAPEI', 'JAPII', 'JAPIU', 'JAPON', 'JAPSA', 'JAPSE', 'JAPSI', 'JAPUL', 'JARCA', 'JARCI', 'JARDA', 'JARDE', 'JAREA', 'JARET', 'JARII', 'JARIM', 'JARIT', 'JARUI', 'JARUL', 'JAVEI', 'JAVRA', 'JAVRE', 'JAZUL', 'JDERI', 'JEANS', 'JEBUL', 'JECUI', 'JEFUI', 'JEGOS', 'JEGUL', 'JEJUN', 'JELEA', 'JELEI', 'JELER', 'JELEU', 'JELII', 'JELIM', 'JELIT', 'JELUI', 'JENAI', 'JENAM', 'JENAT', 'JENAU', 'JENEI', 'JENEZ', 'JEPCI', 'JEPII', 'JEPUL', 'JERBA', 'JERBE', 'JERSE', 'JERUI', 'JETAJ', 'JETEU', 'JETON', 'JETOU', 'JETUL', 'JIANA', 'JIBEI', 'JIBII', 'JIBUL', 'JICNI', 'JIDAN', 'JIDOV', 'JIENE', 'JIENI', 'JIGLA', 'JIGLE', 'JIGNI', 'JIGOU', 'JIGUL', 'JIHAD', 'JILAV', 'JILIP', 'JIMBA', 'JIPAN', 'JIPAT', 'JIPII', 'JIPUL', 'JIRAV', 'JIRUL', 'JITAR', 'JITIA', 'JITIE', 'JITII', 'JNEAP', 'JNEPI', 'JOACA', 'JOACE', 'JOASA', 'JOASE', 'JOBEN', 'JOBUL', 'JOCOT', 'JOCUL', 'JOCUT', 'JOFRA', 'JOFRE', 'JOIAI', 'JOIAM', 'JOIAN', 'JOIAU', 'JOILE', 'JOIND', 'JOIRA', 'JOIRE', 'JOIRI', 'JOISE', 'JOISI', 'JOITA', 'JOITE', 'JOITI', 'JOJEI', 'JOKER', 'JONCA', 'JONCI', 'JOSII', 'JOSUL', 'JOTEI', 'JOULE', 'JOULI', 'JUBEE', 'JUBEU', 'JUCAI', 'JUCAM', 'JUCAT', 'JUCAU', 'JUDEC', 'JUDET', 'JUGAL', 'JUGAN', 'JUGAR', 'JUGUL', 'JUICE', 'JUISA', 'JUJAU', 'JUJEU', 'JUJUB', 'JULEA', 'JULEP', 'JULFA', 'JULFE', 'JULII', 'JULIM', 'JULIT', 'JUMBO', 'JUNCA', 'JUNCI', 'JUNEI', 'JUNEL', 'JUNIA', 'JUNIE', 'JUNII', 'JUNTA', 'JUNTE', 'JUPAI', 'JUPAN', 'JUPEA', 'JUPEI', 'JUPII', 'JUPIM', 'JUPIT', 'JUPOI', 'JUPON', 'JUPUI', 'JURAI', 'JURAM', 'JURAT', 'JURAU', 'JURII', 'JURIU', 'JURUI', 'JURUL', 'JUSTA', 'JUSTE', 'JUSTI', 'JUVAT', 'JUXTA', 'JUXTE', 'JUZII', 'KABIL', 'KAGUL', 'KAKIA', 'KAKIE', 'KAKII', 'KAKIU', 'KALAM', 'KALIU', 'KAMEI', 'KAMII', 'KAONI', 'KAPPA', 'KARMA', 'KARME', 'KAVEI', 'KAZAH', 'KAZOO', 'KEAUL', 'KEDIV', 'KENAF', 'KENDO', 'KERII', 'KERUL', 'KETCH', 'KETEI', 'KEVIR', 'KHMER', 'KIANG', 'KILUL', 'KINAS', 'KINEI', 'KIPII', 'KIPUL', 'KITUL', 'KOALA', 'KOBII', 'KOBUL', 'KODAK', 'KOGAI', 'KOINE', 'KOREA', 'KOREI', 'KOVAR', 'KRAAL', 'KRAFT', 'KRILL', 'KUBEI', 'KUDUL', 'KULAN', 'KUMEL', 'KURDA', 'KURDE', 'KURZI', 'KYATI', 'KYRIE', 'LABAN', 'LABEI', 'LABEL', 'LABIA', 'LABIE', 'LABII', 'LABIL', 'LABIO', 'LABIU', 'LABOS', 'LABRI', 'LABRU', 'LABUL', 'LACAR', 'LACAS', 'LACAT', 'LACOM', 'LACRA', 'LACRE', 'LACSI', 'LACTI', 'LACTO', 'LACUI', 'LACUL', 'LADIN', 'LADOI', 'LAFAI', 'LAFUL', 'LAGAR', 'LAGON', 'LAGUM', 'LAHAR', 'LAICA', 'LAICE', 'LAICI', 'LAIEI', 'LAIES', 'LAIET', 'LAILE', 'LAITA', 'LAITE', 'LAIUL', 'LALAI', 'LALAU', 'LALEA', 'LAMAI', 'LAMAM', 'LAMAT', 'LAMAU', 'LAMBA', 'LAMBE', 'LAMEI', 'LAMEZ', 'LAMPA', 'LAMPI', 'LANCE', 'LANCI', 'LANDA', 'LANDE', 'LANEI', 'LANGA', 'LANII', 'LANOS', 'LANSA', 'LANUL', 'LAPAD', 'LAPAI', 'LAPID', 'LAPIN', 'LAPIS', 'LAPIT', 'LAPON', 'LAPTE', 'LAPTI', 'LAREA', 'LARGA', 'LARGI', 'LARGO', 'LARII', 'LARMA', 'LARME', 'LARUL', 'LARVA', 'LARVE', 'LARVI', 'LASAI', 'LASAM', 'LASAT', 'LASAU', 'LASEI', 'LASER', 'LASEZ', 'LASII', 'LASOU', 'LASUL', 'LATEA', 'LATEI', 'LATER', 'LATES', 'LATEX', 'LATII', 'LATIM', 'LATIN', 'LATIR', 'LATIS', 'LATIT', 'LATOC', 'LATOS', 'LATRA', 'LATRE', 'LATRI', 'LATRU', 'LATUL', 'LATUR', 'LAUDA', 'LAUDE', 'LAURA', 'LAURI', 'LAUSE', 'LAUSI', 'LAUTA', 'LAUTE', 'LAUTI', 'LAUZA', 'LAUZE', 'LAUZI', 'LAVAJ', 'LAVEI', 'LAVIU', 'LAVRA', 'LAVRE', 'LAXEI', 'LAXUL', 'LAZII', 'LAZUI', 'LAZUL', 'LAZZI', 'LEACA', 'LEAFA', 'LEAGA', 'LEAHA', 'LEALA', 'LEALE', 'LEALI', 'LEASA', 'LEBAR', 'LEBES', 'LECII', 'LECIT', 'LECUI', 'LECUT', 'LEDUL', 'LEFII', 'LEFTI', 'LEGAI', 'LEGAL', 'LEGAM', 'LEGAN', 'LEGAT', 'LEGAU', 'LEGEA', 'LEGHE', 'LEGIC', 'LEGII', 'LEGUL', 'LEHAI', 'LEHAU', 'LEICA', 'LEICI', 'LEITA', 'LEITE', 'LEITI', 'LEJER', 'LEKUL', 'LELEA', 'LELEI', 'LELEU', 'LELII', 'LEMEI', 'LEMNE', 'LEMUL', 'LENAJ', 'LENCI', 'LENEA', 'LENEI', 'LENES', 'LENII', 'LENIM', 'LENIT', 'LENOS', 'LENTA', 'LENTE', 'LENTI', 'LENTO', 'LEONE', 'LEONI', 'LEPAD', 'LEPAI', 'LEPRA', 'LEPRE', 'LEPSE', 'LEPSI', 'LEPTA', 'LEPTE', 'LEPTO', 'LEPUI', 'LEROI', 'LERUI', 'LERUL', 'LESEI', 'LESIA', 'LESIE', 'LESII', 'LESIN', 'LESNE', 'LESOI', 'LESTA', 'LESTE', 'LESUI', 'LESUL', 'LETAL', 'LETCA', 'LETCI', 'LETII', 'LETON', 'LEUAS', 'LEUCA', 'LEUCI', 'LEUCO', 'LEUTI', 'LEVEI', 'LEVIT', 'LEXEM', 'LEXIA', 'LEXIC', 'LEXIE', 'LEXII', 'LEZAI', 'LEZAM', 'LEZAT', 'LEZAU', 'LEZEZ', 'LIAJE', 'LIANA', 'LIANE', 'LIANT', 'LIARA', 'LIASE', 'LIASI', 'LIATA', 'LIATE', 'LIATI', 'LIAZA', 'LIAZE', 'LIBEL', 'LIBER', 'LIBOV', 'LICAR', 'LICEE', 'LICEU', 'LICIT', 'LICUR', 'LIDER', 'LIDIC', 'LIENO', 'LIERE', 'LIERI', 'LIEZE', 'LIEZI', 'LIFTA', 'LIFTE', 'LIGAV', 'LIGII', 'LIGNI', 'LIGNO', 'LIGUL', 'LIGUR', 'LIHAI', 'LIHNI', 'LIIND', 'LIMAN', 'LIMAX', 'LIMBA', 'LIMBI', 'LIMEI', 'LIMEN', 'LIMES', 'LIMFA', 'LIMFE', 'LIMFO', 'LIMIN', 'LIMNI', 'LIMNO', 'LIMON', 'LIMUL', 'LIMUS', 'LINCA', 'LINEI', 'LINER', 'LINGA', 'LINGE', 'LINGI', 'LINIA', 'LINIE', 'LINII', 'LINIO', 'LINKS', 'LINON', 'LINOU', 'LINSA', 'LINSE', 'LINSI', 'LINTE', 'LINTI', 'LINUL', 'LIOTA', 'LIOTE', 'LIPAI', 'LIPAN', 'LIPCA', 'LIPEA', 'LIPEI', 'LIPIA', 'LIPIE', 'LIPII', 'LIPIM', 'LIPIT', 'LIPOM', 'LIPSA', 'LIPSE', 'LIPSI', 'LIPUL', 'LIRAT', 'LIREI', 'LIRIC', 'LISAI', 'LISAM', 'LISAT', 'LISAU', 'LISEI', 'LISEZ', 'LISII', 'LISTA', 'LISTE', 'LISUL', 'LITEI', 'LITIA', 'LITIC', 'LITIE', 'LITII', 'LITIU', 'LITOU', 'LITRA', 'LITRE', 'LITRI', 'LITRU', 'LIUDE', 'LIUZI', 'LIVAN', 'LIVID', 'LIVRA', 'LIVRE', 'LIZAI', 'LIZAM', 'LIZAT', 'LIZAU', 'LIZEI', 'LIZEZ', 'LIZOL', 'LOAZA', 'LOAZE', 'LOBAI', 'LOBAM', 'LOBAR', 'LOBAT', 'LOBAU', 'LOBBY', 'LOBDA', 'LOBDE', 'LOBEZ', 'LOBII', 'LOBUL', 'LOCAL', 'LOCAS', 'LOCEI', 'LOCEL', 'LOCII', 'LOCMA', 'LOCUI', 'LOCUL', 'LOCUS', 'LODBA', 'LODBE', 'LODEN', 'LOESS', 'LOFAI', 'LOFAM', 'LOFAT', 'LOFAU', 'LOFEZ', 'LOGIA', 'LOGIC', 'LOGIE', 'LOGII', 'LOGOS', 'LOHAN', 'LOHII', 'LOHIO', 'LOIAL', 'LOJEI', 'LOJII', 'LOMBE', 'LOMUL', 'LONGI', 'LONJA', 'LONJE', 'LORAN', 'LORAR', 'LORII', 'LORIS', 'LORZI', 'LOTCA', 'LOTCI', 'LOTEI', 'LOTON', 'LOTRI', 'LOTRU', 'LOTUL', 'LOTUS', 'LOURE', 'LOVEA', 'LOVII', 'LOVIM', 'LOVIT', 'LOZIA', 'LOZIE', 'LOZII', 'LOZUL', 'LUAND', 'LUARA', 'LUARE', 'LUARI', 'LUASE', 'LUASI', 'LUATA', 'LUATE', 'LUATI', 'LUCEA', 'LUCIA', 'LUCID', 'LUCIE', 'LUCII', 'LUCIM', 'LUCIS', 'LUCIT', 'LUCIU', 'LUCRA', 'LUCRE', 'LUCRI', 'LUCRU', 'LUCSI', 'LUDEA', 'LUDEI', 'LUDIC', 'LUDUL', 'LUETA', 'LUETE', 'LUFAR', 'LUFEI', 'LUFTA', 'LUGOL', 'LUJER', 'LULEA', 'LUMEA', 'LUMEN', 'LUMET', 'LUMII', 'LUNAR', 'LUNCA', 'LUNCH', 'LUNCI', 'LUNEA', 'LUNEC', 'LUNGA', 'LUNGI', 'LUNIC', 'LUNII', 'LUPAN', 'LUPEI', 'LUPIA', 'LUPIC', 'LUPIE', 'LUPII', 'LUPIN', 'LUPIU', 'LUPOI', 'LUPOM', 'LUPON', 'LUPTA', 'LUPTE', 'LUPTI', 'LUPUL', 'LUPUS', 'LUREX', 'LUSAI', 'LUSAM', 'LUSAT', 'LUSAU', 'LUSEI', 'LUSEZ', 'LUSII', 'LUSIN', 'LUSUL', 'LUTEO', 'LUTOS', 'LUTRA', 'LUTRE', 'LUTRU', 'LUTUI', 'LUTUL', 'LUXAI', 'LUXAM', 'LUXAT', 'LUXAU', 'LUXEZ', 'LUXOS', 'LUXUL', 'LUZII', 'LYCRA', 'MACAC', 'MACAI', 'MACAR', 'MACAT', 'MACAU', 'MACAZ', 'MACEL', 'MACES', 'MACHE', 'MACHI', 'MACHO', 'MACII', 'MACIN', 'MACLA', 'MACLE', 'MACRA', 'MACRE', 'MACRI', 'MACRO', 'MACRU', 'MACUL', 'MADAM', 'MADEA', 'MAFIA', 'MAFIE', 'MAFII', 'MAGAN', 'MAGAR', 'MAGIA', 'MAGIC', 'MAGIE', 'MAGII', 'MAGLA', 'MAGLE', 'MAGMA', 'MAGME', 'MAGNA', 'MAGNI', 'MAGNO', 'MAGOT', 'MAGUL', 'MAHAR', 'MAHNI', 'MAHON', 'MAHUT', 'MAIAL', 'MAICA', 'MAICE', 'MAICI', 'MAIEI', 'MAIEU', 'MAINA', 'MAIND', 'MAINE', 'MAINI', 'MAIOR', 'MAIOU', 'MAISA', 'MAISE', 'MAIUG', 'MAIUL', 'MAIUT', 'MAJAR', 'MAJER', 'MAJII', 'MAJOR', 'MAJUR', 'MAKII', 'MALAC', 'MALAI', 'MALAR', 'MALCI', 'MALEA', 'MALIC', 'MALII', 'MALIM', 'MALIN', 'MALIT', 'MALOS', 'MALUL', 'MALUT', 'MAMAR', 'MAMBA', 'MAMBO', 'MAMEI', 'MAMON', 'MAMOS', 'MAMUT', 'MANAF', 'MANAI', 'MANAM', 'MANAS', 'MANAT', 'MANAU', 'MANCA', 'MANCE', 'MANCI', 'MANCO', 'MANEA', 'MANEC', 'MANEI', 'MANEJ', 'MANEM', 'MANER', 'MANGO', 'MANIA', 'MANIE', 'MANII', 'MANJI', 'MANOS', 'MANSA', 'MANSE', 'MANTA', 'MANTE', 'MANUI', 'MANUL', 'MANZA', 'MANZE', 'MAORI', 'MAPEI', 'MARAI', 'MARAN', 'MARAR', 'MARAZ', 'MARCA', 'MARCI', 'MARDA', 'MARDI', 'MAREA', 'MAREE', 'MAREI', 'MARET', 'MARFA', 'MARFI', 'MARGA', 'MARGE', 'MARIA', 'MARIE', 'MARII', 'MARIM', 'MARIN', 'MARIT', 'MARJA', 'MARJE', 'MARLI', 'MARNA', 'MARNE', 'MAROI', 'MARON', 'MARSA', 'MARSE', 'MARTE', 'MARTI', 'MARUL', 'MARUT', 'MASAI', 'MASAJ', 'MASAM', 'MASAR', 'MASAT', 'MASAU', 'MASCA', 'MASEA', 'MASEI', 'MASER', 'MASEZ', 'MASIC', 'MASII', 'MASIV', 'MASLA', 'MASLE', 'MASLU', 'MASOI', 'MASON', 'MASOR', 'MASTA', 'MASTE', 'MASTI', 'MASTO', 'MASUL', 'MATAI', 'MATAM', 'MATAN', 'MATAR', 'MATAT', 'MATAU', 'MATCA', 'MATCI', 'MATEI', 'MATER', 'MATEZ', 'MATII', 'MATOI', 'MATOL', 'MATOR', 'MATRI', 'MATRO', 'MATUC', 'MATUF', 'MATUL', 'MATUR', 'MAURA', 'MAURE', 'MAURI', 'MAXIM', 'MAXIT', 'MAYAS', 'MAYEI', 'MAZAL', 'MAZGA', 'MAZGI', 'MAZIL', 'MAZUL', 'MAZUR', 'MAZUT', 'MEARA', 'MEATO', 'MECAI', 'MECET', 'MEDIA', 'MEDIC', 'MEDIE', 'MEDII', 'MEDIO', 'MEDIU', 'MEDUL', 'MEFIA', 'MEFIE', 'MEGAL', 'MEHAI', 'MEIUL', 'MEJDA', 'MEJDE', 'MELAN', 'MELCI', 'MELEU', 'MELIA', 'MELIC', 'MELII', 'MELIT', 'MELOD', 'MELOE', 'MELON', 'MELOS', 'MELUL', 'MENAJ', 'MENEA', 'MENII', 'MENIM', 'MENIT', 'MENIU', 'MENOU', 'MENTA', 'MENTE', 'MENUR', 'MERAR', 'MEREI', 'MEREM', 'MEREU', 'MERGE', 'MERGI', 'MERII', 'MERIT', 'MERLU', 'MERSE', 'MERSI', 'MERUL', 'MESAJ', 'MESAS', 'MESEA', 'MESEI', 'MESIA', 'MESII', 'MESIM', 'MESIT', 'MESTO', 'MESUL', 'METAL', 'METAN', 'METEC', 'METEO', 'METIL', 'METIS', 'METOC', 'METOD', 'METOH', 'METOL', 'METOP', 'METRI', 'METRO', 'METRU', 'MEZAT', 'MEZEL', 'MEZII', 'MEZIN', 'MEZON', 'MEZZO', 'MIALA', 'MIARE', 'MIAUA', 'MIAUL', 'MIAUN', 'MIAUT', 'MIAZA', 'MIAZE', 'MICEA', 'MICEI', 'MICET', 'MICII', 'MICIM', 'MICIT', 'MICRO', 'MICUL', 'MICUT', 'MIDIA', 'MIDIE', 'MIDII', 'MIEII', 'MIEJI', 'MIELE', 'MIELO', 'MIERE', 'MIERI', 'MIEZI', 'MIGAI', 'MIGMA', 'MIGME', 'MIGRA', 'MIILE', 'MIIME', 'MIIMI', 'MIJEA', 'MIJII', 'MIJIM', 'MIJIT', 'MILAN', 'MILEI', 'MILOG', 'MILOS', 'MILUI', 'MILUL', 'MIMAI', 'MIMAM', 'MIMAT', 'MIMAU', 'MIMEI', 'MIMEZ', 'MIMIC', 'MIMII', 'MIMUL', 'MINAI', 'MINAJ', 'MINAM', 'MINAT', 'MINAU', 'MINEI', 'MINER', 'MINEZ', 'MINGE', 'MINGI', 'MINIA', 'MINIE', 'MINIM', 'MINIU', 'MINOR', 'MINTA', 'MINTE', 'MINTI', 'MINUS', 'MINUT', 'MIONE', 'MIONI', 'MIOPI', 'MIORC', 'MIORI', 'MIOZA', 'MIOZE', 'MIRAI', 'MIRAJ', 'MIRAM', 'MIRAS', 'MIRAT', 'MIRAU', 'MIRAZ', 'MIREI', 'MIREL', 'MIREZ', 'MIRHA', 'MIRHE', 'MIRIA', 'MIRIE', 'MIRII', 'MIROS', 'MIRTI', 'MIRUI', 'MIRUL', 'MISCA', 'MISEA', 'MISEI', 'MISEL', 'MISIA', 'MISIE', 'MISII', 'MISIL', 'MISIR', 'MISIT', 'MISTE', 'MISTI', 'MISTO', 'MISUI', 'MISUN', 'MITEA', 'MITEI', 'MITEL', 'MITIC', 'MITII', 'MITIM', 'MITIT', 'MITOC', 'MITOS', 'MITRA', 'MITRE', 'MITUI', 'MITUL', 'MIUON', 'MIXAI', 'MIXAJ', 'MIXAM', 'MIXAT', 'MIXAU', 'MIXER', 'MIXEZ', 'MIXIA', 'MIXIE', 'MIXII', 'MIXOM', 'MIXTA', 'MIXTE', 'MIZAI', 'MIZAM', 'MIZAT', 'MIZAU', 'MIZEI', 'MIZER', 'MIZEZ', 'MIZID', 'MLACA', 'MLACI', 'MLADA', 'MLAJA', 'MLAJI', 'MLAZI', 'MNEMA', 'MNEME', 'MNEMO', 'MOACA', 'MOACE', 'MOAIE', 'MOALE', 'MOARA', 'MOARE', 'MOASA', 'MOASE', 'MOATA', 'MOATE', 'MOAUL', 'MOAZA', 'MOAZE', 'MOBIL', 'MOCAI', 'MOCAN', 'MOCEA', 'MOCII', 'MOCIM', 'MOCIT', 'MOCNI', 'MOCUL', 'MODAL', 'MODEI', 'MODEL', 'MODEM', 'MODER', 'MODIC', 'MODRE', 'MODRU', 'MODUL', 'MODUS', 'MOGUL', 'MOHOR', 'MOILE', 'MOIMA', 'MOIME', 'MOINA', 'MOINE', 'MOJAR', 'MOJIC', 'MOLAI', 'MOLAL', 'MOLAM', 'MOLAN', 'MOLAR', 'MOLAT', 'MOLAU', 'MOLDA', 'MOLDE', 'MOLDO', 'MOLEI', 'MOLET', 'MOLEZ', 'MOLIA', 'MOLID', 'MOLIE', 'MOLII', 'MOLOH', 'MOLON', 'MOLOS', 'MOLOZ', 'MOLTO', 'MOLUL', 'MOMAI', 'MOMEA', 'MOMII', 'MOMIM', 'MOMIT', 'MONAC', 'MONDO', 'MONEM', 'MONGO', 'MONIC', 'MONOM', 'MONTA', 'MONTE', 'MOPSI', 'MOPUL', 'MORAL', 'MORAR', 'MORAV', 'MOREI', 'MORFO', 'MORGA', 'MORGI', 'MORIA', 'MORII', 'MORNA', 'MORNE', 'MORNI', 'MOROI', 'MORON', 'MORSA', 'MORSE', 'MORTI', 'MORUA', 'MORUE', 'MORUN', 'MORVA', 'MORVE', 'MOSAN', 'MOSEA', 'MOSIA', 'MOSIC', 'MOSIE', 'MOSII', 'MOSIM', 'MOSIT', 'MOSOR', 'MOSSO', 'MOSTI', 'MOSUC', 'MOSUL', 'MOTAI', 'MOTAM', 'MOTAN', 'MOTAT', 'MOTAU', 'MOTCA', 'MOTCI', 'MOTEL', 'MOTET', 'MOTEZ', 'MOTII', 'MOTIV', 'MOTOC', 'MOTOR', 'MOTTO', 'MOTUL', 'MOUSE', 'MOVUL', 'MOXEI', 'MOZAN', 'MOZOC', 'MOZOL', 'MREJA', 'MREJE', 'MREJI', 'MRENE', 'MUCAR', 'MUCEA', 'MUCED', 'MUCHE', 'MUCHI', 'MUCII', 'MUCOR', 'MUCOS', 'MUCUL', 'MUCUS', 'MUDIR', 'MUFEI', 'MUFLA', 'MUFLE', 'MUGEA', 'MUGET', 'MUGII', 'MUGIM', 'MUGIT', 'MUGUR', 'MUHUR', 'MUIAI', 'MUIAJ', 'MUIAM', 'MUIAT', 'MUIAU', 'MUICA', 'MUICI', 'MUIEM', 'MUIND', 'MUJIC', 'MULAI', 'MULAJ', 'MULAM', 'MULAT', 'MULAU', 'MULEI', 'MULEZ', 'MULGA', 'MULGE', 'MULGI', 'MULII', 'MULSA', 'MULSE', 'MULSI', 'MULTA', 'MULTE', 'MULTI', 'MULUL', 'MUMEI', 'MUMIA', 'MUMIE', 'MUMII', 'MUNCA', 'MUNCI', 'MUNDA', 'MUNDI', 'MUNGO', 'MUNTE', 'MUNTI', 'MURAI', 'MURAL', 'MURAM', 'MURAT', 'MURAU', 'MUREA', 'MUREI', 'MUREX', 'MUREZ', 'MURGA', 'MURGI', 'MURID', 'MURII', 'MURIM', 'MURIN', 'MURIS', 'MURIT', 'MURSA', 'MURSE', 'MURUI', 'MURUL', 'MUSAI', 'MUSAT', 'MUSAU', 'MUSCA', 'MUSCI', 'MUSEI', 'MUSII', 'MUSIU', 'MUSLI', 'MUSON', 'MUSTE', 'MUSTI', 'MUSUL', 'MUTAI', 'MUTAM', 'MUTAT', 'MUTAU', 'MUTEA', 'MUTEI', 'MUTIA', 'MUTIC', 'MUTIE', 'MUTII', 'MUTIM', 'MUTIT', 'MUTIU', 'MUTON', 'MUTRA', 'MUTRE', 'MUTUL', 'MUZEE', 'MUZEI', 'MUZEO', 'MUZEU', 'MUZIC', 'NABAB', 'NABOI', 'NABOR', 'NABUC', 'NABUS', 'NACAZ', 'NACRU', 'NADAI', 'NADEI', 'NADEL', 'NADIR', 'NADOL', 'NADUF', 'NADUH', 'NAFEA', 'NAFTA', 'NAFTE', 'NAGAT', 'NAHUR', 'NAHUT', 'NAIBA', 'NAICA', 'NAICI', 'NAIEI', 'NAIER', 'NAILE', 'NAIMI', 'NAIRA', 'NAIRE', 'NAIST', 'NAIUL', 'NAIVA', 'NAIVE', 'NAIVI', 'NAJEA', 'NAJII', 'NAJIM', 'NAJIT', 'NAJNA', 'NAJNE', 'NALBA', 'NALBE', 'NALBI', 'NALTA', 'NALTE', 'NALTI', 'NAMAZ', 'NAMEA', 'NAMII', 'NAMIM', 'NAMIT', 'NAMOL', 'NANAS', 'NANDU', 'NANEI', 'NANII', 'NANUL', 'NAPAI', 'NAPAM', 'NAPAT', 'NAPAU', 'NAPEZ', 'NAPII', 'NAPUL', 'NARAI', 'NARAM', 'NARAT', 'NARAU', 'NARAV', 'NARCO', 'NAREA', 'NAREZ', 'NARII', 'NARNA', 'NAROD', 'NARUI', 'NASCA', 'NASCU', 'NASEA', 'NASEI', 'NASEL', 'NASIA', 'NASIC', 'NASIE', 'NASII', 'NASIM', 'NASIP', 'NASIT', 'NASLI', 'NASOI', 'NASOL', 'NASOS', 'NASTE', 'NASTI', 'NASUC', 'NASUI', 'NASUL', 'NASUT', 'NATAL', 'NATIA', 'NATIE', 'NATII', 'NATIV', 'NATRA', 'NATRE', 'NATUL', 'NATUR', 'NAUCA', 'NAUCE', 'NAUCI', 'NAUTO', 'NAVAL', 'NAVEI', 'NAVLU', 'NAVOD', 'NAZAL', 'NAZAR', 'NAZII', 'NAZIR', 'NAZUI', 'NAZUL', 'NEAGA', 'NEAMT', 'NEANT', 'NEAOS', 'NEAUA', 'NEAZA', 'NEBUN', 'NECAZ', 'NECRO', 'NECUM', 'NEDEI', 'NEDER', 'NEFEI', 'NEFEL', 'NEFER', 'NEFLA', 'NEFLE', 'NEFRO', 'NEGAI', 'NEGAM', 'NEGAT', 'NEGAU', 'NEGEI', 'NEGEL', 'NEGII', 'NEGOS', 'NEGOT', 'NEGRE', 'NEGRI', 'NEGRO', 'NEGRU', 'NEGUI', 'NEGUL', 'NEGUS', 'NEICA', 'NEIOS', 'NEMAT', 'NEMES', 'NEMET', 'NEMIC', 'NEMTI', 'NEMUT', 'NENEA', 'NENEI', 'NENIA', 'NENIC', 'NENIE', 'NENII', 'NENUT', 'NEPEI', 'NEPER', 'NEPOT', 'NEPUS', 'NERAS', 'NEROD', 'NERVI', 'NESAT', 'NESTE', 'NESUL', 'NETED', 'NETEI', 'NETEZ', 'NETII', 'NETOT', 'NETUL', 'NEUMA', 'NEUME', 'NEURI', 'NEURO', 'NEVEU', 'NEVIA', 'NEVIE', 'NEVII', 'NEVIU', 'NEVOD', 'NEVOI', 'NEVRI', 'NEVRO', 'NEVUL', 'NEXUL', 'NICIO', 'NICOL', 'NICTI', 'NICTO', 'NIDUS', 'NIELA', 'NIELE', 'NIMBA', 'NIMFA', 'NIMFE', 'NIMFO', 'NIMIC', 'NINGA', 'NINGE', 'NINJA', 'NINSA', 'NINSE', 'NINSI', 'NIPER', 'NIPLU', 'NIPON', 'NISEI', 'NISIP', 'NISTE', 'NITEI', 'NITEL', 'NITII', 'NITRA', 'NITRO', 'NITUI', 'NITUL', 'NIVAL', 'NIVEL', 'NIXEI', 'NIXIS', 'NIZAM', 'NOADA', 'NOADE', 'NOBIL', 'NOCIV', 'NOCTI', 'NODAL', 'NODOS', 'NODUL', 'NOEMA', 'NOEME', 'NOEZA', 'NOEZE', 'NOGAI', 'NOIAN', 'NOILE', 'NOIMA', 'NOIME', 'NOIMI', 'NOITA', 'NOITE', 'NOMAD', 'NOMEI', 'NOMOL', 'NOMUL', 'NONEI', 'NONET', 'NONEU', 'NOPAI', 'NOPAL', 'NOPAM', 'NOPAT', 'NOPAU', 'NOPEU', 'NOPEZ', 'NOPTI', 'NOREA', 'NOREI', 'NORII', 'NORIT', 'NORMA', 'NORME', 'NORMO', 'NOROC', 'NOROD', 'NOROI', 'NOROS', 'NORUL', 'NORUT', 'NOSTI', 'NOTAI', 'NOTAM', 'NOTAR', 'NOTAT', 'NOTAU', 'NOTEI', 'NOTES', 'NOTEZ', 'NOUAI', 'NOUAR', 'NOURA', 'NOURI', 'NOUTA', 'NOUTE', 'NOUTI', 'NOVAC', 'NOVAI', 'NOVAM', 'NOVAT', 'NOVAU', 'NOVEI', 'NOVEZ', 'NOXEI', 'NUBIL', 'NUBUC', 'NUCAL', 'NUCAR', 'NUCET', 'NUCII', 'NUCLE', 'NUCUL', 'NUCUT', 'NUDEI', 'NUDUL', 'NUFAR', 'NULEI', 'NULII', 'NULUL', 'NUMAI', 'NUMAR', 'NUMEA', 'NUMEN', 'NUMII', 'NUMIM', 'NUMIT', 'NUNEI', 'NUNII', 'NUNTA', 'NUNTI', 'NUNUL', 'NUORI', 'NURCA', 'NURCI', 'NURII', 'NURSA', 'NURSE', 'NURUL', 'NUTRI', 'NUTUI', 'NUTUL', 'NUZII', 'NYAYA', 'NYAYE', 'OABLA', 'OABLE', 'OACAN', 'OACAR', 'OAGEI', 'OALEI', 'OARBA', 'OARBE', 'OARDA', 'OARDE', 'OAREI', 'OARZE', 'OASEI', 'OASPE', 'OASTE', 'OAZEI', 'OBADA', 'OBAHT', 'OBARI', 'OBELA', 'OBELE', 'OBERI', 'OBEZA', 'OBEZE', 'OBEZI', 'OBIDA', 'OBIDE', 'OBIDI', 'OBIUL', 'OBLAT', 'OBLEA', 'OBLET', 'OBLIC', 'OBLIG', 'OBLII', 'OBLIM', 'OBLIT', 'OBLON', 'OBLUL', 'OBOLI', 'OBORA', 'OBORI', 'OBOSI', 'OBOTE', 'OBRAT', 'OBRAZ', 'OBROC', 'OBRON', 'OBSTE', 'OBSTI', 'OBTIE', 'OBTII', 'OBTIN', 'OBTIU', 'OBTUZ', 'OBUZE', 'OCAIA', 'OCAIE', 'OCAIT', 'OCALE', 'OCARA', 'OCARI', 'OCAUA', 'OCEAN', 'OCELI', 'OCHEA', 'OCHET', 'OCHII', 'OCHIM', 'OCHIT', 'OCHLO', 'OCILE', 'OCINA', 'OCINI', 'OCLUS', 'OCNAS', 'OCNEI', 'OCOLI', 'OCRUL', 'OCTAL', 'OCTAN', 'OCTET', 'OCULO', 'OCULT', 'OCUPA', 'OCUPE', 'OCUPI', 'OCURG', 'OCURS', 'ODAIA', 'ODAIE', 'ODAII', 'ODATA', 'ODELE', 'ODEON', 'ODGON', 'ODINA', 'ODINE', 'ODINI', 'ODINO', 'ODIOS', 'ODIUL', 'ODONT', 'ODORI', 'OESAR', 'OFERA', 'OFERE', 'OFERI', 'OFFUL', 'OFILI', 'OFISE', 'OFISM', 'OFIUR', 'OFSET', 'OFTAI', 'OFTAM', 'OFTAT', 'OFTAU', 'OFTEZ', 'OFTIC', 'OFTIG', 'OFTUL', 'OFURI', 'OFUSC', 'OGARI', 'OGEAC', 'OGEAG', 'OGECE', 'OGEGE', 'OGIVA', 'OGIVE', 'OGOIA', 'OGOIE', 'OGOII', 'OGOIM', 'OGOIT', 'OGORA', 'OGORI', 'OHABA', 'OHABE', 'OHMIC', 'OHMII', 'OHMUL', 'OIAGA', 'OIDEA', 'OIDIA', 'OIDIE', 'OIDII', 'OIEGI', 'OIERI', 'OIESC', 'OILOR', 'OINEI', 'OISTE', 'OISTI', 'OITEI', 'OJELE', 'OJINA', 'OJINE', 'OJINI', 'OJOGI', 'OKAPI', 'OKUME', 'OLACE', 'OLACI', 'OLANA', 'OLANE', 'OLANI', 'OLARI', 'OLATE', 'OLCAR', 'OLEAB', 'OLEAT', 'OLEIA', 'OLEIC', 'OLEIE', 'OLEOM', 'OLEUL', 'OLEUM', 'OLIGO', 'OLITA', 'OLITE', 'OLIVA', 'OLIVE', 'OLMAZ', 'OLMII', 'OLMUL', 'OLOGI', 'OLOIA', 'OLOII', 'OLOIM', 'OLOIT', 'OLORI', 'OLOZI', 'OLPEI', 'OLTAR', 'OLURI', 'OLUTE', 'OMAGI', 'OMBRO', 'OMEGA', 'OMENI', 'OMENT', 'OMETI', 'OMFAL', 'OMIDA', 'OMISA', 'OMISE', 'OMISI', 'OMITA', 'OMITE', 'OMITI', 'OMIZI', 'OMNIA', 'OMOII', 'OMORA', 'OMORI', 'ONEST', 'ONICO', 'ONIRO', 'ONOMA', 'ONORA', 'ONORI', 'ONTIC', 'ONURI', 'OOCIT', 'OOFIT', 'OOFOR', 'OOGON', 'OOLIT', 'OOZOM', 'OPACA', 'OPACE', 'OPACI', 'OPAIT', 'OPALE', 'OPARI', 'OPERA', 'OPERE', 'OPIAT', 'OPINA', 'OPISE', 'OPIST', 'OPIUL', 'OPIUM', 'OPREA', 'OPREG', 'OPRII', 'OPRIM', 'OPRIT', 'OPSAS', 'OPSPE', 'OPTAI', 'OPTAM', 'OPTAR', 'OPTAT', 'OPTAU', 'OPTEZ', 'OPTIC', 'OPTIM', 'OPTUL', 'OPUIE', 'OPUNA', 'OPUNE', 'OPURI', 'OPUSA', 'OPUSE', 'OPUSI', 'OPUST', 'ORAJE', 'ORALA', 'ORALE', 'ORALI', 'ORAND', 'ORANJ', 'ORANT', 'ORANZ', 'ORARA', 'ORARE', 'ORARI', 'ORASE', 'ORBEA', 'ORBEC', 'ORBET', 'ORBIA', 'ORBIE', 'ORBII', 'ORBIM', 'ORBIS', 'ORBIT', 'ORBUL', 'ORCAI', 'ORCAN', 'ORCIC', 'ORCUL', 'ORDIA', 'ORDIE', 'ORDII', 'ORDIN', 'ORDON', 'OREAV', 'ORELE', 'OREXI', 'ORFAN', 'ORFIC', 'ORGAN', 'ORGIA', 'ORGIE', 'ORGII', 'ORICE', 'ORIEI', 'ORIER', 'ORILE', 'ORJAD', 'ORLON', 'ORNAI', 'ORNAM', 'ORNAT', 'ORNAU', 'ORNEZ', 'ORNIC', 'ORORI', 'ORSAG', 'ORTAC', 'ORTIC', 'ORTII', 'ORTUL', 'ORZAR', 'ORZUL', 'OSANA', 'OSARI', 'OSCAR', 'OSCEI', 'OSCII', 'OSCIL', 'OSCUL', 'OSEAN', 'OSEBI', 'OSENE', 'OSENI', 'OSETA', 'OSETE', 'OSETI', 'OSIEI', 'OSMAN', 'OSMIC', 'OSMIU', 'OSMOL', 'OSOSI', 'OSPAT', 'OSPET', 'OSRAM', 'OSSIA', 'OSSII', 'OSTAS', 'OSTEA', 'OSTEO', 'OSTIA', 'OSTIC', 'OSTIE', 'OSTII', 'OSTIL', 'OSTIM', 'OSTIT', 'OSTOI', 'OSTUL', 'OSUAR', 'OSUTE', 'OTACE', 'OTAJE', 'OTARA', 'OTARI', 'OTAVA', 'OTAVE', 'OTAVI', 'OTCOS', 'OTCUP', 'OTELE', 'OTELI', 'OTERA', 'OTERI', 'OTETI', 'OTFEL', 'OTGON', 'OTICE', 'OTINC', 'OTIOS', 'OTITA', 'OTITE', 'OTOVA', 'OTURI', 'OUALE', 'OUAND', 'OUARA', 'OUARE', 'OUARI', 'OUASE', 'OUATA', 'OUATE', 'OUATI', 'OULET', 'OULUI', 'OUSOR', 'OUTUL', 'OVALA', 'OVALE', 'OVALI', 'OVARE', 'OVATA', 'OVATE', 'OVATI', 'OVELE', 'OVESE', 'OVEZE', 'OVILI', 'OVINA', 'OVINE', 'OVINI', 'OVISM', 'OVOID', 'OVREI', 'OVREU', 'OVULE', 'OXALI', 'OXALO', 'OXIDA', 'OXIDO', 'OXIUR', 'OXIZI', 'OZELE', 'OZENA', 'OZENE', 'OZONA', 'PABAI', 'PACAI', 'PACAT', 'PACEA', 'PACII', 'PACLA', 'PACLE', 'PACTE', 'PACUL', 'PADIA', 'PADIE', 'PADII', 'PADOC', 'PAFTA', 'PAFUG', 'PAGAI', 'PAGAN', 'PAGEI', 'PAGER', 'PAGII', 'PAGUL', 'PAGUR', 'PAHAI', 'PAHAR', 'PAIAI', 'PAIAM', 'PAIAU', 'PAICI', 'PAIER', 'PAIET', 'PAIND', 'PAINE', 'PAING', 'PAINI', 'PAIOL', 'PAION', 'PAIOS', 'PAIRA', 'PAIRE', 'PAIRI', 'PAISE', 'PAISI', 'PAITA', 'PAITE', 'PAITI', 'PAIUL', 'PAIUS', 'PAIUT', 'PAJII', 'PAJUL', 'PALAN', 'PALAT', 'PALCA', 'PALCE', 'PALEA', 'PALEE', 'PALEI', 'PALEO', 'PALHA', 'PALHE', 'PALIA', 'PALID', 'PALIE', 'PALII', 'PALIM', 'PALIS', 'PALIT', 'PALIU', 'PALMA', 'PALME', 'PALMI', 'PALOS', 'PALPA', 'PALPE', 'PALPI', 'PALUL', 'PALUS', 'PALUX', 'PAMAI', 'PAMAM', 'PAMAT', 'PAMAU', 'PAMEZ', 'PAMPA', 'PAMPE', 'PANAS', 'PANDA', 'PANDE', 'PANDI', 'PANEL', 'PANER', 'PANII', 'PANOU', 'PANSA', 'PANTA', 'PANTE', 'PANUL', 'PANUS', 'PANZA', 'PANZE', 'PAPAI', 'PAPAL', 'PAPAM', 'PAPAT', 'PAPAU', 'PAPEI', 'PAPII', 'PAPIR', 'PAPOR', 'PAPUA', 'PAPUC', 'PAPUL', 'PAPUS', 'PARAI', 'PARAM', 'PARAS', 'PARAT', 'PARAU', 'PARCA', 'PARCE', 'PAREA', 'PAREI', 'PAREM', 'PAREZ', 'PARFE', 'PARGA', 'PARGI', 'PARIA', 'PARIE', 'PARII', 'PARIP', 'PARIU', 'PARLI', 'PAROH', 'PAROI', 'PAROL', 'PAROM', 'PAROS', 'PARSI', 'PARTA', 'PARTE', 'PARTI', 'PARTY', 'PARUI', 'PARUL', 'PARUT', 'PASAI', 'PASAJ', 'PASAM', 'PASAT', 'PASAU', 'PASCA', 'PASCU', 'PASEA', 'PASEI', 'PASEZ', 'PASII', 'PASIM', 'PASIN', 'PASIT', 'PASIV', 'PASLA', 'PASLE', 'PASLI', 'PASOL', 'PASTA', 'PASTE', 'PASTI', 'PASUI', 'PASUL', 'PASUS', 'PATAI', 'PATAM', 'PATAT', 'PATAU', 'PATEA', 'PATER', 'PATEU', 'PATEZ', 'PATII', 'PATIM', 'PATIO', 'PATIT', 'PATMA', 'PATME', 'PATOS', 'PATRA', 'PATRU', 'PATUC', 'PATUL', 'PATUT', 'PAUCA', 'PAUCE', 'PAUNA', 'PAUNE', 'PAUNI', 'PAUZA', 'PAUZE', 'PAVAI', 'PAVAJ', 'PAVAM', 'PAVAT', 'PAVAU', 'PAVEA', 'PAVEI', 'PAVEZ', 'PAZEA', 'PAZEI', 'PAZIA', 'PAZIE', 'PAZII', 'PAZIM', 'PAZIT', 'PEANA', 'PEANE', 'PECIA', 'PECIE', 'PECII', 'PECIU', 'PECUM', 'PEDEA', 'PEDEL', 'PEDES', 'PEFUG', 'PEGAS', 'PEGRA', 'PEGRE', 'PEJMA', 'PEJME', 'PELAJ', 'PELES', 'PELIN', 'PELIT', 'PELUR', 'PEMBE', 'PENAI', 'PENAJ', 'PENAL', 'PENAM', 'PENAR', 'PENAT', 'PENAU', 'PENEI', 'PENEL', 'PENET', 'PENEZ', 'PENII', 'PENIN', 'PENIS', 'PENNY', 'PENSA', 'PENSE', 'PENTE', 'PENTI', 'PEONI', 'PEPIT', 'PEPLU', 'PEPSI', 'PEREE', 'PEREI', 'PEREN', 'PEREU', 'PERIA', 'PERIE', 'PERII', 'PERIS', 'PERJA', 'PERJE', 'PERJI', 'PERLA', 'PERLE', 'PERNA', 'PERNE', 'PERON', 'PERSA', 'PERSE', 'PERSI', 'PERUS', 'PESIM', 'PESIN', 'PESOS', 'PESTA', 'PESTE', 'PESTI', 'PETAS', 'PETEA', 'PETEC', 'PETEI', 'PETIC', 'PETII', 'PETIM', 'PETIT', 'PFUND', 'PIANE', 'PIANO', 'PIARA', 'PIATA', 'PIAZA', 'PICAI', 'PICAJ', 'PICAM', 'PICAT', 'PICAU', 'PICII', 'PICNI', 'PICOL', 'PICON', 'PICOT', 'PICOU', 'PICTA', 'PICUI', 'PICUL', 'PICUP', 'PICUR', 'PICUS', 'PICUT', 'PIEII', 'PIELE', 'PIELM', 'PIEMN', 'PIEPT', 'PIERD', 'PIERE', 'PIERI', 'PIERZ', 'PIESA', 'PIESE', 'PIETA', 'PIETE', 'PIEZE', 'PIEZI', 'PIFAN', 'PIFEI', 'PILAF', 'PILAR', 'PILDA', 'PILDE', 'PILEA', 'PILEI', 'PILII', 'PILIM', 'PILIT', 'PILON', 'PILOR', 'PILOS', 'PILOT', 'PILUG', 'PILUL', 'PINEN', 'PINII', 'PINOT', 'PINTA', 'PINTE', 'PINUL', 'PIONI', 'PIOSI', 'PIOTA', 'PIOTE', 'PIPAI', 'PIPAM', 'PIPAT', 'PIPAU', 'PIPEI', 'PIPER', 'PIPEZ', 'PIPIT', 'PIRAT', 'PIREU', 'PIREX', 'PIROI', 'PIROL', 'PIRON', 'PIROP', 'PIRUI', 'PIRUL', 'PISAI', 'PISAM', 'PISAR', 'PISAT', 'PISAU', 'PISCA', 'PISER', 'PISEZ', 'PISIC', 'PISOI', 'PISTA', 'PISTE', 'PISTI', 'PISUL', 'PITAC', 'PITAN', 'PITAR', 'PITEA', 'PITEI', 'PITIC', 'PITIG', 'PITII', 'PITIM', 'PITIS', 'PITIT', 'PITOI', 'PITON', 'PITUL', 'PIUAI', 'PIUAM', 'PIUAR', 'PIUAT', 'PIUAU', 'PIUEI', 'PIUEZ', 'PIUIA', 'PIUIE', 'PIUIT', 'PIURE', 'PIUUU', 'PIVEI', 'PIVOT', 'PIXUL', 'PIZMA', 'PIZME', 'PIZZA', 'PIZZE', 'PLACA', 'PLACE', 'PLACI', 'PLACU', 'PLAGA', 'PLAGI', 'PLAIE', 'PLAJA', 'PLAJE', 'PLANA', 'PLANE', 'PLANG', 'PLANI', 'PLANO', 'PLANS', 'PLASA', 'PLASE', 'PLASI', 'PLATA', 'PLATE', 'PLATI', 'PLAUR', 'PLAVA', 'PLAVE', 'PLAVI', 'PLEAN', 'PLEBE', 'PLECA', 'PLECE', 'PLECI', 'PLEDA', 'PLENE', 'PLESE', 'PLESI', 'PLETE', 'PLEUL', 'PLEVE', 'PLIAI', 'PLIAJ', 'PLIAM', 'PLIAT', 'PLIAU', 'PLICA', 'PLICE', 'PLICI', 'PLIEM', 'PLIEZ', 'PLIMB', 'PLINA', 'PLINE', 'PLINI', 'PLISA', 'PLISC', 'PLISE', 'PLITA', 'PLITE', 'PLIUL', 'PLIVI', 'PLODI', 'PLOII', 'PLOPI', 'PLOUA', 'PLOZI', 'PLUMB', 'PLURI', 'PLUSA', 'PLUTA', 'PLUTE', 'PLUTI', 'PNEUL', 'POALA', 'POALE', 'POAMA', 'POAME', 'POARA', 'POARE', 'POATA', 'POATE', 'POCAI', 'POCAL', 'POCEA', 'POCIA', 'POCIE', 'POCII', 'POCIM', 'POCIT', 'POCNI', 'POCOI', 'PODAN', 'PODAR', 'PODEA', 'PODET', 'PODII', 'PODIM', 'PODIS', 'PODIT', 'PODUL', 'PODUT', 'POEMA', 'POEME', 'POETA', 'POETE', 'POETI', 'POFIL', 'POFTA', 'POFTE', 'POFTI', 'POGAN', 'POGON', 'POGOR', 'POHAR', 'POHOD', 'POHOI', 'POHOT', 'POHTA', 'POHTE', 'POHTI', 'POISE', 'POJAR', 'POKER', 'POLAR', 'POLCA', 'POLCI', 'POLEI', 'POLEN', 'POLII', 'POLIP', 'POLIS', 'POLJE', 'POLOG', 'POLON', 'POLOS', 'POLUA', 'POLUL', 'POMAI', 'POMET', 'POMII', 'POMPA', 'POMPE', 'POMUL', 'PONCE', 'PONCI', 'PONEI', 'PONIT', 'PONIV', 'PONOD', 'PONOR', 'PONOS', 'PONTA', 'PONTE', 'PONTI', 'POPAC', 'POPAS', 'POPAZ', 'POPEA', 'POPEI', 'POPIA', 'POPIC', 'POPIE', 'POPII', 'POPIM', 'POPIT', 'POPOL', 'POPOR', 'POPOU', 'POPRI', 'POPUL', 'PORCI', 'PORIF', 'PORII', 'PORNI', 'PORNO', 'POROS', 'PORTA', 'PORTE', 'PORTI', 'PORTO', 'PORUL', 'POSAC', 'POSED', 'POSTA', 'POSTE', 'POSTI', 'POSUL', 'POTAI', 'POTCA', 'POTCE', 'POTIR', 'POTOP', 'POTOU', 'POTUL', 'POUND', 'POVAT', 'POVOD', 'POVOI', 'POXIA', 'POXIE', 'POXII', 'POZAI', 'POZAM', 'POZAT', 'POZAU', 'POZEI', 'POZEZ', 'POZNA', 'POZNE', 'PRACI', 'PRADA', 'PRADE', 'PRAJI', 'PRANZ', 'PRASA', 'PRASE', 'PRASI', 'PRAXA', 'PRAXE', 'PRAZI', 'PREDA', 'PREFA', 'PREIA', 'PREOT', 'PRESA', 'PRESE', 'PRETA', 'PREZI', 'PRIAN', 'PRIAU', 'PRICA', 'PRICE', 'PRICI', 'PRIER', 'PRIIT', 'PRIMA', 'PRIME', 'PRIMI', 'PRIMO', 'PRIND', 'PRINS', 'PRINT', 'PRINZ', 'PRIOD', 'PRIOR', 'PRIPA', 'PRIPE', 'PRIPI', 'PRIVA', 'PRIVI', 'PRIZA', 'PRIZE', 'PROBA', 'PROBE', 'PROBI', 'PROCI', 'PRODU', 'PROIN', 'PROIS', 'PROOR', 'PRORA', 'PRORE', 'PROST', 'PROTO', 'PROUR', 'PROVA', 'PROVE', 'PROZA', 'PROZE', 'PRUBA', 'PRUBE', 'PRUDA', 'PRUDE', 'PRUEI', 'PRUHA', 'PRUHE', 'PRUJA', 'PRUJI', 'PRUNA', 'PRUNC', 'PRUND', 'PRUNE', 'PRUNI', 'PRUZI', 'PSALM', 'PSALT', 'PSOAS', 'PTOZA', 'PTOZE', 'PTUSI', 'PUBER', 'PUBIS', 'PUBUL', 'PUCHI', 'PUCUL', 'PUDEL', 'PUDIC', 'PUDLA', 'PUDLI', 'PUDRA', 'PUDRE', 'PUDUL', 'PUFAI', 'PUFAR', 'PUFII', 'PUFNA', 'PUFNE', 'PUFNI', 'PUFOS', 'PUFUI', 'PUFUL', 'PUHAV', 'PUHEI', 'PUHOI', 'PUHUI', 'PUIAN', 'PUIAT', 'PUIAU', 'PUICA', 'PUICI', 'PUIET', 'PUIND', 'PUIOS', 'PUIRA', 'PUIRE', 'PUIRI', 'PUISE', 'PUITA', 'PUITE', 'PUITI', 'PUIUC', 'PUIUL', 'PUIUT', 'PULIA', 'PULIE', 'PULII', 'PULPA', 'PULPE', 'PULSA', 'PULUL', 'PUMEI', 'PUMNI', 'PUNCI', 'PUNCT', 'PUNEA', 'PUNEM', 'PUNGA', 'PUNGI', 'PUNIC', 'PUNII', 'PUNTA', 'PUNTE', 'PUNTI', 'PUNUL', 'PUNZI', 'PUPAI', 'PUPAM', 'PUPAT', 'PUPAU', 'PUPEI', 'PUPIC', 'PUPII', 'PUPIL', 'PUPOI', 'PUPUI', 'PUPUL', 'PUREC', 'PUREI', 'PURGA', 'PURIC', 'PURII', 'PURIM', 'PURJA', 'PURJE', 'PUROI', 'PURTA', 'PURUL', 'PUSCA', 'PUSEI', 'PUSEU', 'PUSII', 'PUSTA', 'PUSTE', 'PUSTI', 'PUSUL', 'PUTAR', 'PUTEA', 'PUTEM', 'PUTII', 'PUTIM', 'PUTIN', 'PUTIT', 'PUTUI', 'PUTUL', 'PUTUT', 'PUVOI', 'QUALE', 'QUARC', 'QUAZI', 'QUICK', 'QUIPU', 'RABAR', 'RABAT', 'RABDA', 'RABDE', 'RABIA', 'RABIC', 'RABIE', 'RABII', 'RABIN', 'RABIT', 'RABLA', 'RABLE', 'RABOJ', 'RABUI', 'RABUS', 'RABZI', 'RACAI', 'RACAN', 'RACAR', 'RACEA', 'RACEM', 'RACII', 'RACIM', 'RACIT', 'RACLA', 'RACLE', 'RACNI', 'RACUL', 'RADAN', 'RADAR', 'RADEA', 'RADEI', 'RADEM', 'RADIA', 'RADIC', 'RADIE', 'RADIO', 'RADIU', 'RADOM', 'RADON', 'RADOU', 'RADUL', 'RAFIA', 'RAFIE', 'RAFII', 'RAFUI', 'RAFUL', 'RAGAI', 'RAGAZ', 'RAGEA', 'RAGEM', 'RAGET', 'RAGII', 'RAGIL', 'RAGIT', 'RAGOZ', 'RAHAT', 'RAHIS', 'RAIEI', 'RAION', 'RAIOS', 'RAITA', 'RAITE', 'RAIUL', 'RAJAH', 'RALEI', 'RALIA', 'RALID', 'RALIE', 'RALIU', 'RALUL', 'RAMAI', 'RAMAM', 'RAMAN', 'RAMAS', 'RAMAT', 'RAMAU', 'RAMCA', 'RAMCE', 'RAMEI', 'RAMER', 'RAMEZ', 'RAMIA', 'RAMIE', 'RAMII', 'RAMNI', 'RAMPA', 'RAMPE', 'RAMUL', 'RANCA', 'RANCH', 'RANCI', 'RANDA', 'RANDE', 'RANEA', 'RANEI', 'RANGA', 'RANGI', 'RANII', 'RANIM', 'RANIT', 'RANJI', 'RANSA', 'RANSE', 'RANZA', 'RANZE', 'RAPAI', 'RAPAN', 'RAPEA', 'RAPEI', 'RAPEL', 'RAPID', 'RAPII', 'RAPIM', 'RAPIT', 'RAPOS', 'RAPUI', 'RAPUL', 'RAPUN', 'RAPUS', 'RAREA', 'RAREI', 'RARII', 'RARIM', 'RARIS', 'RARIT', 'RARUL', 'RASAD', 'RASAR', 'RASAT', 'RASCA', 'RASCI', 'RASEI', 'RASEL', 'RASET', 'RASII', 'RASNI', 'RASOL', 'RASPA', 'RASPE', 'RASTI', 'RASUC', 'RASUL', 'RASZI', 'RATAI', 'RATAM', 'RATAN', 'RATAT', 'RATAU', 'RATCA', 'RATCE', 'RATEI', 'RATES', 'RATEU', 'RATEZ', 'RATIA', 'RATIE', 'RATII', 'RATOI', 'RATOS', 'RATUL', 'RAURA', 'RAURI', 'RAVAC', 'RAVAR', 'RAVAS', 'RAVNA', 'RAVNE', 'RAVNI', 'RAZAM', 'RAZAT', 'RAZAU', 'RAZBI', 'RAZDA', 'RAZEI', 'RAZES', 'RAZIA', 'RAZIE', 'RAZII', 'RAZIM', 'RAZNA', 'RAZNE', 'RAZNI', 'RAZOR', 'RAZUI', 'RAZUL', 'RAZUS', 'READA', 'READU', 'REALA', 'REALE', 'REALI', 'REAUA', 'REBAB', 'REBAT', 'REBEC', 'REBEL', 'REBUS', 'REBUT', 'RECAD', 'RECAL', 'RECEA', 'RECIF', 'RECII', 'RECIT', 'RECOC', 'RECTE', 'RECTO', 'RECUL', 'RECUZ', 'REDAI', 'REDAM', 'REDAN', 'REDAT', 'REDAU', 'REDEA', 'REDIA', 'REDIE', 'REDIG', 'REDII', 'REDIS', 'REDIU', 'REDOX', 'REDUC', 'REDUS', 'REFAC', 'REFEC', 'REFER', 'REFUG', 'REFUL', 'REFUZ', 'REGAL', 'REGAT', 'REGEA', 'REGIA', 'REGIE', 'REGII', 'REGIM', 'REGLA', 'REIAT', 'REIAU', 'REIEI', 'REIES', 'REJET', 'REJOC', 'RELAS', 'RELEE', 'RELEG', 'RELEI', 'RELEU', 'RELEV', 'RELON', 'RELUA', 'REMII', 'REMIS', 'REMIT', 'REMUL', 'REMUU', 'RENAL', 'RENAN', 'RENCI', 'RENEG', 'RENET', 'RENIA', 'RENIE', 'RENII', 'RENIS', 'RENIU', 'RENTA', 'RENTE', 'RENUL', 'REPAR', 'REPED', 'REPER', 'REPET', 'REPEZ', 'REPUI', 'REPUN', 'REPUS', 'RESAC', 'RESCA', 'RESCE', 'RESOU', 'RETEA', 'RETEZ', 'RETIE', 'RETII', 'RETIN', 'RETIU', 'RETOR', 'RETRO', 'RETUR', 'RETUS', 'REUMA', 'REUME', 'REUNI', 'REUSI', 'REVAD', 'REVAZ', 'REVER', 'REVIE', 'REVII', 'REVIN', 'REVIU', 'REVOC', 'REZEC', 'REZEM', 'REZIL', 'REZOL', 'REZON', 'REZUM', 'RIALI', 'RICIN', 'RICSA', 'RICSE', 'RIDAI', 'RIDAM', 'RIDAT', 'RIDAU', 'RIDEZ', 'RIDIC', 'RIDUL', 'RIFII', 'RIFLU', 'RIFUL', 'RIGAI', 'RIGHT', 'RIGID', 'RIGII', 'RIGLA', 'RIGLE', 'RIJEI', 'RILEI', 'RILUL', 'RIMAI', 'RIMAM', 'RIMAT', 'RIMAU', 'RIMEI', 'RIMEL', 'RIMEZ', 'RINEI', 'RIPAI', 'RIPAM', 'RIPAT', 'RIPAU', 'RIPEZ', 'RISCA', 'RISTE', 'RISTI', 'RITIN', 'RITMA', 'RITOR', 'RITOS', 'RITUI', 'RITUL', 'RIVAL', 'RIZAT', 'RIZIC', 'RIZIL', 'RIZOM', 'RIZUL', 'ROABA', 'ROABE', 'ROADA', 'ROADE', 'ROAGA', 'ROAGE', 'ROASA', 'ROASE', 'ROAST', 'ROATA', 'ROATE', 'ROAZA', 'ROBEA', 'ROBEI', 'ROBIA', 'ROBIE', 'ROBII', 'ROBIM', 'ROBIT', 'ROBOT', 'ROBUL', 'ROCHE', 'ROCHI', 'ROCII', 'ROCUL', 'RODAI', 'RODAJ', 'RODAM', 'RODAN', 'RODAT', 'RODAU', 'RODEA', 'RODEO', 'RODEZ', 'RODIA', 'RODIE', 'RODII', 'RODIM', 'RODIN', 'RODIT', 'RODIU', 'RODOR', 'RODOS', 'RODUL', 'ROFII', 'ROGOZ', 'ROIAI', 'ROIAM', 'ROIAU', 'ROIBA', 'ROIBE', 'ROIBI', 'ROIND', 'ROIRA', 'ROIRE', 'ROIRI', 'ROISE', 'ROISI', 'ROITA', 'ROITE', 'ROITI', 'ROIUL', 'ROLAN', 'ROLAT', 'ROLEI', 'ROLUL', 'ROMAN', 'ROMEI', 'ROMEU', 'ROMII', 'ROMUL', 'RONDA', 'RONDE', 'RONDO', 'RONJA', 'ROPAI', 'ROPOT', 'ROSCA', 'ROSEA', 'ROSEI', 'ROSIA', 'ROSIE', 'ROSII', 'ROSIM', 'ROSIT', 'ROSTE', 'ROSTI', 'ROSUL', 'ROTAI', 'ROTAM', 'ROTAR', 'ROTAS', 'ROTAT', 'ROTAU', 'ROTEA', 'ROTEZ', 'ROTII', 'ROTIM', 'ROTIN', 'ROTIS', 'ROTIT', 'ROTOR', 'ROUAI', 'ROUEI', 'ROURA', 'ROUTA', 'ROUTE', 'ROZEI', 'ROZIA', 'ROZIE', 'ROZII', 'ROZIU', 'ROZUL', 'RROMA', 'RROME', 'RROMI', 'RUAJE', 'RUBAI', 'RUBIA', 'RUBIN', 'RUBLA', 'RUBLE', 'RUDAR', 'RUDEA', 'RUDEI', 'RUDII', 'RUDIM', 'RUDIT', 'RUFEI', 'RUFET', 'RUFOS', 'RUFUL', 'RUGAI', 'RUGAM', 'RUGAT', 'RUGAU', 'RUGBI', 'RUGBY', 'RUGEA', 'RUGET', 'RUGII', 'RUGIM', 'RUGIT', 'RUGOS', 'RUGUL', 'RUINA', 'RUINE', 'RUINI', 'RUJAI', 'RUJAM', 'RUJAN', 'RUJAR', 'RUJAT', 'RUJAU', 'RUJEI', 'RUJET', 'RUJEZ', 'RUJII', 'RUJUL', 'RULAI', 'RULAJ', 'RULAM', 'RULAT', 'RULAU', 'RULEZ', 'RULIU', 'RULOU', 'RUMAN', 'RUMBA', 'RUMBE', 'RUMEG', 'RUMEN', 'RUMMY', 'RUMPA', 'RUMPE', 'RUMPI', 'RUMPT', 'RUMSE', 'RUMTA', 'RUMTE', 'RUMTI', 'RUMUL', 'RUNDA', 'RUNDE', 'RUNEI', 'RUNIC', 'RUPEA', 'RUPEM', 'RUPIA', 'RUPIE', 'RUPII', 'RUPSE', 'RUPTA', 'RUPTE', 'RUPTI', 'RURAL', 'RUSCA', 'RUSCE', 'RUSEI', 'RUSII', 'RUSSE', 'RUSTE', 'RUSUL', 'RUTEI', 'RUTIL', 'RUTUL', 'SABAC', 'SABAI', 'SABAR', 'SABAS', 'SABAT', 'SABAU', 'SABIA', 'SABIE', 'SABII', 'SABIN', 'SABIR', 'SABLA', 'SABOT', 'SABUI', 'SABUR', 'SABUS', 'SACAI', 'SACAL', 'SACAZ', 'SACII', 'SACOI', 'SACOS', 'SACOU', 'SACRA', 'SACRE', 'SACRI', 'SACRU', 'SACUI', 'SACUL', 'SADEA', 'SADEI', 'SADEM', 'SADIC', 'SADII', 'SADIM', 'SADIT', 'SADUL', 'SAFAR', 'SAFEU', 'SAFIC', 'SAFIR', 'SAGII', 'SAGNA', 'SAGNE', 'SAGNI', 'SAGUI', 'SAGUM', 'SAHAN', 'SAHEL', 'SAHII', 'SAHUL', 'SAIBA', 'SAIBE', 'SAICA', 'SAICI', 'SAIGI', 'SAIUL', 'SALAI', 'SALAM', 'SALAR', 'SALAS', 'SALAU', 'SALBA', 'SALBE', 'SALCA', 'SALCE', 'SALCI', 'SALEP', 'SALEU', 'SALIA', 'SALIC', 'SALIE', 'SALII', 'SALIN', 'SALIP', 'SALIU', 'SALOL', 'SALON', 'SALSA', 'SALSE', 'SALTA', 'SALTE', 'SALTI', 'SALUL', 'SALUP', 'SALUT', 'SALVA', 'SALVE', 'SAMAN', 'SAMAR', 'SAMBA', 'SAMBE', 'SAMBO', 'SAMCA', 'SAMCE', 'SAMEI', 'SAMES', 'SAMOT', 'SAMUL', 'SAMUR', 'SANAL', 'SANDA', 'SANET', 'SANGE', 'SANIA', 'SANIE', 'SANII', 'SANSA', 'SANSE', 'SANTA', 'SANTE', 'SANTI', 'SANUL', 'SAPAI', 'SAPAM', 'SAPAT', 'SAPAU', 'SAPCA', 'SAPEI', 'SAPIA', 'SAPOI', 'SAPTE', 'SAPUN', 'SARAC', 'SARAD', 'SARAI', 'SARAM', 'SARAN', 'SARAR', 'SARAT', 'SARAU', 'SARBA', 'SARBE', 'SARBI', 'SARDA', 'SARDE', 'SAREA', 'SAREZ', 'SARGA', 'SARGE', 'SARGI', 'SARIC', 'SARII', 'SARIM', 'SARIN', 'SARIT', 'SARJA', 'SARJE', 'SARLA', 'SARLE', 'SARMA', 'SARME', 'SAROS', 'SARPE', 'SARUL', 'SARUT', 'SARZI', 'SASAI', 'SASAU', 'SASCA', 'SASCE', 'SASEA', 'SASEU', 'SASIA', 'SASIE', 'SASII', 'SASIU', 'SASLA', 'SASTI', 'SASUL', 'SATAN', 'SATAR', 'SATEN', 'SATIN', 'SATIR', 'SATIU', 'SATRA', 'SATRE', 'SATUC', 'SATUI', 'SATUL', 'SATUR', 'SATUT', 'SAUAS', 'SAULA', 'SAULE', 'SAUNA', 'SAUNE', 'SAVAI', 'SAVAR', 'SAVOR', 'SAVUR', 'SAXON', 'SAZUI', 'SAZUT', 'SCADA', 'SCADE', 'SCAFA', 'SCAFE', 'SCAII', 'SCALA', 'SCALD', 'SCALE', 'SCALP', 'SCAMA', 'SCAME', 'SCANA', 'SCAPA', 'SCAPE', 'SCAPI', 'SCARA', 'SCARI', 'SCARM', 'SCARP', 'SCART', 'SCAUN', 'SCAZA', 'SCAZI', 'SCAZU', 'SCENA', 'SCENE', 'SCHIA', 'SCHIE', 'SCHIF', 'SCHIP', 'SCHIT', 'SCITA', 'SCITE', 'SCITI', 'SCLAI', 'SCLAV', 'SCOBI', 'SCOCI', 'SCOLI', 'SCONT', 'SCOPI', 'SCOPT', 'SCOSI', 'SCOTA', 'SCOTE', 'SCOTI', 'SCREM', 'SCRIA', 'SCRIB', 'SCRIE', 'SCRII', 'SCRIM', 'SCRIN', 'SCRIS', 'SCRIU', 'SCROB', 'SCROT', 'SCRUM', 'SCUAR', 'SCUFA', 'SCUFE', 'SCUIP', 'SCULA', 'SCULE', 'SCUMP', 'SCUNA', 'SCUND', 'SCUNE', 'SCURG', 'SCURM', 'SCURS', 'SCURT', 'SCUTI', 'SCUZA', 'SCUZE', 'SCUZI', 'SEACA', 'SEAMA', 'SEARA', 'SEASA', 'SEAUA', 'SEBUM', 'SECAI', 'SECAM', 'SECAT', 'SECAU', 'SECER', 'SECII', 'SECOL', 'SECTA', 'SECTE', 'SECUI', 'SECUL', 'SEDAI', 'SEDAM', 'SEDAT', 'SEDAU', 'SEDEA', 'SEDEM', 'SEDEZ', 'SEDII', 'SEDIU', 'SEDUC', 'SEDUS', 'SEFEI', 'SEFIA', 'SEFIE', 'SEFII', 'SEFUL', 'SEGNO', 'SEIAC', 'SEICI', 'SEIGA', 'SEIGE', 'SEIHI', 'SEILE', 'SEIMA', 'SEIME', 'SEINA', 'SEINE', 'SEINI', 'SEISA', 'SEISE', 'SEISM', 'SEIZI', 'SEJUR', 'SELAC', 'SELAR', 'SELBA', 'SELBE', 'SELEI', 'SELVA', 'SELVE', 'SEMAN', 'SEMEM', 'SEMEN', 'SEMET', 'SEMIC', 'SEMII', 'SEMIT', 'SEMNA', 'SEMNE', 'SEMUI', 'SEMUL', 'SENAL', 'SENAR', 'SENAT', 'SENEI', 'SENET', 'SENII', 'SENIL', 'SENIN', 'SENUL', 'SEPAR', 'SEPCI', 'SEPIA', 'SEPIE', 'SEPII', 'SEPTE', 'SERAI', 'SERAL', 'SERAT', 'SERBA', 'SERBE', 'SERBI', 'SEREI', 'SERIA', 'SERIC', 'SERIE', 'SERIF', 'SERII', 'SEROS', 'SERPE', 'SERPI', 'SERUI', 'SERUL', 'SERVA', 'SERVE', 'SERVI', 'SERVO', 'SESAM', 'SESAR', 'SESEA', 'SESEI', 'SESIA', 'SESIE', 'SESII', 'SESIL', 'SESUL', 'SETAI', 'SETAM', 'SETAT', 'SETAU', 'SETCA', 'SETCI', 'SETEA', 'SETEI', 'SETER', 'SETEZ', 'SETOS', 'SETRE', 'SETUL', 'SEURI', 'SEVAI', 'SEVAS', 'SEVEI', 'SEVER', 'SEVRO', 'SEXTA', 'SEXTE', 'SEXUL', 'SEZON', 'SEZUI', 'SEZUT', 'SFADA', 'SFADI', 'SFANT', 'SFARA', 'SFARC', 'SFARE', 'SFARM', 'SFART', 'SFEII', 'SFERA', 'SFERE', 'SFERI', 'SFERT', 'SFETI', 'SFEZI', 'SFIAI', 'SFIAM', 'SFIAU', 'SFIDA', 'SFIET', 'SFIII', 'SFIIM', 'SFIIT', 'SFINX', 'SFIOS', 'SFITA', 'SFITE', 'SFORI', 'SIACE', 'SIAJE', 'SIBIR', 'SIBOI', 'SICAR', 'SICII', 'SICLI', 'SICUI', 'SICUL', 'SIDEF', 'SIESI', 'SIFON', 'SIFUL', 'SIGEI', 'SIGIL', 'SIGLA', 'SIGLE', 'SIGMA', 'SIGUR', 'SIHLA', 'SIHLE', 'SIILE', 'SIISM', 'SIITA', 'SIITE', 'SIITI', 'SILAN', 'SILCA', 'SILCE', 'SILEA', 'SILEI', 'SILEN', 'SILEX', 'SILFA', 'SILFE', 'SILFI', 'SILHA', 'SILHE', 'SILII', 'SILIM', 'SILIT', 'SILON', 'SILOZ', 'SILUI', 'SILUL', 'SILUR', 'SILVA', 'SILVE', 'SILVO', 'SIMEI', 'SIMEN', 'SIMIT', 'SIMTA', 'SIMTE', 'SIMTI', 'SIMUN', 'SINAR', 'SINEA', 'SINEI', 'SINET', 'SINIA', 'SINIE', 'SINII', 'SINOD', 'SINOR', 'SINTA', 'SINTE', 'SINUI', 'SINUL', 'SINUS', 'SIPCA', 'SIPCI', 'SIPET', 'SIPII', 'SIPOT', 'SIPUL', 'SIRAG', 'SIREC', 'SIREI', 'SIREP', 'SIRET', 'SIRIC', 'SIROI', 'SIROP', 'SIRUI', 'SIRUL', 'SIRUT', 'SISAI', 'SISAL', 'SISCA', 'SISTA', 'SISTE', 'SISTI', 'SISUL', 'SITAR', 'SITAV', 'SITEI', 'SITUA', 'SITUI', 'SITUL', 'SIVEI', 'SIVII', 'SIVOI', 'SIVUL', 'SIXTA', 'SIXTE', 'SKATE', 'SKEET', 'SLABA', 'SLABE', 'SLABI', 'SLANA', 'SLANE', 'SLANG', 'SLAPI', 'SLASH', 'SLAVA', 'SLAVE', 'SLAVI', 'SLEAH', 'SLEAU', 'SLEIA', 'SLEII', 'SLEIM', 'SLEIT', 'SLICE', 'SLIRE', 'SLIRI', 'SLOPS', 'SLOVA', 'SLOVE', 'SLOVO', 'SLUGA', 'SLUGI', 'SLUIS', 'SLUJI', 'SLUTA', 'SLUTE', 'SLUTI', 'SMACI', 'SMALE', 'SMALT', 'SMARC', 'SMARD', 'SMASH', 'SMEAD', 'SMECI', 'SMEDE', 'SMERI', 'SMEZI', 'SMIDA', 'SMIDE', 'SMINT', 'SMOLI', 'SMOMI', 'SMUCI', 'SMUGA', 'SMUGI', 'SMULG', 'SMULS', 'SMULT', 'SNACK', 'SNAGA', 'SNAGI', 'SNAPS', 'SNOBI', 'SNOPI', 'SOADA', 'SOADE', 'SOAIE', 'SOARE', 'SOATA', 'SOATE', 'SOBAR', 'SOBEI', 'SOBOL', 'SOBOR', 'SOBRA', 'SOBRE', 'SOBRI', 'SOBRU', 'SOCAI', 'SOCAM', 'SOCAT', 'SOCAU', 'SOCII', 'SOCLU', 'SOCOT', 'SOCRI', 'SOCRU', 'SOCUL', 'SODAR', 'SODEI', 'SODIC', 'SODIU', 'SODOM', 'SODOU', 'SODUL', 'SOFAI', 'SOFAJ', 'SOFAM', 'SOFAT', 'SOFAU', 'SOFEI', 'SOFER', 'SOFEZ', 'SOFRA', 'SOGOR', 'SOHAN', 'SOIAI', 'SOIAM', 'SOIAU', 'SOIEI', 'SOIMI', 'SOIND', 'SOIOS', 'SOIRA', 'SOIRE', 'SOIRI', 'SOISE', 'SOISI', 'SOITA', 'SOITE', 'SOITI', 'SOIUL', 'SOLAR', 'SOLBA', 'SOLBE', 'SOLDA', 'SOLDE', 'SOLDI', 'SOLEA', 'SOLEI', 'SOLIA', 'SOLID', 'SOLIE', 'SOLII', 'SOLIM', 'SOLIT', 'SOLUL', 'SOLVA', 'SOLVE', 'SOLVI', 'SOLZI', 'SOMAC', 'SOMAI', 'SOMAJ', 'SOMAM', 'SOMAT', 'SOMAU', 'SOMEI', 'SOMER', 'SOMEZ', 'SOMNA', 'SOMNI', 'SOMON', 'SONAI', 'SONAM', 'SONAR', 'SONAT', 'SONAU', 'SONDA', 'SONDE', 'SONET', 'SONEZ', 'SONIC', 'SONII', 'SONOR', 'SONTI', 'SONUL', 'SOPAI', 'SOPEI', 'SOPON', 'SOPOR', 'SOPOT', 'SOPRU', 'SOPTI', 'SOPUL', 'SORBI', 'SOREA', 'SOREC', 'SOREI', 'SORIC', 'SORII', 'SORIM', 'SORIT', 'SOROC', 'SOROS', 'SORTA', 'SORTI', 'SORUL', 'SOSEA', 'SOSET', 'SOSIA', 'SOSIE', 'SOSII', 'SOSIM', 'SOSIT', 'SOSMA', 'SOSOI', 'SOSON', 'SOSUL', 'SOTIA', 'SOTIE', 'SOTII', 'SOTUL', 'SOUND', 'SOVAI', 'SOVAN', 'SOVAR', 'SOVIN', 'SOVON', 'SOZII', 'SPADA', 'SPADE', 'SPAGA', 'SPAGI', 'SPAIS', 'SPALA', 'SPALT', 'SPANA', 'SPANE', 'SPANI', 'SPANT', 'SPANZ', 'SPARC', 'SPARG', 'SPART', 'SPASI', 'SPASM', 'SPATA', 'SPATE', 'SPELB', 'SPELE', 'SPELI', 'SPERA', 'SPERE', 'SPERI', 'SPERT', 'SPESE', 'SPETA', 'SPETE', 'SPETI', 'SPEZE', 'SPICE', 'SPINA', 'SPINE', 'SPINI', 'SPION', 'SPIRA', 'SPIRE', 'SPIRT', 'SPITA', 'SPITE', 'SPITI', 'SPLAI', 'SPLAU', 'SPLIN', 'SPLIT', 'SPOIA', 'SPOII', 'SPOIM', 'SPOIT', 'SPORI', 'SPORT', 'SPRAY', 'SPRIT', 'SPUIE', 'SPUMA', 'SPUME', 'SPUNA', 'SPUNE', 'SPURC', 'SPUSA', 'SPUSE', 'SPUSI', 'SPUTA', 'SPUTE', 'SPUZA', 'SPUZE', 'SPUZI', 'STABI', 'STAFF', 'STAIF', 'STAIR', 'STALP', 'STANA', 'STAND', 'STANE', 'STANG', 'STANI', 'STARC', 'STARE', 'STARI', 'START', 'STARV', 'STATE', 'STATI', 'STATU', 'STAUL', 'STAVA', 'STAVE', 'STAVI', 'STAZA', 'STAZE', 'STEAF', 'STEAG', 'STEAN', 'STEAP', 'STEIE', 'STELA', 'STELE', 'STELI', 'STEMA', 'STEME', 'STENI', 'STEPA', 'STEPE', 'STEPI', 'STERG', 'STERI', 'STERN', 'STERP', 'STERS', 'STERT', 'STETE', 'STEVE', 'STEZE', 'STIAI', 'STIAM', 'STIAU', 'STIFT', 'STILA', 'STILB', 'STILE', 'STIMA', 'STIME', 'STIMI', 'STING', 'STINS', 'STIOB', 'STIRA', 'STIRB', 'STIRE', 'STIRI', 'STITI', 'STIUI', 'STIUT', 'STIVA', 'STIVE', 'STOCA', 'STOCI', 'STOFA', 'STOFE', 'STOIC', 'STOLA', 'STOLE', 'STOPA', 'STORC', 'STORS', 'STORY', 'STRAF', 'STRAI', 'STRAS', 'STRAT', 'STREI', 'STRES', 'STRIA', 'STRIC', 'STRIE', 'STRIG', 'STRII', 'STRIU', 'STROH', 'STROI', 'STROP', 'STRUG', 'STRUP', 'STRUT', 'STUFA', 'STUFE', 'STUNT', 'STUPA', 'STUPE', 'STUPI', 'STURT', 'STURZ', 'STYLE', 'SUAVA', 'SUAVE', 'SUAVI', 'SUBEI', 'SUBER', 'SUBIT', 'SUBRA', 'SUCAR', 'SUCEA', 'SUCII', 'SUCIM', 'SUCIT', 'SUCNA', 'SUCNE', 'SUCUL', 'SUDAC', 'SUDAI', 'SUDAJ', 'SUDAM', 'SUDAT', 'SUDAU', 'SUDEA', 'SUDEZ', 'SUDIC', 'SUDII', 'SUDIM', 'SUDIT', 'SUDOR', 'SUDUI', 'SUDUL', 'SUETA', 'SUETE', 'SUFAN', 'SUFAR', 'SUFIT', 'SUFIX', 'SUFLA', 'SUFLE', 'SUFLI', 'SUFLU', 'SUFOC', 'SUGAR', 'SUGEA', 'SUGEI', 'SUGEL', 'SUGEM', 'SUGUI', 'SUGUS', 'SUHAT', 'SUIAI', 'SUIAM', 'SUIAT', 'SUIAU', 'SUIEI', 'SUIEM', 'SUIER', 'SUIET', 'SUIEZ', 'SUINA', 'SUIND', 'SUINE', 'SUINI', 'SUIRA', 'SUIRE', 'SUIRI', 'SUISE', 'SUISI', 'SUITA', 'SUITE', 'SUITI', 'SUIUL', 'SUJET', 'SULAC', 'SULAR', 'SULEI', 'SULER', 'SULFA', 'SULFE', 'SULKY', 'SULTA', 'SULTE', 'SULUL', 'SUMAC', 'SUMAI', 'SUMAM', 'SUMAN', 'SUMAR', 'SUMAT', 'SUMAU', 'SUMEC', 'SUMEI', 'SUMEN', 'SUMES', 'SUMET', 'SUMEZ', 'SUMMA', 'SUMUT', 'SUNAI', 'SUNAM', 'SUNAT', 'SUNAU', 'SUNCA', 'SUNCI', 'SUNET', 'SUNNA', 'SUNNE', 'SUPAI', 'SUPAM', 'SUPAR', 'SUPAT', 'SUPAU', 'SUPEI', 'SUPER', 'SUPEU', 'SUPEZ', 'SUPIE', 'SUPIN', 'SUPLA', 'SUPLE', 'SUPLI', 'SUPLU', 'SUPRA', 'SUPSE', 'SUPTA', 'SUPTE', 'SUPTI', 'SUPUI', 'SUPUN', 'SUPUS', 'SURAD', 'SURAS', 'SURAZ', 'SURDA', 'SURDE', 'SUREA', 'SUREI', 'SURET', 'SURIA', 'SURIE', 'SURII', 'SURIM', 'SURIT', 'SURIU', 'SURLA', 'SURLE', 'SURPA', 'SURPE', 'SURPI', 'SURSA', 'SURSE', 'SURUB', 'SURUL', 'SURUP', 'SURZI', 'SUSAI', 'SUSAM', 'SUSAN', 'SUSEI', 'SUSTA', 'SUSTE', 'SUSUI', 'SUSUL', 'SUSUR', 'SUTAI', 'SUTAM', 'SUTAR', 'SUTAS', 'SUTAT', 'SUTAU', 'SUTEA', 'SUTEI', 'SUTER', 'SUTEZ', 'SUTII', 'SUTIM', 'SUTIT', 'SUTOR', 'SUTUL', 'SUVAC', 'SUVAI', 'SUVAR', 'SUVOI', 'SVABA', 'SVABE', 'SVABI', 'SVADA', 'SVART', 'SVEDA', 'SVEDE', 'SVEZI', 'SVING', 'SWAZI', 'SWING', 'TABAC', 'TABAN', 'TABAR', 'TABEL', 'TABES', 'TABIA', 'TABIE', 'TABII', 'TABLA', 'TABLE', 'TABUN', 'TACAI', 'TACAM', 'TACAN', 'TACEA', 'TACEM', 'TACIT', 'TACLA', 'TACTA', 'TACUI', 'TACUL', 'TACUT', 'TAFEI', 'TAFLA', 'TAFLE', 'TAFNA', 'TAFNE', 'TAFNI', 'TAFTA', 'TAFTE', 'TAFUL', 'TAGAI', 'TAGII', 'TAGLA', 'TAGLE', 'TAGMA', 'TAGME', 'TAHAN', 'TAHLA', 'TAHLE', 'TAHNI', 'TAIAI', 'TAIAM', 'TAIAT', 'TAIAU', 'TAICA', 'TAICI', 'TAIEM', 'TAIER', 'TAIGA', 'TAINA', 'TAIND', 'TAINE', 'TAIOR', 'TAIOS', 'TALAJ', 'TALAM', 'TALAN', 'TALAR', 'TALAS', 'TALAZ', 'TALEA', 'TALEI', 'TALER', 'TALIA', 'TALIE', 'TALII', 'TALIM', 'TALIU', 'TALON', 'TALPA', 'TALPI', 'TALUL', 'TALUS', 'TALUZ', 'TALVI', 'TAMAI', 'TAMAN', 'TAMAR', 'TAMAS', 'TAMJA', 'TAMJE', 'TAMPA', 'TAMPE', 'TAMPI', 'TANAI', 'TANAJ', 'TANAR', 'TANAS', 'TANAT', 'TANAU', 'TANCA', 'TANCE', 'TANCI', 'TANEA', 'TANGA', 'TANGI', 'TANIC', 'TANIN', 'TANJI', 'TANTA', 'TANTE', 'TANTI', 'TAOLA', 'TAOLE', 'TAPAI', 'TAPAJ', 'TAPAM', 'TAPAP', 'TAPAT', 'TAPAU', 'TAPEI', 'TAPET', 'TAPEZ', 'TAPII', 'TAPIN', 'TAPIR', 'TAPOI', 'TAPOS', 'TAPSI', 'TAPUC', 'TAPUL', 'TARAC', 'TARAF', 'TARAI', 'TARAM', 'TARAN', 'TARAR', 'TARAS', 'TARAT', 'TARAU', 'TARCA', 'TARCI', 'TAREA', 'TAREI', 'TARFA', 'TARFE', 'TARGA', 'TARGI', 'TARIA', 'TARIE', 'TARIF', 'TARII', 'TARLA', 'TARLE', 'TARLI', 'TARNA', 'TARNE', 'TARNI', 'TAROC', 'TAROD', 'TAROT', 'TARSA', 'TARSE', 'TARSI', 'TARTA', 'TARTE', 'TARUL', 'TARUS', 'TASAI', 'TASAM', 'TASAT', 'TASAU', 'TASCA', 'TASEU', 'TASEZ', 'TASMA', 'TASNI', 'TASON', 'TASTA', 'TASTE', 'TASTI', 'TASUL', 'TATAI', 'TATAL', 'TATAN', 'TATAR', 'TATEI', 'TATIC', 'TATII', 'TATOI', 'TATOS', 'TATUA', 'TATUC', 'TATUL', 'TATUT', 'TAUIA', 'TAUII', 'TAUIM', 'TAUIT', 'TAULA', 'TAULE', 'TAUNE', 'TAUNI', 'TAURI', 'TAUSI', 'TAVAN', 'TAVII', 'TAXAI', 'TAXAM', 'TAXAT', 'TAXAU', 'TAXEI', 'TAXEZ', 'TAXID', 'TAXIM', 'TEACA', 'TEAMA', 'TEANC', 'TEAPA', 'TEARA', 'TEASA', 'TEASC', 'TEAVA', 'TECHE', 'TECHI', 'TECII', 'TECUL', 'TEFAL', 'TEHNO', 'TEHUI', 'TEICA', 'TEICI', 'TEIER', 'TEINA', 'TEINE', 'TEIOS', 'TEISM', 'TEIST', 'TEIUL', 'TELAL', 'TELEA', 'TELEX', 'TELII', 'TELIM', 'TELIT', 'TELUL', 'TELUR', 'TEMEA', 'TEMEI', 'TEMEM', 'TEMII', 'TEMPO', 'TEMUI', 'TEMUT', 'TENDA', 'TENDE', 'TENIA', 'TENIE', 'TENII', 'TENIS', 'TENOR', 'TENTA', 'TENTE', 'TENUL', 'TEPEI', 'TEPII', 'TEPOS', 'TEPUL', 'TERAS', 'TERAZ', 'TERCI', 'TEREN', 'TERFE', 'TERII', 'TERME', 'TERMO', 'TERNA', 'TERNE', 'TERNI', 'TERTA', 'TERTE', 'TERTI', 'TESAC', 'TESAL', 'TESEA', 'TESEM', 'TESII', 'TESIM', 'TESIT', 'TESLA', 'TESLE', 'TESOS', 'TESTA', 'TESTE', 'TESUI', 'TESUT', 'TETEA', 'TETEI', 'TETRA', 'TETRE', 'TEUCA', 'TEUCI', 'TEUGA', 'TEUGE', 'TEURI', 'TEVAR', 'TEVII', 'TEVOS', 'TEVUI', 'TEXAN', 'TEXTE', 'TEXUL', 'TEZEI', 'TIARA', 'TIARE', 'TIBET', 'TIBIA', 'TIBII', 'TICAI', 'TICLA', 'TICLE', 'TICNA', 'TICNE', 'TICNI', 'TICSI', 'TICUI', 'TICUL', 'TICUR', 'TIFAN', 'TIFIC', 'TIFLA', 'TIFLE', 'TIFON', 'TIFOS', 'TIFUL', 'TIGAI', 'TIGAN', 'TIGLA', 'TIGLE', 'TIGRA', 'TIGRE', 'TIGRI', 'TIGRU', 'TIGVA', 'TIGVE', 'TIHAI', 'TIHNA', 'TIHNE', 'TIHNI', 'TIHUI', 'TIIND', 'TIJEI', 'TILAI', 'TILDA', 'TILDE', 'TIMAR', 'TIMFI', 'TIMIA', 'TIMID', 'TIMIE', 'TIMII', 'TIMIN', 'TIMIR', 'TIMOL', 'TIMPI', 'TIMUS', 'TINAR', 'TINCA', 'TINCI', 'TINDA', 'TINDE', 'TINEA', 'TINEI', 'TINEM', 'TINOS', 'TINSA', 'TINSE', 'TINSI', 'TINTA', 'TINTE', 'TINTI', 'TINUI', 'TINUT', 'TINZA', 'TINZI', 'TIOLI', 'TIPAI', 'TIPAM', 'TIPAR', 'TIPAT', 'TIPAU', 'TIPEA', 'TIPEI', 'TIPET', 'TIPIA', 'TIPIC', 'TIPIE', 'TIPII', 'TIPIM', 'TIPIS', 'TIPIT', 'TIPLA', 'TIPLE', 'TIPLU', 'TIPOI', 'TIPOS', 'TIPUL', 'TIRAJ', 'TIRAN', 'TIRUL', 'TISEI', 'TISII', 'TISNI', 'TISTI', 'TISUL', 'TITAN', 'TITEI', 'TITLU', 'TITRA', 'TITRE', 'TITRU', 'TIUIA', 'TIUIE', 'TIUII', 'TIUIM', 'TIUIT', 'TIURI', 'TIVAI', 'TIVEA', 'TIVGA', 'TIVGI', 'TIVIC', 'TIVII', 'TIVIL', 'TIVIM', 'TIVIT', 'TIVLI', 'TIVUL', 'TIZEI', 'TIZIC', 'TIZII', 'TIZUL', 'TMEZA', 'TMEZE', 'TOABA', 'TOABE', 'TOACA', 'TOACE', 'TOAIA', 'TOAIE', 'TOALA', 'TOALE', 'TOANA', 'TOANE', 'TOAPA', 'TOAPE', 'TOAST', 'TOATA', 'TOATE', 'TOBAC', 'TOBAS', 'TOBEI', 'TOCAI', 'TOCAM', 'TOCAT', 'TOCAU', 'TOCEA', 'TOCII', 'TOCIM', 'TOCIT', 'TOCMA', 'TOCME', 'TOCMI', 'TOCNI', 'TOCOT', 'TOCUL', 'TOFUS', 'TOGII', 'TOIAG', 'TOIAI', 'TOIAM', 'TOIAU', 'TOILE', 'TOIND', 'TOIRA', 'TOIRE', 'TOIRI', 'TOISE', 'TOISI', 'TOITI', 'TOIUL', 'TOLBA', 'TOLBE', 'TOLEI', 'TOLET', 'TOLII', 'TOLUL', 'TOLUT', 'TOMNA', 'TOMUL', 'TONAJ', 'TONAL', 'TONDO', 'TONEI', 'TONER', 'TONIC', 'TONII', 'TONOS', 'TONOU', 'TONTI', 'TONUL', 'TONUS', 'TOPAC', 'TOPAI', 'TOPAZ', 'TOPEA', 'TOPIC', 'TOPII', 'TOPIM', 'TOPIT', 'TOPOR', 'TOPOS', 'TOPUL', 'TOPUZ', 'TORBA', 'TORBE', 'TORCI', 'TORID', 'TORIT', 'TORIU', 'TORNI', 'TORON', 'TORRI', 'TORSI', 'TORTA', 'TORTE', 'TORTI', 'TORUL', 'TOSCA', 'TOSTI', 'TOSUL', 'TOTAL', 'TOTEM', 'TOTII', 'TOTUL', 'TOVAL', 'TOXIC', 'TRACA', 'TRACE', 'TRACI', 'TRACT', 'TRADA', 'TRADU', 'TRAGA', 'TRAGE', 'TRAGI', 'TRAIA', 'TRAII', 'TRAIM', 'TRAIT', 'TRAMA', 'TRAME', 'TRANC', 'TRAND', 'TRANS', 'TRAPA', 'TRAPE', 'TRASA', 'TRASE', 'TRASI', 'TRASS', 'TRATA', 'TRATE', 'TRAUL', 'TREAZ', 'TREBI', 'TRECE', 'TRECI', 'TRECU', 'TREIA', 'TREJI', 'TRELE', 'TREMA', 'TREME', 'TRENA', 'TREND', 'TRENE', 'TRESA', 'TRESE', 'TRETI', 'TREZE', 'TREZI', 'TRIAC', 'TRIAI', 'TRIAJ', 'TRIAL', 'TRIAM', 'TRIAT', 'TRIAU', 'TRICO', 'TRIEM', 'TRIER', 'TRIEZ', 'TRIOD', 'TRIOR', 'TRISA', 'TRIST', 'TRONA', 'TRONC', 'TROPA', 'TROPI', 'TROSC', 'TROTA', 'TRUBA', 'TRUBE', 'TRUCA', 'TRUCI', 'TRUDA', 'TRUDE', 'TRUDI', 'TRUFA', 'TRUFE', 'TRUFI', 'TRUPA', 'TRUPE', 'TRUSA', 'TRUSE', 'TRUST', 'TUBAI', 'TUBAJ', 'TUBAM', 'TUBAT', 'TUBAU', 'TUBEI', 'TUBEZ', 'TUBUL', 'TUCAI', 'TUCAL', 'TUCAM', 'TUCAN', 'TUCAT', 'TUCAU', 'TUFAN', 'TUFAR', 'TUFEI', 'TUFIS', 'TUFIT', 'TUFLI', 'TUFOS', 'TUFUL', 'TUGUI', 'TUGUL', 'TUHAI', 'TUHAL', 'TUIAI', 'TUIAM', 'TUIAU', 'TUICA', 'TUICI', 'TUIEI', 'TUIES', 'TUILE', 'TUIND', 'TUIOR', 'TUIRA', 'TUIRE', 'TUIRI', 'TUISE', 'TUISI', 'TUITA', 'TUITE', 'TUITI', 'TUIUL', 'TULAI', 'TULEA', 'TULEI', 'TULEU', 'TULII', 'TULIM', 'TULIT', 'TULIU', 'TULTI', 'TULUC', 'TULUL', 'TUMBA', 'TUMBE', 'TUMUL', 'TUNAI', 'TUNAM', 'TUNAR', 'TUNAT', 'TUNAU', 'TUNDA', 'TUNDE', 'TUNEL', 'TUNER', 'TUNET', 'TUNSA', 'TUNSE', 'TUNSI', 'TUNUL', 'TUNZA', 'TUNZI', 'TUPAI', 'TUPEU', 'TURAN', 'TURBA', 'TURBE', 'TURBI', 'TURCA', 'TURCE', 'TURCI', 'TUREI', 'TURLA', 'TURLE', 'TURMA', 'TURME', 'TURNA', 'TURTA', 'TURTE', 'TURTI', 'TURUC', 'TURUI', 'TURUL', 'TUSAI', 'TUSAM', 'TUSAT', 'TUSAU', 'TUSCA', 'TUSEA', 'TUSEI', 'TUSET', 'TUSEU', 'TUSEZ', 'TUSII', 'TUSIM', 'TUSIT', 'TUSOR', 'TUSTI', 'TUSUL', 'TUTEA', 'TUTEI', 'TUTIA', 'TUTIE', 'TUTII', 'TUTOI', 'TUTOR', 'TUTTI', 'TUTUC', 'TUTUI', 'TUTUL', 'TUTUN', 'TUTUR', 'TWEED', 'TWIST', 'UBACE', 'UCIDA', 'UCIDE', 'UCIGA', 'UCISA', 'UCISE', 'UCISI', 'UCIZA', 'UCIZI', 'UCLEI', 'UCURI', 'UDAND', 'UDARA', 'UDARE', 'UDARI', 'UDASE', 'UDASI', 'UDATA', 'UDATE', 'UDATI', 'UDEAI', 'UDEAM', 'UDEAU', 'UDELE', 'UDELI', 'UDESC', 'UDIND', 'UDIRA', 'UDIRE', 'UDIRI', 'UDISE', 'UDISI', 'UDITI', 'UDMEI', 'UDURI', 'UEDUL', 'UGERE', 'UGHII', 'UGNEA', 'UGNII', 'UGNIM', 'UGNIT', 'UGUIA', 'UGUIE', 'UGUIT', 'UHALE', 'UHAUA', 'UIAGA', 'UIATI', 'UIBUL', 'UICAI', 'UICII', 'UIDEO', 'UIEGI', 'UIESC', 'UIETE', 'UILOR', 'UIMEA', 'UIMEI', 'UIMII', 'UIMIM', 'UIMIT', 'UIMUL', 'UINEI', 'UIRAM', 'UIREA', 'UIRII', 'UISEM', 'UITAI', 'UITAM', 'UITAT', 'UITAU', 'UITIT', 'UITUC', 'UIUIU', 'UJBEI', 'UJUIA', 'UJUIE', 'UJUIT', 'ULAJE', 'ULANI', 'ULCEA', 'ULCER', 'ULCUS', 'ULDUC', 'ULEIA', 'ULEIE', 'ULEII', 'ULEMA', 'ULEUL', 'ULIES', 'ULIII', 'ULITA', 'ULITE', 'ULITI', 'ULIUL', 'ULIUT', 'ULMAI', 'ULMAM', 'ULMAT', 'ULMAU', 'ULMII', 'ULMUL', 'ULNAR', 'ULNEI', 'ULTIM', 'ULTRA', 'ULUBA', 'ULUBE', 'ULUCA', 'ULUCE', 'ULUCI', 'ULUIA', 'ULUII', 'ULUIM', 'ULUIT', 'UMANA', 'UMANE', 'UMANI', 'UMBLA', 'UMBLE', 'UMBLI', 'UMBLU', 'UMBON', 'UMBRA', 'UMBRE', 'UMBRI', 'UMEDA', 'UMEDE', 'UMERE', 'UMERI', 'UMEZI', 'UMFLA', 'UMFLE', 'UMFLI', 'UMFLU', 'UMIDA', 'UMIDE', 'UMIDI', 'UMIDO', 'UMILA', 'UMILE', 'UMILI', 'UMIZI', 'UMORI', 'UMPLE', 'UMPLI', 'UMPLU', 'UNAUL', 'UNCHI', 'UNCIA', 'UNCIE', 'UNCII', 'UNDAI', 'UNDAM', 'UNDAT', 'UNDAU', 'UNDEA', 'UNDEI', 'UNDEZ', 'UNDII', 'UNDIM', 'UNDIT', 'UNDOI', 'UNDOS', 'UNDUI', 'UNEAI', 'UNEAM', 'UNEAU', 'UNEIA', 'UNELE', 'UNESC', 'UNGAR', 'UNGEA', 'UNGEM', 'UNGHI', 'UNGUR', 'UNGVI', 'UNIAT', 'UNIAX', 'UNICA', 'UNICE', 'UNICI', 'UNIME', 'UNIMI', 'UNIND', 'UNIRA', 'UNIRE', 'UNIRI', 'UNISE', 'UNISI', 'UNITA', 'UNITE', 'UNITI', 'UNORA', 'UNSEI', 'UNSII', 'UNSPE', 'UNSUL', 'UNTAR', 'UNTOS', 'UNTUL', 'UNUIA', 'URALE', 'URAND', 'URANO', 'URARA', 'URARE', 'URARI', 'URASC', 'URASE', 'URASI', 'URATA', 'URATE', 'URATI', 'URBAN', 'URBEA', 'URBEI', 'URCAI', 'URCAM', 'URCAT', 'URCAU', 'URCUS', 'URDAR', 'URDEA', 'URDEI', 'URDII', 'URDIM', 'URDIN', 'URDIT', 'URDUC', 'URDUL', 'UREDO', 'UREEA', 'UREEI', 'UREIC', 'URETR', 'UREUS', 'UREZE', 'UREZI', 'URGIA', 'URGIE', 'URGII', 'URIAS', 'URICA', 'URICE', 'URICI', 'URILE', 'URINA', 'URINE', 'URINI', 'URLAI', 'URLAM', 'URLAT', 'URLAU', 'URLET', 'URLOI', 'URLUI', 'URLUP', 'URMAI', 'URMAM', 'URMAS', 'URMAT', 'URMAU', 'URMEI', 'URMEZ', 'URMII', 'URMUL', 'URNEA', 'URNEI', 'URNII', 'URNIM', 'URNIT', 'URSAC', 'URSAR', 'URSEA', 'URSEI', 'URSII', 'URSIM', 'URSIN', 'URSIT', 'URSOI', 'URSON', 'URSUL', 'URSUZ', 'URUIA', 'URUIE', 'URUII', 'URUIM', 'URUIT', 'URZAR', 'URZEA', 'URZIC', 'URZII', 'URZIM', 'URZIT', 'URZOI', 'USARI', 'USCAI', 'USCAM', 'USCAT', 'USCAU', 'USCHI', 'USERI', 'USIER', 'USILE', 'USITA', 'USITE', 'USLAS', 'USNEI', 'USORI', 'USTAS', 'USUCA', 'USUCE', 'USUCI', 'USUIA', 'USUII', 'USUIM', 'USUIT', 'USURA', 'USURE', 'USURI', 'USUTA', 'USUTE', 'UTERE', 'UTERO', 'UTILA', 'UTILE', 'UTILI', 'UVALA', 'UVALE', 'UVEAL', 'UVEEA', 'UVEEI', 'UVIOL', 'UVRAJ', 'UVULA', 'UVULE', 'UVULO', 'UXERE', 'UZAJE', 'UZAND', 'UZARA', 'UZARE', 'UZARI', 'UZASE', 'UZASI', 'UZATA', 'UZATE', 'UZATI', 'UZBEC', 'UZEZE', 'UZEZI', 'UZINA', 'UZINE', 'UZITA', 'UZUAL', 'UZURA', 'UZURI', 'UZURP', 'VACAR', 'VACAT', 'VACII', 'VACUA', 'VACUE', 'VACUI', 'VACUL', 'VACUU', 'VADAN', 'VADEA', 'VADII', 'VADIM', 'VADIT', 'VADRA', 'VADUL', 'VADUV', 'VAFEI', 'VAGAL', 'VAGAS', 'VAGII', 'VAGIL', 'VAGIN', 'VAGON', 'VAGUE', 'VAGUL', 'VAIAG', 'VAIER', 'VAIET', 'VAILE', 'VAINA', 'VAITA', 'VAITE', 'VAITI', 'VAJAI', 'VAJEA', 'VAJIA', 'VAJIE', 'VAJII', 'VAJIM', 'VAJIT', 'VAJOI', 'VAJUL', 'VALAH', 'VALAU', 'VALCA', 'VALCI', 'VALEA', 'VALET', 'VALEU', 'VALEX', 'VALFA', 'VALFE', 'VALID', 'VALII', 'VALIU', 'VALMA', 'VALMI', 'VALON', 'VALSA', 'VALUG', 'VALUL', 'VALVA', 'VALVE', 'VALVI', 'VAMAL', 'VAMES', 'VAMII', 'VAMPA', 'VAMPE', 'VAMUI', 'VANAI', 'VANAM', 'VANAT', 'VANAU', 'VANDA', 'VANDE', 'VANDU', 'VANEI', 'VANEZ', 'VANII', 'VANJI', 'VANOS', 'VANUL', 'VANZA', 'VAPAI', 'VAPEL', 'VAPOR', 'VAPSI', 'VARAI', 'VARAM', 'VARAN', 'VARAR', 'VARAT', 'VARAU', 'VARCA', 'VARCI', 'VARDA', 'VAREC', 'VAREG', 'VAREZ', 'VARGA', 'VARGI', 'VARIA', 'VARIE', 'VARII', 'VARIO', 'VARIU', 'VAROS', 'VARSA', 'VARSE', 'VARSI', 'VARTA', 'VARUI', 'VARUL', 'VARUS', 'VARVA', 'VARVE', 'VARZA', 'VASAL', 'VASAR', 'VASCA', 'VASCE', 'VASEL', 'VASLA', 'VASLE', 'VASLI', 'VASTA', 'VASTE', 'VASTI', 'VASUL', 'VASUT', 'VATAF', 'VATAJ', 'VATAM', 'VATAS', 'VATAV', 'VATEI', 'VATES', 'VATIR', 'VATOS', 'VATRA', 'VATUI', 'VAZEI', 'VAZUI', 'VAZUL', 'VAZUT', 'VECEA', 'VECEU', 'VECHE', 'VECHI', 'VECIA', 'VECIE', 'VECII', 'VECIN', 'VECTO', 'VECUI', 'VEDDA', 'VEDDE', 'VEDEA', 'VEDEI', 'VEDEM', 'VEDIC', 'VEDRE', 'VEGAI', 'VEGHE', 'VEGHI', 'VELAR', 'VELEA', 'VELEI', 'VELIC', 'VELII', 'VELIM', 'VELIN', 'VELIT', 'VELUM', 'VELUR', 'VENAL', 'VENEA', 'VENEI', 'VENET', 'VENIA', 'VENIE', 'VENII', 'VENIM', 'VENIN', 'VENIT', 'VENOS', 'VENUS', 'VERBE', 'VERDE', 'VEREI', 'VERGA', 'VERGI', 'VERIC', 'VERIF', 'VERII', 'VERIN', 'VERMI', 'VEROS', 'VERSE', 'VERSI', 'VERSO', 'VERUI', 'VERVA', 'VERVE', 'VERZE', 'VERZI', 'VESCA', 'VESEL', 'VESTA', 'VESTE', 'VESTI', 'VETRE', 'VETRI', 'VEXAI', 'VEXAM', 'VEXAT', 'VEXAU', 'VEXEZ', 'VEXIL', 'VIARA', 'VIASE', 'VIASI', 'VIATA', 'VIATI', 'VIAZA', 'VIBRA', 'VIBRO', 'VICAR', 'VICIA', 'VICIE', 'VICII', 'VICIU', 'VIDAI', 'VIDAJ', 'VIDAM', 'VIDAT', 'VIDAU', 'VIDEI', 'VIDEO', 'VIDEZ', 'VIDMA', 'VIDME', 'VIDRA', 'VIDRE', 'VIDUL', 'VIELA', 'VIELE', 'VIERE', 'VIERI', 'VIERS', 'VIESC', 'VIETI', 'VIEZE', 'VIEZI', 'VIFEL', 'VIFOR', 'VIGAN', 'VIGIA', 'VIGIE', 'VIGII', 'VIGIL', 'VIGUL', 'VIILE', 'VIIND', 'VILEI', 'VILII', 'VILIT', 'VILOS', 'VILUL', 'VINAR', 'VINAT', 'VINCI', 'VINDE', 'VINEI', 'VINIA', 'VINIE', 'VINII', 'VINIL', 'VINIU', 'VINOS', 'VINUL', 'VINUT', 'VINZI', 'VIODA', 'VIODE', 'VIOII', 'VIOLA', 'VIOLE', 'VIORI', 'VIPIA', 'VIPIE', 'VIPII', 'VIPLA', 'VIPLE', 'VIPUL', 'VIRAI', 'VIRAJ', 'VIRAL', 'VIRAM', 'VIRAN', 'VIRAT', 'VIRAU', 'VIREZ', 'VIRGA', 'VIRID', 'VIRIL', 'VIRUL', 'VIRUS', 'VISAI', 'VISAM', 'VISAT', 'VISAU', 'VISCO', 'VISEZ', 'VISIN', 'VISUL', 'VITAE', 'VITAL', 'VITEA', 'VITEI', 'VITEL', 'VITII', 'VITIU', 'VITOS', 'VITRO', 'VIUTA', 'VIUTE', 'VIUTI', 'VIVAT', 'VIZAI', 'VIZAM', 'VIZAT', 'VIZAU', 'VIZEI', 'VIZEZ', 'VIZII', 'VIZIR', 'VIZON', 'VIZOR', 'VLAGA', 'VLAHA', 'VLAHE', 'VLAHI', 'VOALA', 'VOCAL', 'VOCEA', 'VOCII', 'VODCA', 'VODCI', 'VODER', 'VOGAI', 'VOIAI', 'VOIAJ', 'VOIAM', 'VOIAU', 'VOILE', 'VOIND', 'VOIOS', 'VOIRA', 'VOIRE', 'VOIRI', 'VOISE', 'VOISI', 'VOITA', 'VOITE', 'VOITI', 'VOIUL', 'VOLAN', 'VOLAR', 'VOLEI', 'VOLET', 'VOLEU', 'VOLOC', 'VOLOG', 'VOLSC', 'VOLTA', 'VOLTE', 'VOLTI', 'VOLUM', 'VOLVA', 'VOLVE', 'VOMAI', 'VOMAM', 'VOMAT', 'VOMAU', 'VOMEI', 'VOMER', 'VOMEZ', 'VOMIC', 'VOMIT', 'VOPSI', 'VORBA', 'VORBE', 'VORBI', 'VOSTI', 'VOTAI', 'VOTAM', 'VOTAT', 'VOTAU', 'VOTCA', 'VOTCI', 'VOTEZ', 'VOTIV', 'VOTRI', 'VOTRU', 'VOTUL', 'VOTUM', 'VOZAI', 'VOZAM', 'VOZAT', 'VOZAU', 'VRACE', 'VRACI', 'VRAJA', 'VRAJI', 'VRANA', 'VRAND', 'VRANE', 'VRATI', 'VREAI', 'VREAM', 'VREAU', 'VREIE', 'VREJI', 'VREME', 'VREMI', 'VRERE', 'VRERI', 'VRETI', 'VREUN', 'VRIEI', 'VRILA', 'VRILE', 'VROIA', 'VROII', 'VROIM', 'VROIT', 'VRUNA', 'VRURA', 'VRUSE', 'VRUSI', 'VRUTA', 'VRUTE', 'VRUTI', 'VTORI', 'VUIAU', 'VUIET', 'VUIND', 'VUIRA', 'VUIRE', 'VUIRI', 'VUISE', 'VULPE', 'VULPI', 'VULVA', 'VULVE', 'VULVO', 'VURTA', 'VURTE', 'VUTCA', 'VUTCI', 'VUTEI', 'VUVAR', 'VUVEI', 'VUVUI', 'WALON', 'WATII', 'WEBER', 'WHIGI', 'WIDIA', 'WIDII', 'WILOW', 'WOLOF', 'WONII', 'WONUL', 'XANTO', 'XENIA', 'XENIE', 'XENII', 'XENON', 'XERES', 'XERIC', 'XEROM', 'XEROX', 'XIFIA', 'XIFIE', 'XIFII', 'XIFOS', 'XILAN', 'XILEM', 'XILEN', 'XILIT', 'XILOL', 'XILON', 'XISMA', 'XISME', 'YALEI', 'YARZI', 'YENII', 'YENUL', 'YETII', 'YOGIN', 'YTRIT', 'YTRIU', 'YUANI', 'YUCCA', 'YUNGA', 'YUPPI', 'ZABET', 'ZABRA', 'ZABRE', 'ZABUN', 'ZACAS', 'ZACEA', 'ZACEM', 'ZACUI', 'ZACUT', 'ZADAR', 'ZADEI', 'ZADIA', 'ZADIE', 'ZADII', 'ZADUF', 'ZADUH', 'ZAGAN', 'ZAGAS', 'ZAGAZ', 'ZAHAI', 'ZAHAR', 'ZAICA', 'ZAICI', 'ZAIFA', 'ZAIFE', 'ZAIFI', 'ZAIMF', 'ZAIRI', 'ZALAR', 'ZALEI', 'ZALOG', 'ZALUD', 'ZALUG', 'ZAMAC', 'ZAMBI', 'ZAMBO', 'ZAMCA', 'ZAMCI', 'ZAMII', 'ZANAT', 'ZANEI', 'ZAPAI', 'ZAPAJ', 'ZAPAM', 'ZAPAT', 'ZAPAU', 'ZAPEZ', 'ZAPIS', 'ZAPOR', 'ZAPSI', 'ZAPUC', 'ZARAF', 'ZARAR', 'ZAREA', 'ZAREI', 'ZARIF', 'ZARII', 'ZARIM', 'ZARIT', 'ZARNA', 'ZARNE', 'ZARPA', 'ZARUL', 'ZARVA', 'ZARVE', 'ZASTI', 'ZATON', 'ZATUL', 'ZAUIT', 'ZAVOD', 'ZAVOI', 'ZAVOR', 'ZAZAI', 'ZBANT', 'ZBARN', 'ZBATA', 'ZBATE', 'ZBATI', 'ZBATU', 'ZBENG', 'ZBICE', 'ZBICI', 'ZBIER', 'ZBILT', 'ZBIRI', 'ZBORI', 'ZBURA', 'ZBURD', 'ZEAMA', 'ZEAUA', 'ZEBRA', 'ZEBRE', 'ZEBUL', 'ZECEA', 'ZECER', 'ZECHE', 'ZECHI', 'ZEELE', 'ZEFIR', 'ZEGHE', 'ZEGHI', 'ZEIEI', 'ZEINA', 'ZEINE', 'ZEITA', 'ZEITE', 'ZELAR', 'ZELEI', 'ZELOS', 'ZELOT', 'ZELUL', 'ZEMII', 'ZEMOS', 'ZEMUI', 'ZENDA', 'ZENDE', 'ZENIT', 'ZENUL', 'ZENZI', 'ZEPPA', 'ZEPPE', 'ZERAR', 'ZEREA', 'ZERIT', 'ZEROS', 'ZERUL', 'ZETAJ', 'ZETAR', 'ZETUI', 'ZGAIA', 'ZGAII', 'ZGAIM', 'ZGAIT', 'ZGAUL', 'ZGAUR', 'ZGULI', 'ZGURA', 'ZGURI', 'ZIARE', 'ZICAS', 'ZICEA', 'ZICEM', 'ZIDAR', 'ZIDEA', 'ZIDII', 'ZIDIM', 'ZIDIT', 'ZIDUI', 'ZIDUL', 'ZIGOT', 'ZILAS', 'ZILEI', 'ZILER', 'ZILOS', 'ZIMTA', 'ZIMTI', 'ZINCA', 'ZISEI', 'ZISII', 'ZISUL', 'ZITUM', 'ZIUCA', 'ZIUCI', 'ZLACE', 'ZLACI', 'ZLATI', 'ZLOTI', 'ZMEIE', 'ZMEII', 'ZMEOI', 'ZMEUL', 'ZMEUR', 'ZOAIA', 'ZOAIE', 'ZOALA', 'ZOALE', 'ZOANA', 'ZOANE', 'ZOARH', 'ZOAVA', 'ZOAVE', 'ZOBEA', 'ZOBII', 'ZOBIM', 'ZOBIT', 'ZOBON', 'ZOBUL', 'ZODIA', 'ZODIE', 'ZODII', 'ZOILE', 'ZOILI', 'ZOIOS', 'ZOLEA', 'ZOLGA', 'ZOLGE', 'ZOLGI', 'ZOLII', 'ZOLIM', 'ZOLIT', 'ZOMBI', 'ZONAJ', 'ZONAL', 'ZONAR', 'ZONEI', 'ZOOID', 'ZOONI', 'ZOOUL', 'ZOOZA', 'ZOOZE', 'ZOPAI', 'ZOPPA', 'ZOREA', 'ZOREI', 'ZOREL', 'ZORII', 'ZORIL', 'ZORIM', 'ZORIT', 'ZORUL', 'ZOVON', 'ZUAVI', 'ZUFUL', 'ZULIA', 'ZULIE', 'ZULII', 'ZULUF', 'ZULUM', 'ZULUS', 'ZUPAI', 'ZUPUI', 'ZURAI', 'ZURBA', 'ZURBE', 'ZURRR', 'ZURUI', 'ZUZAI', 'ZUZET', 'ZUZUI', 'ZVANT', 'ZVARL', 'ZVARR', 'ZVELT', 'ZVONI'], Ia = "present", Ma = "correct", Oa = "absent"; var Ra = { unknown: 0, absent: 1, present: 2, correct: 3 }; function Pa(e, a) { var s = {}; return e.forEach((function (e, t) { if (a[t]) for (var o = 0; o < e.length; o++) { var n = e[o], r = a[t][o], i = s[n] || "unknown"; Ra[r] > Ra[i] && (s[n] = r) } })), s } function $a(e) { var a = ["th", "st", "nd", "rd"], s = e % 100; return e + (a[(s - 20) % 10] || a[s] || a[0]) } var Ha = new Date(2022, 1, 5, 0, 0, 0, 0); function Na(e, a) { var s = new Date(e), t = new Date(a).setHours(0, 0, 0, 0) - s.setHours(0, 0, 0, 0); return Math.round(t / 864e5) } function Da(e) { var a, s = Ga(e); return a = s % La.length, La[a] } function Ga(e) { return Na(Ha, e) } var Ba = "abcdefghijklmnopqrstuvwxyz", Fa = [].concat(g(Ba.split("").slice(13)), g(Ba.split("").slice(0, 13))); function Wa(e) { for (var a = "", s = 0; s < e.length; s++) { var t = Ba.indexOf(e[s]); a += t >= 0 ? Fa[t] : "_" } return a } var Ya = "statistics", Ja = "fail", Ua = { currentStreak: 0, maxStreak: 0, guesses: n({ 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0 }, Ja, 0), winPercentage: 0, gamesPlayed: 0, gamesWon: 0, averageGuesses: 0 }; function Xa() { var e = window.localStorage.getItem(Ya) || JSON.stringify(Ua); return JSON.parse(e) } function Va(e) { var a = e.isWin, s = e.isStreak, t = e.numGuesses, o = Xa(); a ? (o.guesses[t] += 1, s ? o.currentStreak += 1 : o.currentStreak = 1) : (o.currentStreak = 0, o.guesses.fail += 1), o.maxStreak = Math.max(o.currentStreak, o.maxStreak), o.gamesPlayed += 1, o.gamesWon += a ? 1 : 0, o.winPercentage = Math.round(o.gamesWon / o.gamesPlayed * 100), o.averageGuesses = Math.round(Object.entries(o.guesses).reduce((function (e, a) { var s = y(a, 2), t = s[0], o = s[1]; return t !== Ja ? e += t * o : e }), 0) / o.gamesWon), function (e) { window.localStorage.setItem(Ya, JSON.stringify(e)) }(o) } var Ka = document.createElement("template"); Ka.innerHTML = "\n  <style>\n  .toaster {\n    position: absolute;\n    top: 10%;\n    left: 50%;\n    transform: translate(-50%, 0);\n    pointer-events: none;\n    width: fit-content;\n  }\n  #game-toaster {\n    z-index: ".concat(1e3, ";\n  }\n  #system-toaster {\n    z-index: ").concat(4e3, ';\n  }\n\n  #game {\n    width: 100%;\n    max-width: var(--game-max-width);\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n  header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: var(--header-height);\n    color: var(--color-tone-1);\n    border-bottom: 1px solid var(--color-tone-4);\n  }\n  header .title {\n    font-weight: 700;\n    font-size: 36px;\n    letter-spacing: 0.2rem;\n    text-transform: uppercase;\n    text-align: center;\n    position: absolute;\n    left: 0;\n    right: 0;\n    pointer-events: none;\n  }\n\n  @media (max-width: 360px) {\n    header .title {\n      font-size: 22px;\n      letter-spacing: 0.1rem;\n    }\n  }\n\n  #board-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-grow: 1;\n    overflow: hidden;\n  }\n  #board {\n    display: grid;\n    grid-template-rows: repeat(6, 1fr);\n    grid-gap: 5px;\n    padding:10px;\n    box-sizing: border-box;\n  }\n  button.icon {\n    background: none;\n    border: none;\n    cursor: pointer;\n    padding: 0 4px;\n  }\n\n  #debug-tools {\n    position: absolute;\n    bottom: 0;\n  }\n\n  </style>\n  <game-theme-manager>\n    <div id="game">\n      <header>\n        <div class="menu">\n          <button id="help-button" class="icon" aria-label="help">\n            <game-icon icon="help"></game-icon>\n          </button>\n        </div>\n        <div class="title">\n         Marvel Wordle\n        </div>\n        <div class="menu">\n          <button id="statistics-button" class="icon" aria-label="statistics">\n            <game-icon icon="statistics"></game-icon>\n          </button>\n          <button id="settings-button" class="icon" aria-label="settings">\n            <game-icon icon="settings"></game-icon>\n          </button>\n        </div>\n      </header>\n        <div id="board-container">\n          <div id="board"></div>\n        </div>\n        <game-keyboard></game-keyboard>\n        <game-modal></game-modal>\n        <game-page></game-page>\n        <div class="toaster" id="game-toaster"></div>\n        <div class="toaster" id="system-toaster"></div>\n    </div>\n  </game-theme-manager>\n  <div id="debug-tools"></div>\n'); var Qa = document.createElement("template"); Qa.innerHTML = '\n<button id="reveal">reveal</button>\n<button id="shake">shake</button>\n<button id="bounce">bounce</button>\n<button id="toast">toast</button>\n<button id="modal">modal</button>\n'; var Za = "IN_PROGRESS", es = "WIN", as = "FAIL", ss = ["Marvelous", "Magnificent", "Impressive", "Splendid", "Great", "Phew"], ts = function (e) { r(t, e); var a = h(t); function t() { var e; s(this, t), n(p(e = a.call(this)), "tileIndex", 0), n(p(e), "rowIndex", 0), n(p(e), "solution", void 0), n(p(e), "boardState", void 0), n(p(e), "evaluations", void 0), n(p(e), "canInput", !0), n(p(e), "gameStatus", Za), n(p(e), "letterEvaluations", {}), n(p(e), "$board", void 0), n(p(e), "$keyboard", void 0), n(p(e), "$game", void 0), n(p(e), "today", void 0), n(p(e), "lastPlayedTs", void 0), n(p(e), "lastCompletedTs", void 0), n(p(e), "hardMode", void 0), n(p(e), "dayOffset", void 0), e.attachShadow({ mode: "open" }), e.today = new Date; var o = za(); return e.lastPlayedTs = o.lastPlayedTs, !e.lastPlayedTs || Na(new Date(e.lastPlayedTs), e.today) >= 1 ? (e.boardState = new Array(6).fill(""), e.evaluations = new Array(6).fill(null), e.solution = Da(e.today), e.dayOffset = Ga(e.today), e.lastCompletedTs = o.lastCompletedTs, e.hardMode = o.hardMode, e.restoringFromLocalStorage = !1, ja({ rowIndex: e.rowIndex, boardState: e.boardState, evaluations: e.evaluations, solution: e.solution, gameStatus: e.gameStatus }), Ca("event", "level_start", { level_name: Wa(e.solution) })) : (e.boardState = o.boardState, e.evaluations = o.evaluations, e.rowIndex = o.rowIndex, e.solution = o.solution, e.dayOffset = Ga(e.today), e.letterEvaluations = Pa(e.boardState, e.evaluations), e.gameStatus = o.gameStatus, e.lastCompletedTs = o.lastCompletedTs, e.hardMode = o.hardMode, e.gameStatus !== Za && (e.canInput = !1), e.restoringFromLocalStorage = !0), e } return o(t, [{ key: "evaluateRow", value: function () { if (5 === this.tileIndex && !(this.rowIndex >= 6)) { var e, a = this.$board.querySelectorAll("game-row")[this.rowIndex], s = this.boardState[this.rowIndex]; if (e = s, !Ta.includes(e) && !La.includes(e)) return a.setAttribute("invalid", ""), void this.addToast("Not in word list"); if (this.hardMode) { var t = function (e, a, s) { if (!e || !a || !s) return { validGuess: !0 }; for (var t = 0; t < s.length; t++)if (s[t] === Ma && e[t] !== a[t]) return { validGuess: !1, errorMessage: "".concat($a(t + 1), " letter must be ").concat(a[t].toUpperCase()) }; for (var o = {}, n = 0; n < s.length; n++) [Ma, Ia].includes(s[n]) && (o[a[n]] ? o[a[n]] += 1 : o[a[n]] = 1); var r = e.split("").reduce((function (e, a) { return e[a] ? e[a] += 1 : e[a] = 1, e }), {}); for (var i in o) if ((r[i] || 0) < o[i]) return { validGuess: !1, errorMessage: "Guess must contain ".concat(i.toUpperCase()) }; return { validGuess: !0 } }(s, this.boardState[this.rowIndex - 1], this.evaluations[this.rowIndex - 1]), o = t.validGuess, n = t.errorMessage; if (!o) return a.setAttribute("invalid", ""), void this.addToast(n || "Not valid in hard mode") } var r = function (e, a) { for (var s = Array(a.length).fill(Oa), t = Array(a.length).fill(!0), o = Array(a.length).fill(!0), n = 0; n < e.length; n++)e[n] === a[n] && o[n] && (s[n] = Ma, t[n] = !1, o[n] = !1); for (var r = 0; r < e.length; r++) { var i = e[r]; if (t[r]) for (var l = 0; l < a.length; l++) { var d = a[l]; if (o[l] && i === d) { s[r] = Ia, o[l] = !1; break } } } return s }(s, this.solution); this.evaluations[this.rowIndex] = r, this.letterEvaluations = Pa(this.boardState, this.evaluations), a.evaluation = this.evaluations[this.rowIndex], this.rowIndex += 1; var i = this.rowIndex >= 6, l = r.every((function (e) { return "correct" === e })); if (i || l) Va({ isWin: l, isStreak: !!this.lastCompletedTs && 1 === Na(new Date(this.lastCompletedTs), new Date), numGuesses: this.rowIndex }), ja({ lastCompletedTs: Date.now() }), this.gameStatus = l ? es : as, Ca("event", "level_end", { level_name: Wa(this.solution), num_guesses: this.rowIndex, success: l }); this.tileIndex = 0, this.canInput = !1, ja({ rowIndex: this.rowIndex, boardState: this.boardState, evaluations: this.evaluations, solution: this.solution, gameStatus: this.gameStatus, lastPlayedTs: Date.now() }) } } }, { key: "addLetter", value: function (e) { this.gameStatus === Za && (this.canInput && (this.tileIndex >= 5 || (this.boardState[this.rowIndex] += e, this.$board.querySelectorAll("game-row")[this.rowIndex].setAttribute("letters", this.boardState[this.rowIndex]), this.tileIndex += 1))) } }, { key: "removeLetter", value: function () { if (this.gameStatus === Za && this.canInput && !(this.tileIndex <= 0)) { this.boardState[this.rowIndex] = this.boardState[this.rowIndex].slice(0, this.boardState[this.rowIndex].length - 1); var e = this.$board.querySelectorAll("game-row")[this.rowIndex]; this.boardState[this.rowIndex] ? e.setAttribute("letters", this.boardState[this.rowIndex]) : e.removeAttribute("letters"), e.removeAttribute("invalid"), this.tileIndex -= 1 } } }, { key: "submitGuess", value: function () { if (this.gameStatus === Za && this.canInput) { if (5 !== this.tileIndex) return this.$board.querySelectorAll("game-row")[this.rowIndex].setAttribute("invalid", ""), void this.addToast("Not enough letters"); this.evaluateRow() } } }, { key: "addToast", value: function (e, a) { var s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], t = document.createElement("game-toast"); t.setAttribute("text", e), a && t.setAttribute("duration", a), s ? this.shadowRoot.querySelector("#system-toaster").prepend(t) : this.shadowRoot.querySelector("#game-toaster").prepend(t) } }, { key: "sizeBoard", value: function () { var e = this.shadowRoot.querySelector("#board-container"), a = Math.min(Math.floor(e.clientHeight * (5 / 6)), 350), s = 6 * Math.floor(a / 5); this.$board.style.width = "".concat(a, "px"), this.$board.style.height = "".concat(s, "px") } }, { key: "showStatsModal", value: function () { var e = this.$game.querySelector("game-modal"), a = document.createElement("game-stats"); this.gameStatus === es && this.rowIndex <= 6 && a.setAttribute("highlight-guess", this.rowIndex), a.gameApp = this, e.appendChild(a), e.setAttribute("open", "") } }, { key: "showHelpModal", value: function () { var e = this.$game.querySelector("game-modal"); e.appendChild(document.createElement("game-help")), e.setAttribute("open", "") } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(Ka.content.cloneNode(!0)), this.$game = this.shadowRoot.querySelector("#game"), this.$board = this.shadowRoot.querySelector("#board"), this.$keyboard = this.shadowRoot.querySelector("game-keyboard"), this.sizeBoard(), this.lastPlayedTs || setTimeout((function () { return e.showHelpModal() }), 100); for (var a = 0; a < 6; a++) { var s = document.createElement("game-row"); s.setAttribute("letters", this.boardState[a]), s.setAttribute("length", 5), this.evaluations[a] && (s.evaluation = this.evaluations[a]), this.$board.appendChild(s) } this.$game.addEventListener("game-key-press", (function (a) { var s = a.detail.key; "←" === s || "Backspace" === s ? e.removeLetter() : "↵" === s || "Enter" === s ? e.submitGuess() : Ba.includes(s.toLowerCase()) && e.addLetter(s.toLowerCase()) })), this.$game.addEventListener("game-last-tile-revealed-in-row", (function (a) { e.$keyboard.letterEvaluations = e.letterEvaluations, e.rowIndex < 6 && (e.canInput = !0); var s = e.$board.querySelectorAll("game-row")[e.rowIndex - 1]; (a.path || a.composedPath && a.composedPath()).includes(s) && ([es, as].includes(e.gameStatus) && (e.restoringFromLocalStorage ? e.showStatsModal() : (e.gameStatus === es && (s.setAttribute("win", ""), e.addToast(ss[e.rowIndex - 1], 2e3)), e.gameStatus === as && e.addToast(e.solution.toUpperCase(), 1 / 0), setTimeout((function () { e.showStatsModal() }), 2500))), e.restoringFromLocalStorage = !1) })), this.shadowRoot.addEventListener("game-setting-change", (function (a) { var s = a.detail, t = s.name, o = s.checked, n = s.disabled; switch (t) { case "hard-mode": return void (n ? e.addToast("Hard mode can only be enabled at the start of a round", 1500, !0) : (e.hardMode = o, ja({ hardMode: o }))) } })), this.shadowRoot.getElementById("settings-button").addEventListener("click", (function (a) { var s = e.$game.querySelector("game-page"), t = document.createTextNode("Settings"); s.appendChild(t); var o = document.createElement("game-settings"); o.setAttribute("slot", "content"), o.gameApp = e, s.appendChild(o), s.setAttribute("open", "") })), this.shadowRoot.getElementById("help-button").addEventListener("click", (function (a) { var s = e.$game.querySelector("game-page"), t = document.createTextNode("How to play"); s.appendChild(t); var o = document.createElement("game-help"); o.setAttribute("page", ""), o.setAttribute("slot", "content"), s.appendChild(o), s.setAttribute("open", "") })), this.shadowRoot.getElementById("statistics-button").addEventListener("click", (function (a) { e.showStatsModal() })), window.addEventListener("resize", this.sizeBoard.bind(this)) } }, { key: "disconnectedCallback", value: function () { } }, { key: "debugTools", value: function () { var e = this; this.shadowRoot.getElementById("debug-tools").appendChild(Qa.content.cloneNode(!0)), this.shadowRoot.getElementById("toast").addEventListener("click", (function (a) { e.addToast("hello world") })), this.shadowRoot.getElementById("modal").addEventListener("click", (function (a) { var s = e.$game.querySelector("game-modal"); s.textContent = "hello plz", s.setAttribute("open", "") })), this.shadowRoot.getElementById("reveal").addEventListener("click", (function () { e.evaluateRow() })), this.shadowRoot.getElementById("shake").addEventListener("click", (function () { e.$board.querySelectorAll("game-row")[e.rowIndex].setAttribute("invalid", "") })), this.shadowRoot.getElementById("bounce").addEventListener("click", (function () { var a = e.$board.querySelectorAll("game-row")[e.rowIndex - 1]; "" === a.getAttribute("win") ? a.removeAttribute("win") : a.setAttribute("win", "") })) } }]), t }(c(HTMLElement)); customElements.define("game-app", ts); var os = document.createElement("template"); os.innerHTML = "\n  <style>\n    .overlay {\n      display: none;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      justify-content: center;\n      align-items: center;\n      background-color: var(--opacity-50);\n      z-index: ".concat(3e3, ';\n    }\n\n    :host([open]) .overlay {\n      display: flex;\n    }\n\n    .content {\n      position: relative;\n      border-radius: 8px;\n      border: 1px solid var(--color-tone-6);\n      background-color: var(--modal-content-bg);\n      color: var(--color-tone-1);\n      box-shadow: 0 4px 23px 0 rgba(0, 0, 0, 0.2);\n      width: 90%;\n      max-height: 90%;\n      overflow-y: auto;\n      animation: SlideIn 200ms;\n      max-width: var(--game-max-width);\n      padding: 16px;\n      box-sizing: border-box;\n    }\n\n    .content.closing {\n      animation: SlideOut 200ms;\n    }\n\n    .close-icon {\n      width: 24px;\n      height: 24px;\n      position: absolute;\n      top: 16px;\n      right: 16px;\n    }\n\n    game-icon {\n      position: fixed;\n      user-select: none;\n      cursor: pointer;\n    }\n\n    @keyframes SlideIn {\n      0% {\n        transform: translateY(30px);\n        opacity: 0;\n      }\n      100% {\n        transform: translateY(0px);\n        opacity: 1;\n      }\n    }\n    @keyframes SlideOut {\n      0% {\n        transform: translateY(0px);\n        opacity: 1;\n      }\n      90% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 0;\n        transform: translateY(60px);\n      }\n    }\n  </style>\n  <div class="overlay">\n    <div class="content">\n      <slot></slot>\n      <div class="close-icon">\n        <game-icon icon="close"></game-icon>\n      </div>\n    </div>\n  </div>\n'); var ns = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(os.content.cloneNode(!0)), this.addEventListener("click", (function (a) { e.shadowRoot.querySelector(".content").classList.add("closing") })), this.shadowRoot.addEventListener("animationend", (function (a) { "SlideOut" === a.animationName && (e.shadowRoot.querySelector(".content").classList.remove("closing"), e.removeChild(e.firstChild), e.removeAttribute("open")) })) } }]), t }(c(HTMLElement)); customElements.define("game-modal", ns); var rs = document.createElement("template"); rs.innerHTML = "\n  <style>\n  :host {\n    height: var(--keyboard-height);\n  }\n  #keyboard {\n    margin: 0 8px;\n    user-select: none;\n  }\n  \n  .row {\n    display: flex;\n    width: 100%;\n    margin: 0 auto 8px;\n    /* https://stackoverflow.com/questions/46167604/ios-html-disable-double-tap-to-zoom */\n    touch-action: manipulation;\n  }\n  \n  button {\n    font-family: inherit;\n    font-weight: bold;\n    border: 0;\n    padding: 0;\n    margin: 0 6px 0 0;\n    height: 58px;\n    border-radius: 4px;\n    cursor: pointer;\n    user-select: none;\n    background-color: var(--key-bg);\n    color: var(--key-text-color);\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-transform: uppercase;\n    -webkit-tap-highlight-color: rgba(0,0,0,0.3);\n  }\n\n  button:focus {\n    outline: none;\n  }\n\n  button.fade {\n    transition: background-color 0.1s ease, color 0.1s ease;\n  }\n  \n  button:last-of-type {\n    margin: 0;\n  }\n  \n  .half {\n    flex: 0.5;\n  }\n  \n  .one {\n    flex: 1;\n  }\n\n  .one-and-a-half {\n    flex: 1.5;\n    font-size: 12px;\n  }\n  \n  .two {\n    flex: 2;\n  }\n\n  button[data-state='correct'] {\n    background-color: var(--key-bg-correct);\n    color: var(--key-evaluated-text-color);\n  }\n\n  button[data-state='present'] {\n    background-color: var(--key-bg-present);\n    color: var(--key-evaluated-text-color);\n  }\n\n  button[data-state='absent'] {\n    background-color: var(--key-bg-absent);\n    color: var(--key-evaluated-text-color);\n  }\n\n  </style>\n  <div id=\"keyboard\"></div>\n"; var is = document.createElement("template"); is.innerHTML = "\n  <button>key</button>\n"; var ls = document.createElement("template"); ls.innerHTML = '\n  <div class="spacer"></div>\n'; var ds = [["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"], ["-", "a", "s", "d", "f", "g", "h", "j", "k", "l", "-"], ["↵", "z", "x", "c", "v", "b", "n", "m", "←"]], us = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), n(p(e = a.call(this)), "_letterEvaluations", {}), e.attachShadow({ mode: "open" }), e } return o(t, [{ key: "letterEvaluations", set: function (e) { this._letterEvaluations = e, this._render() } }, { key: "dispatchKeyPressEvent", value: function (e) { this.dispatchEvent(new CustomEvent("game-key-press", { bubbles: !0, composed: !0, detail: { key: e } })) } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(rs.content.cloneNode(!0)), this.$keyboard = this.shadowRoot.getElementById("keyboard"), this.$keyboard.addEventListener("click", (function (a) { var s = a.target.closest("button"); s && e.$keyboard.contains(s) && e.dispatchKeyPressEvent(s.dataset.key) })), window.addEventListener("keydown", (function (a) { if (!0 !== a.repeat) { var s = a.key, t = a.metaKey, o = a.ctrlKey; t || o || (Ba.includes(s.toLowerCase()) || "Backspace" === s || "Enter" === s) && e.dispatchKeyPressEvent(s) } })), this.$keyboard.addEventListener("transitionend", (function (a) { var s = a.target.closest("button"); s && e.$keyboard.contains(s) && s.classList.remove("fade") })), ds.forEach((function (a) { var s = document.createElement("div"); s.classList.add("row"), a.forEach((function (e) { var a; if (e >= "a" && e <= "z" || "←" === e || "↵" === e) { if ((a = is.content.cloneNode(!0).firstElementChild).dataset.key = e, a.textContent = e, "←" === e) { var t = document.createElement("game-icon"); t.setAttribute("icon", "backspace"), a.textContent = "", a.appendChild(t), a.classList.add("one-and-a-half") } "↵" == e && (a.textContent = "enter", a.classList.add("one-and-a-half")) } else (a = ls.content.cloneNode(!0).firstElementChild).classList.add(1 === e.length ? "half" : "one"); s.appendChild(a) })), e.$keyboard.appendChild(s) })), this._render() } }, { key: "_render", value: function () { for (var e in this._letterEvaluations) { var a = this.$keyboard.querySelector('[data-key="'.concat(e, '"]')); a.dataset.state = this._letterEvaluations[e], a.classList.add("fade") } } }]), t }(c(HTMLElement));
  function cs(e, a, s, t) { return new (s || (s = Promise))((function (o, n) { function r(e) { try { l(t.next(e)) } catch (e) { n(e) } } function i(e) { try { l(t.throw(e)) } catch (e) { n(e) } } function l(e) { var a; e.done ? o(e.value) : (a = e.value, a instanceof s ? a : new s((function (e) { e(a) }))).then(r, i) } l((t = t.apply(e, a || [])).next()) })) } function ps(e, a) { var s, t, o, n, r = { label: 0, sent: function () { if (1 & o[0]) throw o[1]; return o[1] }, trys: [], ops: [] }; return n = { next: i(0), throw: i(1), return: i(2) }, "function" == typeof Symbol && (n[Symbol.iterator] = function () { return this }), n; function i(n) { return function (i) { return function (n) { if (s) throw new TypeError("Generator is already executing."); for (; r;)try { if (s = 1, t && (o = 2 & n[0] ? t.return : n[0] ? t.throw || ((o = t.return) && o.call(t), 0) : t.next) && !(o = o.call(t, n[1])).done) return o; switch (t = 0, o && (n = [2 & n[0], o.value]), n[0]) { case 0: case 1: o = n; break; case 4: return r.label++, { value: n[1], done: !1 }; case 5: r.label++, t = n[1], n = [0]; continue; case 7: n = r.ops.pop(), r.trys.pop(); continue; default: if (!((o = (o = r.trys).length > 0 && o[o.length - 1]) || 6 !== n[0] && 2 !== n[0])) { r = 0; continue } if (3 === n[0] && (!o || n[1] > o[0] && n[1] < o[3])) { r.label = n[1]; break } if (6 === n[0] && r.label < o[1]) { r.label = o[1], o = n; break } if (o && r.label < o[2]) { r.label = o[2], r.ops.push(n); break } o[2] && r.ops.pop(), r.trys.pop(); continue }n = a.call(e, r) } catch (e) { n = [6, e], t = 0 } finally { s = o = 0 } if (5 & n[0]) throw n[1]; return { value: n[0] ? n[1] : void 0, done: !0 } }([n, i]) } } } customElements.define("game-keyboard", us), function () { (console.warn || console.log).apply(console, arguments) }.bind("[clipboard-polyfill]"); var ms, hs, ys, gs, bs = "undefined" == typeof navigator ? void 0 : navigator, fs = null == bs ? void 0 : bs.clipboard; null === (ms = null == fs ? void 0 : fs.read) || void 0 === ms || ms.bind(fs), null === (hs = null == fs ? void 0 : fs.readText) || void 0 === hs || hs.bind(fs); var ks = (null === (ys = null == fs ? void 0 : fs.write) || void 0 === ys || ys.bind(fs), null === (gs = null == fs ? void 0 : fs.writeText) || void 0 === gs ? void 0 : gs.bind(fs)), vs = "undefined" == typeof window ? void 0 : window, ws = (null == vs || vs.ClipboardItem, vs); var xs = function () { this.success = !1 }; function zs(e, a, s) { for (var t in e.success = !0, a) { var o = a[t], n = s.clipboardData; n.setData(t, o), "text/plain" === t && n.getData(t) !== o && (e.success = !1) } s.preventDefault() } function js(e) { var a = new xs, s = zs.bind(this, a, e); document.addEventListener("copy", s); try { document.execCommand("copy") } finally { document.removeEventListener("copy", s) } return a.success } function Ss(e, a) { _s(e); var s = js(a); return qs(), s } function _s(e) { var a = document.getSelection(); if (a) { var s = document.createRange(); s.selectNodeContents(e), a.removeAllRanges(), a.addRange(s) } } function qs() { var e = document.getSelection(); e && e.removeAllRanges() } function Es(e) { return cs(this, void 0, void 0, (function () { var a; return ps(this, (function (s) { if (a = "text/plain" in e, "undefined" == typeof ClipboardEvent && void 0 !== ws.clipboardData && void 0 !== ws.clipboardData.setData) { if (!a) throw new Error("No `text/plain` value was specified."); if (t = e["text/plain"], ws.clipboardData.setData("Text", t)) return [2, !0]; throw new Error("Copying failed, possibly because the user rejected it.") } var t; return js(e) || navigator.userAgent.indexOf("Edge") > -1 || Ss(document.body, e) || function (e) { var a = document.createElement("div"); a.setAttribute("style", "-webkit-user-select: text !important"), a.textContent = "temporary element", document.body.appendChild(a); var s = Ss(a, e); return document.body.removeChild(a), s }(e) || function (e) { var a = document.createElement("div"); a.setAttribute("style", "-webkit-user-select: text !important"); var s = a; a.attachShadow && (s = a.attachShadow({ mode: "open" })); var t = document.createElement("span"); t.innerText = e, s.appendChild(t), document.body.appendChild(a), _s(t); var o = document.execCommand("copy"); return qs(), document.body.removeChild(a), o }(e["text/plain"]) ? [2, !0] : [2, !1] })) })) } function As(e, a, s) { try { t = navigator.userAgent || navigator.vendor || window.opera, !/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) && !/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro||ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4)) || navigator.userAgent.toLowerCase().indexOf("firefox") > -1 || void 0 === navigator.share || !navigator.canShare || !navigator.canShare(e) ? function (e) { return cs(this, void 0, void 0, (function () { return ps(this, (function (a) { if (ks) return [2, ks(e)]; if (!Es(function (e) { var a = {}; return a["text/plain"] = e, a }(e))) throw new Error("writeText() failed"); return [2] })) })) }(e.text).then(a, s) : navigator.share(e) } catch (e) { s() } var t } var Cs = document.createElement("template"); Cs.innerHTML = '\n  <style>\n    .container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      padding: 16px 0; \n    }\n    h1 {\n      font-weight: 700;\n      font-size: 16px;\n      letter-spacing: 0.5px;\n      text-transform: uppercase;\n      text-align: center;\n      margin-bottom: 10px;\n    }\n  \n    #statistics {\n      display: flex;\n      margin-bottom: \n    }\n\n    .statistic-container {\n      flex: 1;\n    }\n\n    .statistic-container .statistic {\n      font-size: 36px;\n      font-weight: 400;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      letter-spacing: 0.05em;\n      font-variant-numeric: proportional-nums;\n    }\n\n    .statistic.timer {\n      font-variant-numeric: initial;\n    }\n\n    .statistic-container .label {\n      font-size: 12px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n    }\n\n    #guess-distribution {\n      width: 80%;\n    }\n\n    .graph-container {\n      width: 100%;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      padding-bottom: 4px;\n      font-size: 14px;\n      line-height: 20px;\n    }\n\n    .graph-container .graph {\n      width: 100%;\n      height: 100%;\n      padding-left: 4px;\n    }\n\n    .graph-container .graph .graph-bar {\n      height: 100%;\n      /* Assume no wins */\n      width: 0%;\n      position: relative;\n      background-color: var(--color-absent);\n      display: flex;\n      justify-content: center;\n    }\n\n    .graph-container .graph .graph-bar.highlight {\n      background-color: var(--color-correct);\n    }\n\n    .graph-container .graph .graph-bar.align-right {\n      justify-content: flex-end;\n      padding-right: 8px;\n    }\n\n    .graph-container .graph .num-guesses {\n      font-weight: bold;\n      color: var(--tile-text-color);\n    }\n\n    #statistics,\n    #guess-distribution {\n      padding-bottom: 10px;\n    }\n\n    .footer {\n      display: flex;\n      width: 100%;\n    }\n\n    .countdown {\n      border-right: 1px solid var(--color-tone-1);\n      padding-right: 12px;\n      width: 50%;\n    }\n\n    .share {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding-left: 12px;\n      width: 50%;\n    }\n\n    .no-data {\n      text-align: center;\n    }\n\n    button#share-button {\n      background-color: var(--key-bg-correct);\n      color: var(--key-evaluated-text-color);\n      font-family: inherit;\n      font-weight: bold;\n      border-radius: 4px;\n      cursor: pointer;\n      border: none;\n      user-select: none;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-transform: uppercase;\n      -webkit-tap-highlight-color: rgba(0,0,0,0.3);\n      width: 80%;\n      font-size: 20px;\n      height: 52px;\n      -webkit-filter: brightness(100%);\n    }\n    button#share-button:hover {\n      opacity: 0.9;\n    }\n    button#share-button game-icon {\n      width: 24px;\n      height: 24px;\n      padding-left: 8px;\n    }\n  </style>\n\n  <div class="container">\n    <h1>Statistics</h1>\n    <div id="statistics"></div>\n    <h1>Guess Distribution</h1>\n    <div id="guess-distribution"></div>\n    <div class="footer"></div>\n  </div>\n'; var Ls = document.createElement("template"); Ls.innerHTML = '\n  <div class="statistic-container">\n    <div class="statistic"></div>\n    <div class="label"></div>\n  </div>\n'; var Ts = document.createElement("template"); Ts.innerHTML = '\n    <div class="graph-container">\n      <div class="guess"></div>\n      <div class="graph">\n        <div class="graph-bar">\n          <div class="num-guesses">\n        </div>\n      </div>\n      </div>\n    </div>\n'; var Is = document.createElement("template"); Is.innerHTML = '\n  <div class="countdown">\n    <h1>Next Marvel Word</h1>\n    <div id="timer">\n      <div class="statistic-container">\n        <div class="statistic timer">\n          <countdown-timer></countdown-timer>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class="share">\n    <button id="share-button">\n      Share <game-icon icon="share"></game-icon>\n    </button>\n  </div>\n'; var Ms = { currentStreak: "Current Streak", maxStreak: "Max Streak", winPercentage: "Win %", gamesPlayed: "Played", gamesWon: "Won", averageGuesses: "Av. Guesses" }, Os = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), n(p(e = a.call(this)), "stats", {}), n(p(e), "gameApp", void 0), e.attachShadow({ mode: "open" }), e.stats = Xa(), e } return o(t, [{ key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(Cs.content.cloneNode(!0)); var a = this.shadowRoot.getElementById("statistics"), s = this.shadowRoot.getElementById("guess-distribution"), t = Math.max.apply(Math, g(Object.values(this.stats.guesses))); if (Object.values(this.stats.guesses).every((function (e) { return 0 === e }))) { var o = document.createElement("div"); o.classList.add("no-data"), o.innerText = "No Data", s.appendChild(o) } else for (var n = 1; n < Object.keys(this.stats.guesses).length; n++) { var r = n, i = this.stats.guesses[n], l = Ts.content.cloneNode(!0), d = Math.max(7, Math.round(i / t * 100)); l.querySelector(".guess").textContent = r; var u = l.querySelector(".graph-bar"); if (u.style.width = "".concat(d, "%"), "number" == typeof i) { l.querySelector(".num-guesses").textContent = i, i > 0 && u.classList.add("align-right"); var c = parseInt(this.getAttribute("highlight-guess"), 10); c && n === c && u.classList.add("highlight") } s.appendChild(l) } if (["gamesPlayed", "winPercentage", "currentStreak", "maxStreak"].forEach((function (s) { var t = Ms[s], o = e.stats[s], n = Ls.content.cloneNode(!0); n.querySelector(".label").textContent = t, n.querySelector(".statistic").textContent = o, a.appendChild(n) })), this.gameApp.gameStatus !== Za) { var p = this.shadowRoot.querySelector(".footer"), m = Is.content.cloneNode(!0); p.appendChild(m), this.shadowRoot.querySelector("button#share-button").addEventListener("click", (function (a) { a.preventDefault(), a.stopPropagation(); As(function (e) { var a = e.evaluations, s = e.dayOffset, t = e.rowIndex, o = e.isHardMode, n = e.isWin, r = JSON.parse(window.localStorage.getItem(j)), i = JSON.parse(window.localStorage.getItem(S)), l = "Marvel Wordle ".concat(s); l += " ".concat(n ? t : "X", "/").concat(6), o && (l += "*"); var d = ""; return a.forEach((function (e) { e && (e.forEach((function (e) { if (e) { var a = ""; switch (e) { case Ma: a = function (e) { return e ? "🟧" : "🟩" }(i); break; case Ia: a = function (e) { return e ? "🟦" : "🟨" }(i); break; case Oa: a = function (e) { return e ? "⬛" : "⬜" }(r) }d += a } })), d += "\n") })), { text: "".concat(l, "\n\n").concat(d.trimEnd()) } }({ evaluations: e.gameApp.evaluations, dayOffset: e.gameApp.dayOffset, rowIndex: e.gameApp.rowIndex, isHardMode: e.gameApp.hardMode, isWin: e.gameApp.gameStatus === es }), (function () { e.gameApp.addToast("Copied results to clipboard", 2e3, !0) }), (function () { e.gameApp.addToast("Share failed", 2e3, !0) })) })) } } }]), t }(c(HTMLElement)); customElements.define("game-stats", Os); var Rs = document.createElement("template"); Rs.innerHTML = '\n  <style>\n    :host {\n    }\n    .container {\n      display: flex;\n      justify-content: space-between;\n    }\n    .switch {\n      height: 20px;\n      width: 32px;\n      vertical-align: middle;\n      /* not quite right */\n      background: var(--color-tone-3);\n      border-radius: 999px;\n      display: block;\n      position: relative;\n    }\n    .knob {\n      display: block;\n      position: absolute;\n      left: 2px;\n      top: 2px;\n      height: calc(100% - 4px);\n      width: 50%;\n      border-radius: 8px;\n      background: var(--white);\n      transform: translateX(0);\n      transition: transform 0.3s;\n    }\n    :host([checked]) .switch {\n      background: var(--color-correct);\n    }\n    :host([checked]) .knob {\n      transform: translateX(calc(100% - 4px));\n    }\n    :host([disabled]) .switch {\n      opacity: 0.5;\n    }\n  </style>\n  <div class="container">\n    <label><slot></slot></label>\n    <div class="switch">\n      <span class="knob"></div>\n    </div>\n  </div>\n'; var Ps = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(Rs.content.cloneNode(!0)), this.shadowRoot.querySelector(".container").addEventListener("click", (function (a) { a.stopPropagation(), e.hasAttribute("checked") ? e.removeAttribute("checked") : e.setAttribute("checked", ""), e.dispatchEvent(new CustomEvent("game-switch-change", { bubbles: !0, composed: !0, detail: { name: e.getAttribute("name"), checked: e.hasAttribute("checked"), disabled: e.hasAttribute("disabled") } })) })) } }], [{ key: "observedAttributes", get: function () { return ["checked"] } }]), t }(c(HTMLElement)); customElements.define("game-switch", Ps); var $s = document.createElement("template"); $s.innerHTML = '\n  <style>\n  .instructions {\n    font-size: 14px;\n    color: var(--color-tone-1)\n  }\n\n  .examples {\n    border-bottom: 1px solid var(--color-tone-4);\n    border-top: 1px solid var(--color-tone-4);\n  }\n\n  .example {\n    margin-top: 24px;\n    margin-bottom: 24px;\n  }\n\n  game-tile {\n    width: 40px;\n    height: 40px;\n  }\n\n  :host([page]) section {\n    padding: 16px;\n    padding-top: 0px;\n  }\n\n  </style>\n  <section>\n    <div class="instructions">\n      <p>Guess the <strong>Marvel</strong> word in 6 tries.</p>\n      <p>Each guess must be a valid 5 letter word. Hit the enter button to submit.</p>\n      <p>After each guess, the color of the tiles will change to show how close your guess was to the word.</p>\n      <div class="examples">\n        <p><strong>Examples</strong></p>\n        <div class="example">\n          <div class="row">\n            <game-tile letter="b" evaluation="correct" reveal></game-tile>\n            <game-tile letter="u"></game-tile>\n            <game-tile letter="c"></game-tile>\n            <game-tile letter="k"></game-tile>\n            <game-tile letter="y"></game-tile>\n          </div>\n          <p>The letter <strong>B</strong> is in the word and in the correct spot.</p>\n        </div>\n        <div class="example">\n          <div class="row">\n            <game-tile letter="g"></game-tile>\n            <game-tile letter="r" evaluation="present" reveal></game-tile>\n            <game-tile letter="o"></game-tile>\n            <game-tile letter="o"></game-tile>\n            <game-tile letter="t"></game-tile>\n          </div>\n          <p>The letter <strong>R</strong> is in the word but in the wrong spot.</p>\n        </div>\n        <div class="example">\n          <div class="row">\n            <game-tile letter="y"></game-tile>\n            <game-tile letter="o"></game-tile>\n            <game-tile letter="n"></game-tile>\n            <game-tile letter="d" evaluation="absent" reveal></game-tile>\n            <game-tile letter="u"></game-tile>\n          </div>\n          <p>The letter <strong>D</strong> is not in the word in any spot.</p>\n        </div>\n      </div>\n      <p><strong>A new WORDLE will be available each day!<strong></p>\n    </div>\n  </section>\n'; var Hs = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { this.shadowRoot.appendChild($s.content.cloneNode(!0)) } }]), t }(c(HTMLElement)); customElements.define("game-help", Hs); var Ns = document.createElement("template"); Ns.innerHTML = "\n  <style>\n    .overlay {\n      display: none;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      justify-content: center;\n      background-color: var(--color-background);\n      animation: SlideIn 100ms linear;\n      z-index: ".concat(2e3, ';\n    }\n\n    :host([open]) .overlay {\n      display: flex;\n    }\n\n    .content {\n      position: relative;\n      color: var(--color-tone-1);\n      padding: 0 32px;\n      max-width: var(--game-max-width);\n      width: 100%;\n      overflow-y: auto;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .content-container {\n      height: 100%;\n    }\n\n    .overlay.closing {\n      animation: SlideOut 150ms linear;\n    }\n\n    header {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n    }\n\n    h1 {\n      font-weight: 700;\n      font-size: 16px;\n      letter-spacing: 0.5px;\n      text-transform: uppercase;\n      text-align: center;\n      margin-bottom: 10px;\n    }\n\n    game-icon {\n      position: absolute;\n      right: 0;\n      user-select: none;\n      cursor: pointer;\n    }\n\n    @media only screen and (min-device-width : 320px) and (max-device-width : 480px) {\n      .content {\n        max-width: 100%;\n        padding: 0;\n      }\n      game-icon {\n        padding: 0 16px;\n      }\n    }\n\n    @keyframes SlideIn {\n      0% {\n        transform: translateY(30px);\n        opacity: 0;\n      }\n      100% {\n        transform: translateY(0px);\n        opacity: 1;\n      }\n    }\n    @keyframes SlideOut {\n      0% {\n        transform: translateY(0px);\n        opacity: 1;\n      }\n      90% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 0;\n        transform: translateY(60px);\n      }\n    }\n  </style>\n  <div class="overlay">\n    <div class="content">\n      <header>\n        <h1><slot></slot></h1>\n        <game-icon icon="close"></game-icon>\n      </header>\n      <div class="content-container">\n        <slot name="content"></slot>\n      </div>\n    </div>\n  </div>\n'); var Ds = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(Ns.content.cloneNode(!0)), this.shadowRoot.querySelector("game-icon").addEventListener("click", (function (a) { e.shadowRoot.querySelector(".overlay").classList.add("closing") })), this.shadowRoot.addEventListener("animationend", (function (a) { "SlideOut" === a.animationName && (e.shadowRoot.querySelector(".overlay").classList.remove("closing"), Array.from(e.childNodes).forEach((function (a) { e.removeChild(a) })), e.removeAttribute("open")) })) } }]), t }(c(HTMLElement)); customElements.define("game-page", Ds); var Gs = document.createElement("template"); Gs.innerHTML = '\n  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">\n    <path fill=var(--color-tone-3) />\n  </svg>\n'; var Bs = { help: "M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z", settings: "M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z", backspace: "M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7.07L2.4 12l4.66-7H22v14zm-11.59-2L14 13.41 17.59 17 19 15.59 15.41 12 19 8.41 17.59 7 14 10.59 10.41 7 9 8.41 12.59 12 9 15.59z", close: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z", share: "M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z", statistics: "M16,11V3H8v6H2v12h20V11H16z M10,5h4v14h-4V5z M4,11h4v8H4V11z M20,19h-4v-6h4V19z" }, Fs = function (e) { r(t, e); var a = h(t); function t() { var e; return s(this, t), (e = a.call(this)).attachShadow({ mode: "open" }), e } return o(t, [{ key: "connectedCallback", value: function () { this.shadowRoot.appendChild(Gs.content.cloneNode(!0)); var e = this.getAttribute("icon"); this.shadowRoot.querySelector("path").setAttribute("d", Bs[e]), "backspace" === e && this.shadowRoot.querySelector("path").setAttribute("fill", "var(--color-tone-1)"), "share" === e && this.shadowRoot.querySelector("path").setAttribute("fill", "var(--white)") } }]), t }(c(HTMLElement)); customElements.define("game-icon", Fs); var Ws = document.createElement("template"); Ws.innerHTML = '\n  <div id="timer"></div>\n'; var Ys = 6e4, Js = 36e5, Us = function (e) { r(t, e); var a = h(t); function t() { var e; s(this, t), n(p(e = a.call(this)), "targetEpochMS", void 0), n(p(e), "intervalId", void 0), n(p(e), "$timer", void 0), e.attachShadow({ mode: "open" }); var o = new Date; return o.setDate(o.getDate() + 1), o.setHours(0, 0, 0, 0), e.targetEpochMS = o.getTime(), e } return o(t, [{ key: "padDigit", value: function (e) { return e.toString().padStart(2, "0") } }, { key: "updateTimer", value: function () { var e, a = (new Date).getTime(), s = Math.floor(this.targetEpochMS - a); if (s <= 0) e = "00:00:00"; else { var t = Math.floor(s % 864e5 / Js), o = Math.floor(s % Js / Ys), n = Math.floor(s % Ys / 1e3); e = "".concat(this.padDigit(t), ":").concat(this.padDigit(o), ":").concat(this.padDigit(n)) } this.$timer.textContent = e } }, { key: "connectedCallback", value: function () { var e = this; this.shadowRoot.appendChild(Ws.content.cloneNode(!0)), this.$timer = this.shadowRoot.querySelector("#timer"), this.intervalId = setInterval((function () { e.updateTimer() }), 200) } }, { key: "disconnectedCallback", value: function () { clearInterval(this.intervalId) } }]), t }(c(HTMLElement)); return customElements.define("countdown-timer", Us), e.CountdownTimer = Us, e.GameApp = ts, e.GameHelp = Hs, e.GameIcon = Fs, e.GameKeyboard = us, e.GameModal = ns, e.GamePage = Ds, e.GameRow = x, e.GameSettings = _a, e.GameStats = Os, e.GameSwitch = Ps, e.GameThemeManager = _, e.GameTile = v, e.GameToast = Aa, Object.defineProperty(e, "__esModule", { value: !0 }), e
}({});
